<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DISnet</name>
    </assembly>
    <members>
        <member name="T:DIS1998net.VariableDatum">
             Section 5.2.32. Variable Datum Record
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.VariableDatum._variableDatumID">
            ID of the variable datum 
        </member>
        <member name="F:DIS1998net.VariableDatum._variableDatumLength">
            length of the variable datums 
        </member>
        <member name="F:DIS1998net.VariableDatum._variableDatums">
            variable length list of 64-bit datums 
        </member>
        <member name="M:DIS1998net.VariableDatum.#ctor">
            Constructor 
            <summary>
            Section 5.2.32. Variable Datum Record
            </summary>
        </member>
        <member name="M:DIS1998net.VariableDatum.setVariableDatumID(System.UInt32)">
            <summary>
            ID of the variable datum
            </summary>
        </member>
        <member name="M:DIS1998net.VariableDatum.setVariableDatumLength(System.UInt32)">
            <summary>
            This value must be set for any PDU using it to work!
            This value should be the number of bits used.
            </summary>
        </member>
        <member name="M:DIS1998net.VariableDatum.setVariableDatums(System.Collections.Generic.List{DIS1998net.EightByteChunk})">
            <summary>
            variable length list of 64-bit datums
            </summary>
        </member>
        <member name="M:DIS1998net.VariableDatum.getVariableDatums">
            <summary>
            variable length list of 64-bit datums
            </summary>
        </member>
        <member name="M:DIS1998net.VariableDatum.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.VariableDatum.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.VariableDatum.equals(DIS1998net.VariableDatum)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.VariableDatum.VariableDatumLength">
            <summary>
            This value must be set for any PDU using it to work!
            This value should be the number of bits used.
            </summary>
        </member>
        <member name="P:DIS1998net.VariableDatum.VariableDatums">
            <summary>
            variable length list of 64-bit datums
            </summary>
        </member>
        <member name="T:DIS1998net.SetDataPdu">
             Section 5.3.6.9. Change state information with the data contained in this. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="T:DIS1998net.SimulationManagementFamilyPdu">
             Section 5.3.6. Abstract superclass for PDUs relating to the simulation itself. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="T:DIS1998net.Pdu">
             The superclass for all PDUs. This incorporates the PduHeader record, section 5.2.29.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.Pdu._protocolVersion">
            The version of the protocol. 5=DIS-1995, 6=DIS-1998. 
        </member>
        <member name="F:DIS1998net.Pdu._exerciseID">
            Exercise ID 
        </member>
        <member name="F:DIS1998net.Pdu._pduType">
            Type of pdu, unique for each PDU class 
        </member>
        <member name="F:DIS1998net.Pdu._protocolFamily">
            value that refers to the protocol family, eg SimulationManagement, et 
        </member>
        <member name="F:DIS1998net.Pdu._timestamp">
            Timestamp value 
        </member>
        <member name="F:DIS1998net.Pdu._length">
            Length, in bytes, of the PDU 
        </member>
        <member name="F:DIS1998net.Pdu._padding">
            zero-filled array of padding 
        </member>
        <member name="M:DIS1998net.Pdu.#ctor">
            Constructor 
            <summary>
            The superclass for all PDUs. This incorporates the PduHeader record, section 5.2.29.
            </summary>
        </member>
        <member name="M:DIS1998net.Pdu.setProtocolVersion(System.Byte)">
            <summary>
            The version of the protocol. 5=DIS-1995, 6=DIS-1998.
            </summary>
        </member>
        <member name="M:DIS1998net.Pdu.setExerciseID(System.Byte)">
            <summary>
            Exercise ID
            </summary>
        </member>
        <member name="M:DIS1998net.Pdu.setPduType(System.Byte)">
            <summary>
            Type of pdu, unique for each PDU class
            </summary>
        </member>
        <member name="M:DIS1998net.Pdu.setProtocolFamily(System.Byte)">
            <summary>
            value that refers to the protocol family, eg SimulationManagement, et
            </summary>
        </member>
        <member name="M:DIS1998net.Pdu.setTimestamp(System.UInt32)">
            <summary>
            Timestamp value
            </summary>
        </member>
        <member name="M:DIS1998net.Pdu.setLength(System.UInt16)">
            <summary>
            Length, in bytes, of the PDU
            </summary>
        </member>
        <member name="M:DIS1998net.Pdu.setPadding(System.Int16)">
            <summary>
            zero-filled array of padding
            </summary>
        </member>
        <member name="M:DIS1998net.Pdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.Pdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.Pdu.equals(DIS1998net.Pdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="F:DIS1998net.SimulationManagementFamilyPdu._originatingEntityID">
            Entity that is sending message 
        </member>
        <member name="F:DIS1998net.SimulationManagementFamilyPdu._receivingEntityID">
            Entity that is intended to receive message 
        </member>
        <member name="M:DIS1998net.SimulationManagementFamilyPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.6. Abstract superclass for PDUs relating to the simulation itself. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementFamilyPdu.setOriginatingEntityID(DIS1998net.EntityID)">
            <summary>
            Entity that is sending message
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementFamilyPdu.getOriginatingEntityID">
            <summary>
            Entity that is sending message
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementFamilyPdu.setReceivingEntityID(DIS1998net.EntityID)">
            <summary>
            Entity that is intended to receive message
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementFamilyPdu.getReceivingEntityID">
            <summary>
            Entity that is intended to receive message
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementFamilyPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementFamilyPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementFamilyPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementFamilyPdu.equals(DIS1998net.SimulationManagementFamilyPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.SimulationManagementFamilyPdu.OriginatingEntityID">
            <summary>
            Entity that is sending message
            </summary>
        </member>
        <member name="P:DIS1998net.SimulationManagementFamilyPdu.ReceivingEntityID">
            <summary>
            Entity that is intended to receive message
            </summary>
        </member>
        <member name="F:DIS1998net.SetDataPdu._requestID">
            ID of request 
        </member>
        <member name="F:DIS1998net.SetDataPdu._padding1">
            padding 
        </member>
        <member name="F:DIS1998net.SetDataPdu._numberOfFixedDatumRecords">
            Number of fixed datum records 
        </member>
        <member name="F:DIS1998net.SetDataPdu._numberOfVariableDatumRecords">
            Number of variable datum records 
        </member>
        <member name="F:DIS1998net.SetDataPdu._fixedDatums">
            variable length list of fixed datums 
        </member>
        <member name="F:DIS1998net.SetDataPdu._variableDatums">
            variable length list of variable length datums 
        </member>
        <member name="M:DIS1998net.SetDataPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.6.9. Change state information with the data contained in this. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataPdu.setRequestID(System.UInt32)">
            <summary>
            ID of request
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataPdu.setPadding1(System.UInt32)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataPdu.setNumberOfFixedDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataPdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataPdu.setFixedDatums(System.Collections.Generic.List{DIS1998net.FixedDatum})">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataPdu.getFixedDatums">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataPdu.setVariableDatums(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataPdu.getVariableDatums">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataPdu.equals(DIS1998net.SetDataPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.SetDataPdu.NumberOfFixedDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.SetDataPdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.SetDataPdu.FixedDatums">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="P:DIS1998net.SetDataPdu.VariableDatums">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="T:DIS1998net.ReceiverPdu">
             Section 5.3.8.3. Communication of a receiver state. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="T:DIS1998net.RadioCommunicationsFamilyPdu">
             Section 5.3.8. Abstract superclass for radio communications PDUs.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.RadioCommunicationsFamilyPdu._entityId">
            ID of the entitythat is the source of the communication 
        </member>
        <member name="F:DIS1998net.RadioCommunicationsFamilyPdu._radioId">
            particular radio within an entity 
        </member>
        <member name="M:DIS1998net.RadioCommunicationsFamilyPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.8. Abstract superclass for radio communications PDUs.
            </summary>
        </member>
        <member name="M:DIS1998net.RadioCommunicationsFamilyPdu.setEntityId(DIS1998net.EntityID)">
            <summary>
            ID of the entitythat is the source of the communication
            </summary>
        </member>
        <member name="M:DIS1998net.RadioCommunicationsFamilyPdu.getEntityId">
            <summary>
            ID of the entitythat is the source of the communication
            </summary>
        </member>
        <member name="M:DIS1998net.RadioCommunicationsFamilyPdu.setRadioId(System.UInt16)">
            <summary>
            particular radio within an entity
            </summary>
        </member>
        <member name="M:DIS1998net.RadioCommunicationsFamilyPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.RadioCommunicationsFamilyPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.RadioCommunicationsFamilyPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.RadioCommunicationsFamilyPdu.equals(DIS1998net.RadioCommunicationsFamilyPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.RadioCommunicationsFamilyPdu.EntityId">
            <summary>
            ID of the entitythat is the source of the communication
            </summary>
        </member>
        <member name="F:DIS1998net.ReceiverPdu._receiverState">
            encoding scheme used, and enumeration 
        </member>
        <member name="F:DIS1998net.ReceiverPdu._padding1">
            padding 
        </member>
        <member name="F:DIS1998net.ReceiverPdu._receivedPoser">
            received power 
        </member>
        <member name="F:DIS1998net.ReceiverPdu._transmitterEntityId">
            ID of transmitter 
        </member>
        <member name="F:DIS1998net.ReceiverPdu._transmitterRadioId">
            ID of transmitting radio 
        </member>
        <member name="M:DIS1998net.ReceiverPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.8.3. Communication of a receiver state. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.ReceiverPdu.setReceiverState(System.UInt16)">
            <summary>
            encoding scheme used, and enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.ReceiverPdu.setPadding1(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.ReceiverPdu.setReceivedPoser(System.Single)">
            <summary>
            received power
            </summary>
        </member>
        <member name="M:DIS1998net.ReceiverPdu.setTransmitterEntityId(DIS1998net.EntityID)">
            <summary>
            ID of transmitter
            </summary>
        </member>
        <member name="M:DIS1998net.ReceiverPdu.getTransmitterEntityId">
            <summary>
            ID of transmitter
            </summary>
        </member>
        <member name="M:DIS1998net.ReceiverPdu.setTransmitterRadioId(System.UInt16)">
            <summary>
            ID of transmitting radio
            </summary>
        </member>
        <member name="M:DIS1998net.ReceiverPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.ReceiverPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ReceiverPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ReceiverPdu.equals(DIS1998net.ReceiverPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.ReceiverPdu.TransmitterEntityId">
            <summary>
            ID of transmitter
            </summary>
        </member>
        <member name="T:DIS1998net.MinefieldQueryPdu">
             Section 5.3.10.2 Query a minefield for information about individual mines. Requires manual clean up to get the padding right. UNFINISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="T:DIS1998net.MinefieldFamilyPdu">
             Section 5.3.10.1 Abstract superclass for PDUs relating to minefields
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="M:DIS1998net.MinefieldFamilyPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.10.1 Abstract superclass for PDUs relating to minefields
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldFamilyPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldFamilyPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldFamilyPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldFamilyPdu.equals(DIS1998net.MinefieldFamilyPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="F:DIS1998net.MinefieldQueryPdu._minefieldID">
            Minefield ID 
        </member>
        <member name="F:DIS1998net.MinefieldQueryPdu._requestingEntityID">
            EID of entity making the request 
        </member>
        <member name="F:DIS1998net.MinefieldQueryPdu._requestID">
            request ID 
        </member>
        <member name="F:DIS1998net.MinefieldQueryPdu._numberOfPerimeterPoints">
            Number of perimeter points for the minefield 
        </member>
        <member name="F:DIS1998net.MinefieldQueryPdu._pad2">
            Padding 
        </member>
        <member name="F:DIS1998net.MinefieldQueryPdu._numberOfSensorTypes">
            Number of sensor types 
        </member>
        <member name="F:DIS1998net.MinefieldQueryPdu._dataFilter">
            data filter, 32 boolean fields 
        </member>
        <member name="F:DIS1998net.MinefieldQueryPdu._requestedMineType">
            Entity type of mine being requested 
        </member>
        <member name="F:DIS1998net.MinefieldQueryPdu._requestedPerimeterPoints">
            perimeter points of request 
        </member>
        <member name="F:DIS1998net.MinefieldQueryPdu._sensorTypes">
            Sensor types, each 16 bits long 
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.10.2 Query a minefield for information about individual mines. Requires manual clean up to get the padding right. UNFINISHED
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.setMinefieldID(DIS1998net.EntityID)">
            <summary>
            Minefield ID
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.getMinefieldID">
            <summary>
            Minefield ID
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.setRequestingEntityID(DIS1998net.EntityID)">
            <summary>
            EID of entity making the request
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.getRequestingEntityID">
            <summary>
            EID of entity making the request
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.setRequestID(System.Byte)">
            <summary>
            request ID
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.setNumberOfPerimeterPoints(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfPerimeterPoints method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.setPad2(System.Byte)">
            <summary>
            Padding
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.setNumberOfSensorTypes(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSensorTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.setDataFilter(System.UInt32)">
            <summary>
            data filter, 32 boolean fields
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.setRequestedMineType(DIS1998net.EntityType)">
            <summary>
            Entity type of mine being requested
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.getRequestedMineType">
            <summary>
            Entity type of mine being requested
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.setRequestedPerimeterPoints(System.Collections.Generic.List{DIS1998net.Point})">
            <summary>
            perimeter points of request
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.getRequestedPerimeterPoints">
            <summary>
            perimeter points of request
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.setSensorTypes(System.Collections.Generic.List{DIS1998net.TwoByteChunk})">
            <summary>
            Sensor types, each 16 bits long
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.getSensorTypes">
            <summary>
            Sensor types, each 16 bits long
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldQueryPdu.equals(DIS1998net.MinefieldQueryPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.MinefieldQueryPdu.MinefieldID">
            <summary>
            Minefield ID
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldQueryPdu.RequestingEntityID">
            <summary>
            EID of entity making the request
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldQueryPdu.NumberOfPerimeterPoints">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfPerimeterPoints method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldQueryPdu.NumberOfSensorTypes">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSensorTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldQueryPdu.RequestedMineType">
            <summary>
            Entity type of mine being requested
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldQueryPdu.RequestedPerimeterPoints">
            <summary>
            perimeter points of request
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldQueryPdu.SensorTypes">
            <summary>
            Sensor types, each 16 bits long
            </summary>
        </member>
        <member name="T:DIS1998net.FourByteChunk">
             32 bit piece of data
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.FourByteChunk._otherParameters">
            four bytes of arbitrary data 
        </member>
        <member name="M:DIS1998net.FourByteChunk.#ctor">
            Constructor 
            <summary>
            32 bit piece of data
            </summary>
        </member>
        <member name="M:DIS1998net.FourByteChunk.setOtherParameters(System.Byte[])">
            <summary>
            four bytes of arbitrary data
            </summary>
        </member>
        <member name="M:DIS1998net.FourByteChunk.getOtherParameters">
            <summary>
            four bytes of arbitrary data
            </summary>
        </member>
        <member name="M:DIS1998net.FourByteChunk.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.FourByteChunk.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.FourByteChunk.equals(DIS1998net.FourByteChunk)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.FourByteChunk.OtherParameters">
            <summary>
            four bytes of arbitrary data
            </summary>
        </member>
        <member name="T:DIS1998net.FirePdu">
             Sectioin 5.3.4.1. Information about someone firing something. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="T:DIS1998net.WarfareFamilyPdu">
             Section 5.3.4. abstract superclass for fire and detonation pdus that have shared information. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.WarfareFamilyPdu._firingEntityID">
            ID of the entity that shot 
        </member>
        <member name="F:DIS1998net.WarfareFamilyPdu._targetEntityID">
            ID of the entity that is being shot at 
        </member>
        <member name="M:DIS1998net.WarfareFamilyPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.4. abstract superclass for fire and detonation pdus that have shared information. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.WarfareFamilyPdu.setFiringEntityID(DIS1998net.EntityID)">
            <summary>
            ID of the entity that shot
            </summary>
        </member>
        <member name="M:DIS1998net.WarfareFamilyPdu.getFiringEntityID">
            <summary>
            ID of the entity that shot
            </summary>
        </member>
        <member name="M:DIS1998net.WarfareFamilyPdu.setTargetEntityID(DIS1998net.EntityID)">
            <summary>
            ID of the entity that is being shot at
            </summary>
        </member>
        <member name="M:DIS1998net.WarfareFamilyPdu.getTargetEntityID">
            <summary>
            ID of the entity that is being shot at
            </summary>
        </member>
        <member name="M:DIS1998net.WarfareFamilyPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.WarfareFamilyPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.WarfareFamilyPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.WarfareFamilyPdu.equals(DIS1998net.WarfareFamilyPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.WarfareFamilyPdu.FiringEntityID">
            <summary>
            ID of the entity that shot
            </summary>
        </member>
        <member name="P:DIS1998net.WarfareFamilyPdu.TargetEntityID">
            <summary>
            ID of the entity that is being shot at
            </summary>
        </member>
        <member name="F:DIS1998net.FirePdu._munitionID">
            ID of the munition that is being shot 
        </member>
        <member name="F:DIS1998net.FirePdu._eventID">
            ID of event 
        </member>
        <member name="F:DIS1998net.FirePdu._locationInWorldCoordinates">
            location of the firing event 
        </member>
        <member name="F:DIS1998net.FirePdu._burstDescriptor">
            Describes munitions used in the firing event 
        </member>
        <member name="F:DIS1998net.FirePdu._velocity">
            Velocity of the ammunition 
        </member>
        <member name="F:DIS1998net.FirePdu._range">
            range to the target 
        </member>
        <member name="M:DIS1998net.FirePdu.#ctor">
            Constructor 
            <summary>
            Sectioin 5.3.4.1. Information about someone firing something. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.setMunitionID(DIS1998net.EntityID)">
            <summary>
            ID of the munition that is being shot
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.getMunitionID">
            <summary>
            ID of the munition that is being shot
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.setEventID(DIS1998net.EventID)">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.getEventID">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.setLocationInWorldCoordinates(DIS1998net.Vector3Double)">
            <summary>
            location of the firing event
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.getLocationInWorldCoordinates">
            <summary>
            location of the firing event
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.setBurstDescriptor(DIS1998net.BurstDescriptor)">
            <summary>
            Describes munitions used in the firing event
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.getBurstDescriptor">
            <summary>
            Describes munitions used in the firing event
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.setVelocity(DIS1998net.Vector3Float)">
            <summary>
            Velocity of the ammunition
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.getVelocity">
            <summary>
            Velocity of the ammunition
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.setRange(System.Single)">
            <summary>
            range to the target
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.FirePdu.equals(DIS1998net.FirePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.FirePdu.MunitionID">
            <summary>
            ID of the munition that is being shot
            </summary>
        </member>
        <member name="P:DIS1998net.FirePdu.EventID">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="P:DIS1998net.FirePdu.LocationInWorldCoordinates">
            <summary>
            location of the firing event
            </summary>
        </member>
        <member name="P:DIS1998net.FirePdu.BurstDescriptor">
            <summary>
            Describes munitions used in the firing event
            </summary>
        </member>
        <member name="P:DIS1998net.FirePdu.Velocity">
            <summary>
            Velocity of the ammunition
            </summary>
        </member>
        <member name="T:DIS1998net.FastEntityStatePdu">
             Section 5.3.3.1. Represents the postion and state of one entity in the world. This is identical in function to entity state pdu, but generates less garbage to collect in the Java world. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="T:DIS1998net.EntityInformationFamilyPdu">
             Section 5.3.3. Common superclass for EntityState, Collision, collision-elastic, and entity state update PDUs. This should be abstract. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="M:DIS1998net.EntityInformationFamilyPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.3. Common superclass for EntityState, Collision, collision-elastic, and entity state update PDUs. This should be abstract. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.EntityInformationFamilyPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.EntityInformationFamilyPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.EntityInformationFamilyPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.EntityInformationFamilyPdu.equals(DIS1998net.EntityInformationFamilyPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._site">
            The site ID 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._application">
            The application ID 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._entity">
            the entity ID 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._forceId">
            what force this entity is affiliated with, eg red, blue, neutral, etc 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._numberOfArticulationParameters">
            How many articulation parameters are in the variable length list 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._entityKind">
            Kind of entity 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._domain">
            Domain of entity (air, surface, subsurface, space, etc) 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._country">
            country to which the design of the entity is attributed 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._category">
            category of entity 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._subcategory">
            subcategory of entity 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._specific">
            specific info based on subcategory field 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._altEntityKind">
            Kind of entity 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._altDomain">
            Domain of entity (air, surface, subsurface, space, etc) 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._altCountry">
            country to which the design of the entity is attributed 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._altCategory">
            category of entity 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._altSubcategory">
            subcategory of entity 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._altSpecific">
            specific info based on subcategory field 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._xVelocity">
            X velo 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._yVelocity">
            y Value 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._zVelocity">
            Z value 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._xLocation">
            X value 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._yLocation">
            y Value 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._zLocation">
            Z value 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._entityAppearance">
            a series of bit flags that are used to help draw the entity, such as smoking, on fire, etc. 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._deadReckoningAlgorithm">
            enumeration of what dead reckoning algorighm to use 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._otherParameters">
            other parameters to use in the dead reckoning algorithm 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._xAcceleration">
            X value 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._yAcceleration">
            y Value 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._zAcceleration">
            Z value 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._xAngularVelocity">
            X value 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._yAngularVelocity">
            y Value 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._zAngularVelocity">
            Z value 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._marking">
            characters that can be used for debugging, or to draw unique strings on the side of entities in the world 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._capabilities">
            a series of bit flags 
        </member>
        <member name="F:DIS1998net.FastEntityStatePdu._articulationParameters">
            variable length list of articulation parameters 
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.3.1. Represents the postion and state of one entity in the world. This is identical in function to entity state pdu, but generates less garbage to collect in the Java world. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setSite(System.UInt16)">
            <summary>
            The site ID
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setApplication(System.UInt16)">
            <summary>
            The application ID
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setEntity(System.UInt16)">
            <summary>
            the entity ID
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setForceId(System.Byte)">
            <summary>
            what force this entity is affiliated with, eg red, blue, neutral, etc
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setNumberOfArticulationParameters(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfArticulationParameters method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setEntityKind(System.Byte)">
            <summary>
            Kind of entity
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setDomain(System.Byte)">
            <summary>
            Domain of entity (air, surface, subsurface, space, etc)
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setCountry(System.UInt16)">
            <summary>
            country to which the design of the entity is attributed
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setCategory(System.Byte)">
            <summary>
            category of entity
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setSubcategory(System.Byte)">
            <summary>
            subcategory of entity
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setSpecific(System.Byte)">
            <summary>
            specific info based on subcategory field
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setAltEntityKind(System.Byte)">
            <summary>
            Kind of entity
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setAltDomain(System.Byte)">
            <summary>
            Domain of entity (air, surface, subsurface, space, etc)
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setAltCountry(System.UInt16)">
            <summary>
            country to which the design of the entity is attributed
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setAltCategory(System.Byte)">
            <summary>
            category of entity
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setAltSubcategory(System.Byte)">
            <summary>
            subcategory of entity
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setAltSpecific(System.Byte)">
            <summary>
            specific info based on subcategory field
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setXVelocity(System.Single)">
            <summary>
            X velo
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setYVelocity(System.Single)">
            <summary>
            y Value
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setZVelocity(System.Single)">
            <summary>
            Z value
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setXLocation(System.Double)">
            <summary>
            X value
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setYLocation(System.Double)">
            <summary>
            y Value
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setZLocation(System.Double)">
            <summary>
            Z value
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setEntityAppearance(System.UInt32)">
            <summary>
            a series of bit flags that are used to help draw the entity, such as smoking, on fire, etc.
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setDeadReckoningAlgorithm(System.Byte)">
            <summary>
            enumeration of what dead reckoning algorighm to use
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setOtherParameters(System.Byte[])">
            <summary>
            other parameters to use in the dead reckoning algorithm
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.getOtherParameters">
            <summary>
            other parameters to use in the dead reckoning algorithm
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setXAcceleration(System.Single)">
            <summary>
            X value
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setYAcceleration(System.Single)">
            <summary>
            y Value
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setZAcceleration(System.Single)">
            <summary>
            Z value
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setXAngularVelocity(System.Single)">
            <summary>
            X value
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setYAngularVelocity(System.Single)">
            <summary>
            y Value
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setZAngularVelocity(System.Single)">
            <summary>
            Z value
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setMarking(System.Byte[])">
            <summary>
            characters that can be used for debugging, or to draw unique strings on the side of entities in the world
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.getMarking">
            <summary>
            characters that can be used for debugging, or to draw unique strings on the side of entities in the world
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setCapabilities(System.UInt32)">
            <summary>
            a series of bit flags
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.setArticulationParameters(System.Collections.Generic.List{DIS1998net.ArticulationParameter})">
            <summary>
            variable length list of articulation parameters
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.getArticulationParameters">
            <summary>
            variable length list of articulation parameters
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.FastEntityStatePdu.equals(DIS1998net.FastEntityStatePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.FastEntityStatePdu.NumberOfArticulationParameters">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfArticulationParameters method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.FastEntityStatePdu.OtherParameters">
            <summary>
            other parameters to use in the dead reckoning algorithm
            </summary>
        </member>
        <member name="P:DIS1998net.FastEntityStatePdu.Marking">
            <summary>
            characters that can be used for debugging, or to draw unique strings on the side of entities in the world
            </summary>
        </member>
        <member name="P:DIS1998net.FastEntityStatePdu.ArticulationParameters">
            <summary>
            variable length list of articulation parameters
            </summary>
        </member>
        <member name="T:DISnet.DataStreamUtilities.DataStream">
            <summary>
            Base class for storing PDU information
            </summary>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataStream.#ctor">
            <summary>
            Create new DataStream.  This will store all PDU information for either an InputStream or OutputStream
            </summary>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataStream.clear">
            <summary>
            Re-Initializes the MemoryStream and streamCounter back to zero
            </summary>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataStream.ConvertToBytes">
            <summary>
            Convert a MemoryStream to a byte array
            </summary>
            <returns>byte array</returns>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataStream.ReturnByteArray(System.Byte[],System.Int32,System.Int32,System.Byte[]@)">
            <summary>
            Used primarily to return a portion of a byte array for Endian conversion
            </summary>
            <param name="byteStream">source bytearray</param>
            <param name="startIndex">A 32-bit integer that represents the start index at which the conversion should begin</param>
            <param name="sizeOfData">A 32-bit integer that represents the size of the value type</param>
            <param name="temp">A byte array that will hold the byte representation of the value</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataStream.Append(System.Byte[])">
            <summary>
            Appends the byte array data to the MemoryStream
            </summary>
            <param name="data">byte array</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataStream.Append(System.Byte)">
            <summary>
            Appends a single byte to the MemoryStream
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:DISnet.DataStreamUtilities.DataStream.Endian">
            <summary>
            Gets or Sets the Endian type
            </summary>
        </member>
        <member name="T:DISnet.DataStreamUtilities.DataInputStream">
            <summary>
            Class used to read in PDU Bytes via the DataStream class
            </summary>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataInputStream.#ctor(DISnet.DataStreamUtilities.EndianTypes.Endian)">
            <summary>
            Constructor to create new DataInput Stream based upon a byte array.  Default endian based upon DataStream class.
            </summary>
            <param name="ds">byte array</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataInputStream.#ctor(System.Byte[],DISnet.DataStreamUtilities.EndianTypes.Endian)">
            <summary>
            Constructor to create new Input DataStream based upon a byte array and endian.
            </summary>
            <param name="ds">byte array</param>
            <param name="endian">type of endian</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataInputStream.ConvertBytesMemoryStream(System.Byte[])">
            <summary>
            Used to convert an array of bytes to a MemoryStream
            </summary>
            <param name="data">byte array</param>
            <returns>MemoryStream</returns>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataInputStream.readShort">
            <summary>
            Reads from DataStream's byte array a short value
            </summary>
            <returns>short</returns>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataInputStream.readFloat">
            <summary>
            Reads from DataStream's byte array a float value
            </summary>
            <returns>float</returns>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataInputStream.readInt">
            <summary>
            Reads from DataStream's byte array an int value
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataInputStream.readUshort">
            <summary>
            Reads from DataStream's byte array a unsigned short
            </summary>
            <returns>unsigned short</returns>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataInputStream.readUint">
            <summary>
            Reads from DataStream's byte array a unsigned int
            </summary>
            <returns>unsigned int</returns>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataInputStream.readByte">
            <summary>
            Reads from DataStream's byte array a byte
            </summary>
            <returns>byte</returns>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataInputStream.readByteArray(System.Int32)">
            <summary>
            Reads from DataStream's byte array a byte
            </summary>
            <returns>byte</returns>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataInputStream.readDouble">
            <summary>
            Reads from DataStream's byte array a double value
            </summary>
            <returns>double</returns>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataInputStream.readLong">
            <summary>
            Reads from DataStream's byte array a long
            </summary>
            <returns>long</returns>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataInputStream.readUlong">
            <summary>
            Reads from DataStream's byte array a unsigned long
            </summary>
            <returns>ulong</returns>
        </member>
        <member name="P:DISnet.DataStreamUtilities.DataInputStream.Endian">
            <summary>
            Endian value currently being used to process PDU data
            </summary>
        </member>
        <member name="T:DIS1998net.BurstDescriptor">
             Section 5.2.7. Specifies the type of muntion fired, the type of warhead, the         type of fuse, the number of rounds fired, and the rate at which the roudns are fired in         rounds per minute.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.BurstDescriptor._munition">
            What munition was used in the burst 
        </member>
        <member name="F:DIS1998net.BurstDescriptor._warhead">
            type of warhead 
        </member>
        <member name="F:DIS1998net.BurstDescriptor._fuse">
            type of fuse used 
        </member>
        <member name="F:DIS1998net.BurstDescriptor._quantity">
            how many of the munition were fired 
        </member>
        <member name="F:DIS1998net.BurstDescriptor._rate">
            rate at which the munition was fired 
        </member>
        <member name="M:DIS1998net.BurstDescriptor.#ctor">
            Constructor 
            <summary>
            Section 5.2.7. Specifies the type of muntion fired, the type of warhead, the         type of fuse, the number of rounds fired, and the rate at which the roudns are fired in         rounds per minute.
            </summary>
        </member>
        <member name="M:DIS1998net.BurstDescriptor.setMunition(DIS1998net.EntityType)">
            <summary>
            What munition was used in the burst
            </summary>
        </member>
        <member name="M:DIS1998net.BurstDescriptor.getMunition">
            <summary>
            What munition was used in the burst
            </summary>
        </member>
        <member name="M:DIS1998net.BurstDescriptor.setWarhead(System.UInt16)">
            <summary>
            type of warhead
            </summary>
        </member>
        <member name="M:DIS1998net.BurstDescriptor.setFuse(System.UInt16)">
            <summary>
            type of fuse used
            </summary>
        </member>
        <member name="M:DIS1998net.BurstDescriptor.setQuantity(System.UInt16)">
            <summary>
            how many of the munition were fired
            </summary>
        </member>
        <member name="M:DIS1998net.BurstDescriptor.setRate(System.UInt16)">
            <summary>
            rate at which the munition was fired
            </summary>
        </member>
        <member name="M:DIS1998net.BurstDescriptor.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.BurstDescriptor.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.BurstDescriptor.equals(DIS1998net.BurstDescriptor)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.BurstDescriptor.Munition">
            <summary>
            What munition was used in the burst
            </summary>
        </member>
        <member name="T:DIS1998net.ApaData">
             Used in UA PDU
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ApaData._parameterIndex">
            Index of APA parameter 
        </member>
        <member name="F:DIS1998net.ApaData._parameterValue">
            Index of APA parameter 
        </member>
        <member name="M:DIS1998net.ApaData.#ctor">
            Constructor 
            <summary>
            Used in UA PDU
            </summary>
        </member>
        <member name="M:DIS1998net.ApaData.setParameterIndex(System.UInt16)">
            <summary>
            Index of APA parameter
            </summary>
        </member>
        <member name="M:DIS1998net.ApaData.setParameterValue(System.Int16)">
            <summary>
            Index of APA parameter
            </summary>
        </member>
        <member name="M:DIS1998net.ApaData.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ApaData.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ApaData.equals(DIS1998net.ApaData)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.AggregateStatePdu">
             Section 5.3.9.1 informationa bout aggregating entities anc communicating information about the aggregated entities.        requires manual intervention to fix the padding between entityID lists and silent aggregate sysem lists--this padding        is dependent on how many entityIDs there are, and needs to be on a 32 bit word boundary. UNFINISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="T:DIS1998net.EntityManagementFamilyPdu">
             Section 5.3.9. Common superclass for EntityManagment PDUs, including aggregate state, isGroupOf, TransferControLRequest, and isPartOf
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="M:DIS1998net.EntityManagementFamilyPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.9. Common superclass for EntityManagment PDUs, including aggregate state, isGroupOf, TransferControLRequest, and isPartOf
            </summary>
        </member>
        <member name="M:DIS1998net.EntityManagementFamilyPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.EntityManagementFamilyPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.EntityManagementFamilyPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.EntityManagementFamilyPdu.equals(DIS1998net.EntityManagementFamilyPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._aggregateID">
            ID of aggregated entities 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._forceID">
            force ID 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._aggregateState">
            state of aggregate 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._aggregateType">
            entity type of the aggregated entities 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._formation">
            formation of aggregated entities 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._aggregateMarking">
            marking for aggregate; first char is charset type, rest is char data 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._dimensions">
            dimensions of bounding box for the aggregated entities, origin at the center of mass 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._orientation">
            orientation of the bounding box 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._centerOfMass">
            center of mass of the aggregation 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._velocity">
            velocity of aggregation 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._numberOfDisAggregates">
            number of aggregates 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._numberOfDisEntities">
            number of entities 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._numberOfSilentAggregateTypes">
            number of silent aggregate types 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._numberOfSilentEntityTypes">
            number of silent entity types 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._aggregateIDList">
            aggregates  list 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._entityIDList">
            entity ID list 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._pad2">
            ^^^padding to put the start of the next list on a 32 bit boundary. This needs to be fixed 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._silentAggregateSystemList">
            silent entity types 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._silentEntitySystemList">
            silent entity types 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._numberOfVariableDatumRecords">
            number of variable datum records 
        </member>
        <member name="F:DIS1998net.AggregateStatePdu._variableDatumList">
            variableDatums 
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.9.1 informationa bout aggregating entities anc communicating information about the aggregated entities.        requires manual intervention to fix the padding between entityID lists and silent aggregate sysem lists--this padding        is dependent on how many entityIDs there are, and needs to be on a 32 bit word boundary. UNFINISHED
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setAggregateID(DIS1998net.EntityID)">
            <summary>
            ID of aggregated entities
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.getAggregateID">
            <summary>
            ID of aggregated entities
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setForceID(System.Byte)">
            <summary>
            force ID
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setAggregateState(System.Byte)">
            <summary>
            state of aggregate
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setAggregateType(DIS1998net.EntityType)">
            <summary>
            entity type of the aggregated entities
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.getAggregateType">
            <summary>
            entity type of the aggregated entities
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setFormation(System.UInt32)">
            <summary>
            formation of aggregated entities
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setAggregateMarking(DIS1998net.AggregateMarking)">
            <summary>
            marking for aggregate; first char is charset type, rest is char data
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.getAggregateMarking">
            <summary>
            marking for aggregate; first char is charset type, rest is char data
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setDimensions(DIS1998net.Vector3Float)">
            <summary>
            dimensions of bounding box for the aggregated entities, origin at the center of mass
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.getDimensions">
            <summary>
            dimensions of bounding box for the aggregated entities, origin at the center of mass
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setOrientation(DIS1998net.Orientation)">
            <summary>
            orientation of the bounding box
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.getOrientation">
            <summary>
            orientation of the bounding box
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setCenterOfMass(DIS1998net.Vector3Double)">
            <summary>
            center of mass of the aggregation
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.getCenterOfMass">
            <summary>
            center of mass of the aggregation
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setVelocity(DIS1998net.Vector3Float)">
            <summary>
            velocity of aggregation
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.getVelocity">
            <summary>
            velocity of aggregation
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setNumberOfDisAggregates(System.UInt16)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfDisAggregates method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setNumberOfDisEntities(System.UInt16)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfDisEntities method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setNumberOfSilentAggregateTypes(System.UInt16)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSilentAggregateTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setNumberOfSilentEntityTypes(System.UInt16)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSilentEntityTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setAggregateIDList(System.Collections.Generic.List{DIS1998net.AggregateID})">
            <summary>
            aggregates  list
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.getAggregateIDList">
            <summary>
            aggregates  list
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setEntityIDList(System.Collections.Generic.List{DIS1998net.EntityID})">
            <summary>
            entity ID list
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.getEntityIDList">
            <summary>
            entity ID list
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setPad2(System.Byte)">
            <summary>
            ^^^padding to put the start of the next list on a 32 bit boundary. This needs to be fixed
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setSilentAggregateSystemList(System.Collections.Generic.List{DIS1998net.EntityType})">
            <summary>
            silent entity types
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.getSilentAggregateSystemList">
            <summary>
            silent entity types
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setSilentEntitySystemList(System.Collections.Generic.List{DIS1998net.EntityType})">
            <summary>
            silent entity types
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.getSilentEntitySystemList">
            <summary>
            silent entity types
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.setVariableDatumList(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            variableDatums
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.getVariableDatumList">
            <summary>
            variableDatums
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateStatePdu.equals(DIS1998net.AggregateStatePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.AggregateID">
            <summary>
            ID of aggregated entities
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.AggregateType">
            <summary>
            entity type of the aggregated entities
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.AggregateMarking">
            <summary>
            marking for aggregate; first char is charset type, rest is char data
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.Dimensions">
            <summary>
            dimensions of bounding box for the aggregated entities, origin at the center of mass
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.Orientation">
            <summary>
            orientation of the bounding box
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.CenterOfMass">
            <summary>
            center of mass of the aggregation
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.Velocity">
            <summary>
            velocity of aggregation
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.NumberOfDisAggregates">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfDisAggregates method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.NumberOfDisEntities">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfDisEntities method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.NumberOfSilentAggregateTypes">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSilentAggregateTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.NumberOfSilentEntityTypes">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSilentEntityTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.AggregateIDList">
            <summary>
            aggregates  list
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.EntityIDList">
            <summary>
            entity ID list
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.SilentAggregateSystemList">
            <summary>
            silent entity types
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.SilentEntitySystemList">
            <summary>
            silent entity types
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.AggregateStatePdu.VariableDatumList">
            <summary>
            variableDatums
            </summary>
        </member>
        <member name="T:DIS1998net.Vector3Float">
             Section 5.2.33. Three floating point values, x, y, and z
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.Vector3Float._x">
            X value 
        </member>
        <member name="F:DIS1998net.Vector3Float._y">
            y Value 
        </member>
        <member name="F:DIS1998net.Vector3Float._z">
            Z value 
        </member>
        <member name="M:DIS1998net.Vector3Float.#ctor">
            Constructor 
            <summary>
            Section 5.2.33. Three floating point values, x, y, and z
            </summary>
        </member>
        <member name="M:DIS1998net.Vector3Float.setX(System.Single)">
            <summary>
            X value
            </summary>
        </member>
        <member name="M:DIS1998net.Vector3Float.setY(System.Single)">
            <summary>
            y Value
            </summary>
        </member>
        <member name="M:DIS1998net.Vector3Float.setZ(System.Single)">
            <summary>
            Z value
            </summary>
        </member>
        <member name="M:DIS1998net.Vector3Float.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.Vector3Float.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.Vector3Float.equals(DIS1998net.Vector3Float)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.StartResumeReliablePdu">
             Section 5.3.12.3: Start resume simulation, relaible. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="T:DIS1998net.SimulationManagementWithReliabilityFamilyPdu">
             Section 5.3.12: Abstract superclass for reliable simulation management PDUs
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.SimulationManagementWithReliabilityFamilyPdu._originatingEntityID">
            Object originatig the request 
        </member>
        <member name="F:DIS1998net.SimulationManagementWithReliabilityFamilyPdu._receivingEntityID">
            Object with which this point object is associated 
        </member>
        <member name="M:DIS1998net.SimulationManagementWithReliabilityFamilyPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12: Abstract superclass for reliable simulation management PDUs
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementWithReliabilityFamilyPdu.setOriginatingEntityID(DIS1998net.EntityID)">
            <summary>
            Object originatig the request
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementWithReliabilityFamilyPdu.getOriginatingEntityID">
            <summary>
            Object originatig the request
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementWithReliabilityFamilyPdu.setReceivingEntityID(DIS1998net.EntityID)">
            <summary>
            Object with which this point object is associated
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementWithReliabilityFamilyPdu.getReceivingEntityID">
            <summary>
            Object with which this point object is associated
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementWithReliabilityFamilyPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementWithReliabilityFamilyPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementWithReliabilityFamilyPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationManagementWithReliabilityFamilyPdu.equals(DIS1998net.SimulationManagementWithReliabilityFamilyPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.SimulationManagementWithReliabilityFamilyPdu.OriginatingEntityID">
            <summary>
            Object originatig the request
            </summary>
        </member>
        <member name="P:DIS1998net.SimulationManagementWithReliabilityFamilyPdu.ReceivingEntityID">
            <summary>
            Object with which this point object is associated
            </summary>
        </member>
        <member name="F:DIS1998net.StartResumeReliablePdu._realWorldTime">
            time in real world for this operation to happen 
        </member>
        <member name="F:DIS1998net.StartResumeReliablePdu._simulationTime">
            time in simulation for the simulation to resume 
        </member>
        <member name="F:DIS1998net.StartResumeReliablePdu._requiredReliabilityService">
            level of reliability service used for this transaction 
        </member>
        <member name="F:DIS1998net.StartResumeReliablePdu._pad1">
            padding 
        </member>
        <member name="F:DIS1998net.StartResumeReliablePdu._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.StartResumeReliablePdu._requestID">
            Request ID 
        </member>
        <member name="M:DIS1998net.StartResumeReliablePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12.3: Start resume simulation, relaible. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumeReliablePdu.setRealWorldTime(DIS1998net.ClockTime)">
            <summary>
            time in real world for this operation to happen
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumeReliablePdu.getRealWorldTime">
            <summary>
            time in real world for this operation to happen
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumeReliablePdu.setSimulationTime(DIS1998net.ClockTime)">
            <summary>
            time in simulation for the simulation to resume
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumeReliablePdu.getSimulationTime">
            <summary>
            time in simulation for the simulation to resume
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumeReliablePdu.setRequiredReliabilityService(System.Byte)">
            <summary>
            level of reliability service used for this transaction
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumeReliablePdu.setPad1(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumeReliablePdu.setPad2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumeReliablePdu.setRequestID(System.UInt32)">
            <summary>
            Request ID
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumeReliablePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumeReliablePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumeReliablePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumeReliablePdu.equals(DIS1998net.StartResumeReliablePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.StartResumeReliablePdu.RealWorldTime">
            <summary>
            time in real world for this operation to happen
            </summary>
        </member>
        <member name="P:DIS1998net.StartResumeReliablePdu.SimulationTime">
            <summary>
            time in simulation for the simulation to resume
            </summary>
        </member>
        <member name="T:DIS1998net.ShaftRPMs">
             Shaft RPMs, used in underwater acoustic clacluations.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ShaftRPMs._currentShaftRPMs">
            Current shaft RPMs 
        </member>
        <member name="F:DIS1998net.ShaftRPMs._orderedShaftRPMs">
            ordered shaft rpms 
        </member>
        <member name="F:DIS1998net.ShaftRPMs._shaftRPMRateOfChange">
            rate of change of shaft RPMs 
        </member>
        <member name="M:DIS1998net.ShaftRPMs.#ctor">
            Constructor 
            <summary>
            Shaft RPMs, used in underwater acoustic clacluations.
            </summary>
        </member>
        <member name="M:DIS1998net.ShaftRPMs.setCurrentShaftRPMs(System.Int16)">
            <summary>
            Current shaft RPMs
            </summary>
        </member>
        <member name="M:DIS1998net.ShaftRPMs.setOrderedShaftRPMs(System.Int16)">
            <summary>
            ordered shaft rpms
            </summary>
        </member>
        <member name="M:DIS1998net.ShaftRPMs.setShaftRPMRateOfChange(System.Single)">
            <summary>
            rate of change of shaft RPMs
            </summary>
        </member>
        <member name="M:DIS1998net.ShaftRPMs.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ShaftRPMs.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ShaftRPMs.equals(DIS1998net.ShaftRPMs)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.SetDataReliablePdu">
             Section 5.3.12.9: initializing or chaning internal state information, reliable. Needs manual intervention to fix     padding on variable datums. UNFINISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.SetDataReliablePdu._requiredReliabilityService">
            level of reliability service used for this transaction 
        </member>
        <member name="F:DIS1998net.SetDataReliablePdu._pad1">
            padding 
        </member>
        <member name="F:DIS1998net.SetDataReliablePdu._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.SetDataReliablePdu._requestID">
            Request ID 
        </member>
        <member name="F:DIS1998net.SetDataReliablePdu._numberOfFixedDatumRecords">
            Fixed datum record count 
        </member>
        <member name="F:DIS1998net.SetDataReliablePdu._numberOfVariableDatumRecords">
            variable datum record count 
        </member>
        <member name="F:DIS1998net.SetDataReliablePdu._fixedDatumRecords">
            Fixed datum records 
        </member>
        <member name="F:DIS1998net.SetDataReliablePdu._variableDatumRecords">
            Variable datum records 
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12.9: initializing or chaning internal state information, reliable. Needs manual intervention to fix     padding on variable datums. UNFINISHED
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.setRequiredReliabilityService(System.Byte)">
            <summary>
            level of reliability service used for this transaction
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.setPad1(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.setPad2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.setRequestID(System.UInt32)">
            <summary>
            Request ID
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.setNumberOfFixedDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.setFixedDatumRecords(System.Collections.Generic.List{DIS1998net.FixedDatum})">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.getFixedDatumRecords">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.setVariableDatumRecords(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.getVariableDatumRecords">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.SetDataReliablePdu.equals(DIS1998net.SetDataReliablePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.SetDataReliablePdu.NumberOfFixedDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.SetDataReliablePdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.SetDataReliablePdu.FixedDatumRecords">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="P:DIS1998net.SetDataReliablePdu.VariableDatumRecords">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="T:DIS1998net.RepairResponsePdu">
             Section 5.2.5.6. Sent after repair complete PDU. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="T:DIS1998net.LogisticsFamilyPdu">
             Section 5.3.5. Abstract superclass for logistics PDUs. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="M:DIS1998net.LogisticsFamilyPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.5. Abstract superclass for logistics PDUs. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.LogisticsFamilyPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.LogisticsFamilyPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.LogisticsFamilyPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.LogisticsFamilyPdu.equals(DIS1998net.LogisticsFamilyPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="F:DIS1998net.RepairResponsePdu._receivingEntityID">
            Entity that is receiving service 
        </member>
        <member name="F:DIS1998net.RepairResponsePdu._repairingEntityID">
            Entity that is supplying 
        </member>
        <member name="F:DIS1998net.RepairResponsePdu._repairResult">
            Result of repair operation 
        </member>
        <member name="F:DIS1998net.RepairResponsePdu._padding1">
            padding 
        </member>
        <member name="F:DIS1998net.RepairResponsePdu._padding2">
            padding 
        </member>
        <member name="M:DIS1998net.RepairResponsePdu.#ctor">
            Constructor 
            <summary>
            Section 5.2.5.6. Sent after repair complete PDU. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.RepairResponsePdu.setReceivingEntityID(DIS1998net.EntityID)">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="M:DIS1998net.RepairResponsePdu.getReceivingEntityID">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="M:DIS1998net.RepairResponsePdu.setRepairingEntityID(DIS1998net.EntityID)">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="M:DIS1998net.RepairResponsePdu.getRepairingEntityID">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="M:DIS1998net.RepairResponsePdu.setRepairResult(System.Byte)">
            <summary>
            Result of repair operation
            </summary>
        </member>
        <member name="M:DIS1998net.RepairResponsePdu.setPadding1(System.Int16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.RepairResponsePdu.setPadding2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.RepairResponsePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.RepairResponsePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.RepairResponsePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.RepairResponsePdu.equals(DIS1998net.RepairResponsePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.RepairResponsePdu.ReceivingEntityID">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="P:DIS1998net.RepairResponsePdu.RepairingEntityID">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="T:DIS1998net.Point">
             x,y point
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.Point._x">
            x 
        </member>
        <member name="F:DIS1998net.Point._y">
            y 
        </member>
        <member name="M:DIS1998net.Point.#ctor">
            Constructor 
            <summary>
            x,y point
            </summary>
        </member>
        <member name="M:DIS1998net.Point.setX(System.Single)">
            <summary>
            x
            </summary>
        </member>
        <member name="M:DIS1998net.Point.setY(System.Single)">
            <summary>
            y
            </summary>
        </member>
        <member name="M:DIS1998net.Point.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.Point.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.Point.equals(DIS1998net.Point)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.IntercomControlPdu">
             Section 5.3.8.5. Detailed inofrmation about the state of an intercom device and the actions it is requestion         of another intercom device, or the response to a requested action. Required manual intervention to fix the intercom parameters,        which can be of varialbe length. UNFINSISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.IntercomControlPdu._controlType">
            control type 
        </member>
        <member name="F:DIS1998net.IntercomControlPdu._communicationsChannelType">
            control type 
        </member>
        <member name="F:DIS1998net.IntercomControlPdu._sourceEntityID">
            Source entity ID 
        </member>
        <member name="F:DIS1998net.IntercomControlPdu._sourceCommunicationsDeviceID">
            The specific intercom device being simulated within an entity. 
        </member>
        <member name="F:DIS1998net.IntercomControlPdu._sourceLineID">
            Line number to which the intercom control refers 
        </member>
        <member name="F:DIS1998net.IntercomControlPdu._transmitPriority">
            priority of this message relative to transmissons from other intercom devices 
        </member>
        <member name="F:DIS1998net.IntercomControlPdu._transmitLineState">
            current transmit state of the line 
        </member>
        <member name="F:DIS1998net.IntercomControlPdu._command">
            detailed type requested. 
        </member>
        <member name="F:DIS1998net.IntercomControlPdu._masterEntityID">
            eid of the entity that has created this intercom channel. 
        </member>
        <member name="F:DIS1998net.IntercomControlPdu._masterCommunicationsDeviceID">
            specific intercom device that has created this intercom channel 
        </member>
        <member name="F:DIS1998net.IntercomControlPdu._intercomParametersLength">
            number of intercom parameters 
        </member>
        <member name="F:DIS1998net.IntercomControlPdu._intercomParameters">
            ^^^This is wrong--the length of the data field is variable. Using a long for now. 
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.8.5. Detailed inofrmation about the state of an intercom device and the actions it is requestion         of another intercom device, or the response to a requested action. Required manual intervention to fix the intercom parameters,        which can be of varialbe length. UNFINSISHED
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.setControlType(System.Byte)">
            <summary>
            control type
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.setCommunicationsChannelType(System.Byte)">
            <summary>
            control type
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.setSourceEntityID(DIS1998net.EntityID)">
            <summary>
            Source entity ID
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.getSourceEntityID">
            <summary>
            Source entity ID
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.setSourceCommunicationsDeviceID(System.Byte)">
            <summary>
            The specific intercom device being simulated within an entity.
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.setSourceLineID(System.Byte)">
            <summary>
            Line number to which the intercom control refers
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.setTransmitPriority(System.Byte)">
            <summary>
            priority of this message relative to transmissons from other intercom devices
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.setTransmitLineState(System.Byte)">
            <summary>
            current transmit state of the line
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.setCommand(System.Byte)">
            <summary>
            detailed type requested.
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.setMasterEntityID(DIS1998net.EntityID)">
            <summary>
            eid of the entity that has created this intercom channel.
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.getMasterEntityID">
            <summary>
            eid of the entity that has created this intercom channel.
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.setMasterCommunicationsDeviceID(System.UInt16)">
            <summary>
            specific intercom device that has created this intercom channel
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.setIntercomParametersLength(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getintercomParametersLength method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.setIntercomParameters(System.Collections.Generic.List{DIS1998net.IntercomCommunicationsParameters})">
            <summary>
            ^^^This is wrong--the length of the data field is variable. Using a long for now.
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.getIntercomParameters">
            <summary>
            ^^^This is wrong--the length of the data field is variable. Using a long for now.
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomControlPdu.equals(DIS1998net.IntercomControlPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.IntercomControlPdu.SourceEntityID">
            <summary>
            Source entity ID
            </summary>
        </member>
        <member name="P:DIS1998net.IntercomControlPdu.MasterEntityID">
            <summary>
            eid of the entity that has created this intercom channel.
            </summary>
        </member>
        <member name="P:DIS1998net.IntercomControlPdu.IntercomParametersLength">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getintercomParametersLength method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.IntercomControlPdu.IntercomParameters">
            <summary>
            ^^^This is wrong--the length of the data field is variable. Using a long for now.
            </summary>
        </member>
        <member name="T:DIS1998net.IntercomCommunicationsParameters">
             5.2.46.  Intercom communcations parameters
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.IntercomCommunicationsParameters._recordType">
            Type of intercom parameters record 
        </member>
        <member name="F:DIS1998net.IntercomCommunicationsParameters._recordLength">
            length of record 
        </member>
        <member name="F:DIS1998net.IntercomCommunicationsParameters._recordSpecificField">
            Jerks. Looks like the committee is forcing a lookup of the record type parameter to find out how long the field is. This is a placeholder. 
        </member>
        <member name="M:DIS1998net.IntercomCommunicationsParameters.#ctor">
            Constructor 
            <summary>
            5.2.46.  Intercom communcations parameters
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomCommunicationsParameters.setRecordType(System.UInt16)">
            <summary>
            Type of intercom parameters record
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomCommunicationsParameters.setRecordLength(System.UInt16)">
            <summary>
            length of record
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomCommunicationsParameters.setRecordSpecificField(System.UInt32)">
            <summary>
            Jerks. Looks like the committee is forcing a lookup of the record type parameter to find out how long the field is. This is a placeholder.
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomCommunicationsParameters.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomCommunicationsParameters.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomCommunicationsParameters.equals(DIS1998net.IntercomCommunicationsParameters)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.FundamentalParameterDataIff">
             5.2.45. Fundamental IFF atc data
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.FundamentalParameterDataIff._erp">
            ERP 
        </member>
        <member name="F:DIS1998net.FundamentalParameterDataIff._frequency">
            frequency 
        </member>
        <member name="F:DIS1998net.FundamentalParameterDataIff._pgrf">
            pgrf 
        </member>
        <member name="F:DIS1998net.FundamentalParameterDataIff._pulseWidth">
            Pulse width 
        </member>
        <member name="F:DIS1998net.FundamentalParameterDataIff._burstLength">
            Burst length 
        </member>
        <member name="F:DIS1998net.FundamentalParameterDataIff._applicableModes">
            Applicable modes enumeration 
        </member>
        <member name="F:DIS1998net.FundamentalParameterDataIff._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.FundamentalParameterDataIff._pad3">
            padding 
        </member>
        <member name="M:DIS1998net.FundamentalParameterDataIff.#ctor">
            Constructor 
            <summary>
            5.2.45. Fundamental IFF atc data
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterDataIff.setErp(System.Single)">
            <summary>
            ERP
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterDataIff.setFrequency(System.Single)">
            <summary>
            frequency
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterDataIff.setPgrf(System.Single)">
            <summary>
            pgrf
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterDataIff.setPulseWidth(System.Single)">
            <summary>
            Pulse width
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterDataIff.setBurstLength(System.UInt32)">
            <summary>
            Burst length
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterDataIff.setApplicableModes(System.Byte)">
            <summary>
            Applicable modes enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterDataIff.setPad2(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterDataIff.setPad3(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterDataIff.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterDataIff.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterDataIff.equals(DIS1998net.FundamentalParameterDataIff)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.EventReportPdu">
             Section 5.3.6.11. Reports occurance of a significant event to the simulation manager. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.EventReportPdu._eventType">
            Type of event 
        </member>
        <member name="F:DIS1998net.EventReportPdu._padding1">
            padding 
        </member>
        <member name="F:DIS1998net.EventReportPdu._numberOfFixedDatumRecords">
            Number of fixed datum records 
        </member>
        <member name="F:DIS1998net.EventReportPdu._numberOfVariableDatumRecords">
            Number of variable datum records 
        </member>
        <member name="F:DIS1998net.EventReportPdu._fixedDatums">
            variable length list of fixed datums 
        </member>
        <member name="F:DIS1998net.EventReportPdu._variableDatums">
            variable length list of variable length datums 
        </member>
        <member name="M:DIS1998net.EventReportPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.6.11. Reports occurance of a significant event to the simulation manager. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportPdu.setEventType(System.UInt32)">
            <summary>
            Type of event
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportPdu.setPadding1(System.UInt32)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportPdu.setNumberOfFixedDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportPdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportPdu.setFixedDatums(System.Collections.Generic.List{DIS1998net.FixedDatum})">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportPdu.getFixedDatums">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportPdu.setVariableDatums(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportPdu.getVariableDatums">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportPdu.equals(DIS1998net.EventReportPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.EventReportPdu.NumberOfFixedDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.EventReportPdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.EventReportPdu.FixedDatums">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="P:DIS1998net.EventReportPdu.VariableDatums">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="T:DIS1998net.ClockTime">
             Section 5.2.8. Time measurements that exceed one hour. Hours is the number of           hours since January 1, 1970, UTC
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ClockTime._hour">
            Hours in UTC 
        </member>
        <member name="F:DIS1998net.ClockTime._timePastHour">
            Time past the hour 
        </member>
        <member name="M:DIS1998net.ClockTime.#ctor">
            Constructor 
            <summary>
            Section 5.2.8. Time measurements that exceed one hour. Hours is the number of           hours since January 1, 1970, UTC
            </summary>
        </member>
        <member name="M:DIS1998net.ClockTime.setHour(System.UInt32)">
            <summary>
            Hours in UTC
            </summary>
        </member>
        <member name="M:DIS1998net.ClockTime.setTimePastHour(System.UInt32)">
            <summary>
            Time past the hour
            </summary>
        </member>
        <member name="M:DIS1998net.ClockTime.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ClockTime.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ClockTime.equals(DIS1998net.ClockTime)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.AggregateMarking">
             Section 5.2.37. Specifies the character set used inthe first byte, followed by up to 31 characters of text data.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.AggregateMarking._characterSet">
            The character set 
        </member>
        <member name="F:DIS1998net.AggregateMarking._characters">
            The characters 
        </member>
        <member name="M:DIS1998net.AggregateMarking.#ctor">
            Constructor 
            <summary>
            Section 5.2.37. Specifies the character set used inthe first byte, followed by up to 31 characters of text data.
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateMarking.setCharacterSet(System.Byte)">
            <summary>
            The character set
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateMarking.setCharacters(System.Byte[])">
            <summary>
            The characters
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateMarking.getCharacters">
            <summary>
            The characters
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateMarking.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateMarking.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateMarking.equals(DIS1998net.AggregateMarking)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.AggregateMarking.Characters">
            <summary>
            The characters
            </summary>
        </member>
        <member name="T:DIS1998net.SupplyQuantity">
             Section 5.2.30. A supply, and the amount of that supply. Similar to an entity kind but with the addition of a quantity.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.SupplyQuantity._supplyType">
            Type of supply 
        </member>
        <member name="F:DIS1998net.SupplyQuantity._quantity">
            quantity to be supplied 
        </member>
        <member name="M:DIS1998net.SupplyQuantity.#ctor">
            Constructor 
            <summary>
            Section 5.2.30. A supply, and the amount of that supply. Similar to an entity kind but with the addition of a quantity.
            </summary>
        </member>
        <member name="M:DIS1998net.SupplyQuantity.setSupplyType(DIS1998net.EntityType)">
            <summary>
            Type of supply
            </summary>
        </member>
        <member name="M:DIS1998net.SupplyQuantity.getSupplyType">
            <summary>
            Type of supply
            </summary>
        </member>
        <member name="M:DIS1998net.SupplyQuantity.setQuantity(System.Byte)">
            <summary>
            quantity to be supplied
            </summary>
        </member>
        <member name="M:DIS1998net.SupplyQuantity.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.SupplyQuantity.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.SupplyQuantity.equals(DIS1998net.SupplyQuantity)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.SupplyQuantity.SupplyType">
            <summary>
            Type of supply
            </summary>
        </member>
        <member name="T:DIS1998net.SetRecordReliablePdu">
             Section 5.3.12.14: Initializing or changing internal parameter info. Needs manual intervention     to fix padding in recrod set PDUs. UNFINISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.SetRecordReliablePdu._requestID">
            request ID 
        </member>
        <member name="F:DIS1998net.SetRecordReliablePdu._requiredReliabilityService">
            level of reliability service used for this transaction 
        </member>
        <member name="F:DIS1998net.SetRecordReliablePdu._pad1">
            padding. The spec is unclear and contradictory here. 
        </member>
        <member name="F:DIS1998net.SetRecordReliablePdu._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.SetRecordReliablePdu._numberOfRecordSets">
            Number of record sets in list 
        </member>
        <member name="F:DIS1998net.SetRecordReliablePdu._recordSets">
            record sets 
        </member>
        <member name="M:DIS1998net.SetRecordReliablePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12.14: Initializing or changing internal parameter info. Needs manual intervention     to fix padding in recrod set PDUs. UNFINISHED
            </summary>
        </member>
        <member name="M:DIS1998net.SetRecordReliablePdu.setRequestID(System.UInt32)">
            <summary>
            request ID
            </summary>
        </member>
        <member name="M:DIS1998net.SetRecordReliablePdu.setRequiredReliabilityService(System.Byte)">
            <summary>
            level of reliability service used for this transaction
            </summary>
        </member>
        <member name="M:DIS1998net.SetRecordReliablePdu.setPad1(System.UInt16)">
            <summary>
            padding. The spec is unclear and contradictory here.
            </summary>
        </member>
        <member name="M:DIS1998net.SetRecordReliablePdu.setPad2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.SetRecordReliablePdu.setNumberOfRecordSets(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfRecordSets method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.SetRecordReliablePdu.setRecordSets(System.Collections.Generic.List{DIS1998net.RecordSet})">
            <summary>
            record sets
            </summary>
        </member>
        <member name="M:DIS1998net.SetRecordReliablePdu.getRecordSets">
            <summary>
            record sets
            </summary>
        </member>
        <member name="M:DIS1998net.SetRecordReliablePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.SetRecordReliablePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.SetRecordReliablePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.SetRecordReliablePdu.equals(DIS1998net.SetRecordReliablePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.SetRecordReliablePdu.NumberOfRecordSets">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfRecordSets method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.SetRecordReliablePdu.RecordSets">
            <summary>
            record sets
            </summary>
        </member>
        <member name="T:DIS1998net.CollisionElasticPdu">
             5.3.3.3. Information about elastic collisions in a DIS exercise shall be communicated using a Collision-Elastic PDU. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._issuingEntityID">
            ID of the entity that issued the collision PDU 
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._collidingEntityID">
            ID of entity that has collided with the issuing entity ID 
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._collisionEventID">
            ID of event 
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._pad">
            some padding 
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._contactVelocity">
            velocity at collision 
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._mass">
            mass of issuing entity 
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._location">
            Location with respect to entity the issuing entity collided with 
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._collisionResultXX">
            tensor values 
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._collisionResultXY">
            tensor values 
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._collisionResultXZ">
            tensor values 
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._collisionResultYY">
            tensor values 
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._collisionResultYZ">
            tensor values 
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._collisionResultZZ">
            tensor values 
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._unitSurfaceNormal">
            This record shall represent the normal vector to the surface at the point of collision detection. The surface normal shall be represented in world coordinates. 
        </member>
        <member name="F:DIS1998net.CollisionElasticPdu._coefficientOfRestitution">
            This field shall represent the degree to which energy is conserved in a collision 
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.#ctor">
            Constructor 
            <summary>
            5.3.3.3. Information about elastic collisions in a DIS exercise shall be communicated using a Collision-Elastic PDU. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setIssuingEntityID(DIS1998net.EntityID)">
            <summary>
            ID of the entity that issued the collision PDU
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.getIssuingEntityID">
            <summary>
            ID of the entity that issued the collision PDU
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setCollidingEntityID(DIS1998net.EntityID)">
            <summary>
            ID of entity that has collided with the issuing entity ID
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.getCollidingEntityID">
            <summary>
            ID of entity that has collided with the issuing entity ID
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setCollisionEventID(DIS1998net.EventID)">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.getCollisionEventID">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setPad(System.Int16)">
            <summary>
            some padding
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setContactVelocity(DIS1998net.Vector3Float)">
            <summary>
            velocity at collision
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.getContactVelocity">
            <summary>
            velocity at collision
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setMass(System.Single)">
            <summary>
            mass of issuing entity
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setLocation(DIS1998net.Vector3Float)">
            <summary>
            Location with respect to entity the issuing entity collided with
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.getLocation">
            <summary>
            Location with respect to entity the issuing entity collided with
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setCollisionResultXX(System.Single)">
            <summary>
            tensor values
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setCollisionResultXY(System.Single)">
            <summary>
            tensor values
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setCollisionResultXZ(System.Single)">
            <summary>
            tensor values
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setCollisionResultYY(System.Single)">
            <summary>
            tensor values
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setCollisionResultYZ(System.Single)">
            <summary>
            tensor values
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setCollisionResultZZ(System.Single)">
            <summary>
            tensor values
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setUnitSurfaceNormal(DIS1998net.Vector3Float)">
            <summary>
            This record shall represent the normal vector to the surface at the point of collision detection. The surface normal shall be represented in world coordinates.
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.getUnitSurfaceNormal">
            <summary>
            This record shall represent the normal vector to the surface at the point of collision detection. The surface normal shall be represented in world coordinates.
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.setCoefficientOfRestitution(System.Single)">
            <summary>
            This field shall represent the degree to which energy is conserved in a collision
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionElasticPdu.equals(DIS1998net.CollisionElasticPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.CollisionElasticPdu.IssuingEntityID">
            <summary>
            ID of the entity that issued the collision PDU
            </summary>
        </member>
        <member name="P:DIS1998net.CollisionElasticPdu.CollidingEntityID">
            <summary>
            ID of entity that has collided with the issuing entity ID
            </summary>
        </member>
        <member name="P:DIS1998net.CollisionElasticPdu.CollisionEventID">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="P:DIS1998net.CollisionElasticPdu.ContactVelocity">
            <summary>
            velocity at collision
            </summary>
        </member>
        <member name="P:DIS1998net.CollisionElasticPdu.Location">
            <summary>
            Location with respect to entity the issuing entity collided with
            </summary>
        </member>
        <member name="P:DIS1998net.CollisionElasticPdu.UnitSurfaceNormal">
            <summary>
            This record shall represent the normal vector to the surface at the point of collision detection. The surface normal shall be represented in world coordinates.
            </summary>
        </member>
        <member name="T:DIS1998net.AngularVelocityVector">
             5.2.2: angular velocity measured in radians per second out each of the entity's own coordinate axes.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.AngularVelocityVector._x">
            velocity about the x axis 
        </member>
        <member name="F:DIS1998net.AngularVelocityVector._y">
            velocity about the y axis 
        </member>
        <member name="F:DIS1998net.AngularVelocityVector._z">
            velocity about the zaxis 
        </member>
        <member name="M:DIS1998net.AngularVelocityVector.#ctor">
            Constructor 
            <summary>
            5.2.2: angular velocity measured in radians per second out each of the entity's own coordinate axes.
            </summary>
        </member>
        <member name="M:DIS1998net.AngularVelocityVector.setX(System.Single)">
            <summary>
            velocity about the x axis
            </summary>
        </member>
        <member name="M:DIS1998net.AngularVelocityVector.setY(System.Single)">
            <summary>
            velocity about the y axis
            </summary>
        </member>
        <member name="M:DIS1998net.AngularVelocityVector.setZ(System.Single)">
            <summary>
            velocity about the zaxis
            </summary>
        </member>
        <member name="M:DIS1998net.AngularVelocityVector.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.AngularVelocityVector.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.AngularVelocityVector.equals(DIS1998net.AngularVelocityVector)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.SphericalHarmonicAntennaPattern">
             Section 5.2.4.3. Used when the antenna pattern type in the transmitter pdu is of value 2.         Specified the direction and radiation pattern from a radio transmitter's antenna.        NOTE: this class must be hand-coded to clean up some implementation details.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="M:DIS1998net.SphericalHarmonicAntennaPattern.#ctor">
            Constructor 
            <summary>
            Section 5.2.4.3. Used when the antenna pattern type in the transmitter pdu is of value 2.         Specified the direction and radiation pattern from a radio transmitter's antenna.        NOTE: this class must be hand-coded to clean up some implementation details.
            </summary>
        </member>
        <member name="M:DIS1998net.SphericalHarmonicAntennaPattern.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.SphericalHarmonicAntennaPattern.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.SphericalHarmonicAntennaPattern.equals(DIS1998net.SphericalHarmonicAntennaPattern)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.SignalPdu">
             Section 5.3.8.2. Detailed information about a radio transmitter. This PDU requires        manually written code to complete. The encodingScheme field can be used in multiple        ways, which requires hand-written code to finish. UNFINISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.SignalPdu._encodingScheme">
            encoding scheme used, and enumeration 
        </member>
        <member name="F:DIS1998net.SignalPdu._tdlType">
            tdl type 
        </member>
        <member name="F:DIS1998net.SignalPdu._sampleRate">
            sample rate 
        </member>
        <member name="F:DIS1998net.SignalPdu._dataLength">
            length od data 
        </member>
        <member name="F:DIS1998net.SignalPdu._samples">
            number of samples 
        </member>
        <member name="F:DIS1998net.SignalPdu._data">
            list of eight bit values 
        </member>
        <member name="M:DIS1998net.SignalPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.8.2. Detailed information about a radio transmitter. This PDU requires        manually written code to complete. The encodingScheme field can be used in multiple        ways, which requires hand-written code to finish. UNFINISHED
            </summary>
        </member>
        <member name="M:DIS1998net.SignalPdu.setEncodingScheme(System.UInt16)">
            <summary>
            encoding scheme used, and enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.SignalPdu.setTdlType(System.UInt16)">
            <summary>
            tdl type
            </summary>
        </member>
        <member name="M:DIS1998net.SignalPdu.setSampleRate(System.UInt32)">
            <summary>
            sample rate
            </summary>
        </member>
        <member name="M:DIS1998net.SignalPdu.setDataLength(System.Int16)">
            <summary>
            This value must be set to the number of bits that will be used from the Data field.  Normally this value would be in increments of 8.  If this is the case then multiply the number of bytes used in the Data field by 8 and store that number here.
            </summary>
        </member>
        <member name="M:DIS1998net.SignalPdu.setSamples(System.Int16)">
            <summary>
            number of samples
            </summary>
        </member>
        <member name="M:DIS1998net.SignalPdu.setData(System.Byte[])">
            <summary>
            list of eight bit values
            </summary>
        </member>
        <member name="M:DIS1998net.SignalPdu.getData">
            <summary>
            list of eight bit values
            </summary>
        </member>
        <member name="M:DIS1998net.SignalPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.SignalPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.SignalPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.SignalPdu.equals(DIS1998net.SignalPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.SignalPdu.DataLength">
            <summary>
            This value must be set to the number of bits that will be used from the Data field.  Normally this value would be in increments of 8.  If this is the case then multiply the number of bytes used in the Data field by 8 and store that number here.
            </summary>
        </member>
        <member name="P:DIS1998net.SignalPdu.Data">
            <summary>
            list of eight bit values
            </summary>
        </member>
        <member name="T:DIS1998net.ResupplyOfferPdu">
             Section 5.3.5.2. Information about a request for supplies. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ResupplyOfferPdu._receivingEntityID">
            Entity that is receiving service 
        </member>
        <member name="F:DIS1998net.ResupplyOfferPdu._supplyingEntityID">
            Entity that is supplying 
        </member>
        <member name="F:DIS1998net.ResupplyOfferPdu._numberOfSupplyTypes">
            how many supplies are being offered 
        </member>
        <member name="F:DIS1998net.ResupplyOfferPdu._padding1">
            padding 
        </member>
        <member name="F:DIS1998net.ResupplyOfferPdu._padding2">
            padding 
        </member>
        <member name="M:DIS1998net.ResupplyOfferPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.5.2. Information about a request for supplies. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyOfferPdu.setReceivingEntityID(DIS1998net.EntityID)">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyOfferPdu.getReceivingEntityID">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyOfferPdu.setSupplyingEntityID(DIS1998net.EntityID)">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyOfferPdu.getSupplyingEntityID">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyOfferPdu.setNumberOfSupplyTypes(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSupplyTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyOfferPdu.setPadding1(System.Int16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyOfferPdu.setPadding2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyOfferPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyOfferPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyOfferPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyOfferPdu.equals(DIS1998net.ResupplyOfferPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.ResupplyOfferPdu.ReceivingEntityID">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="P:DIS1998net.ResupplyOfferPdu.SupplyingEntityID">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="P:DIS1998net.ResupplyOfferPdu.NumberOfSupplyTypes">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSupplyTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="T:DIS1998net.IntercomSignalPdu">
             Section 5.3.8.4. Actual transmission of intercome voice data. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.IntercomSignalPdu._entityID">
            entity ID 
        </member>
        <member name="F:DIS1998net.IntercomSignalPdu._communicationsDeviceID">
            ID of communications device 
        </member>
        <member name="F:DIS1998net.IntercomSignalPdu._encodingScheme">
            encoding scheme 
        </member>
        <member name="F:DIS1998net.IntercomSignalPdu._tdlType">
            tactical data link type 
        </member>
        <member name="F:DIS1998net.IntercomSignalPdu._sampleRate">
            sample rate 
        </member>
        <member name="F:DIS1998net.IntercomSignalPdu._dataLength">
            data length 
        </member>
        <member name="F:DIS1998net.IntercomSignalPdu._samples">
            samples 
        </member>
        <member name="F:DIS1998net.IntercomSignalPdu._data">
            data bytes 
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.8.4. Actual transmission of intercome voice data. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.setEntityID(DIS1998net.EntityID)">
            <summary>
            entity ID
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.getEntityID">
            <summary>
            entity ID
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.setCommunicationsDeviceID(System.UInt16)">
            <summary>
            ID of communications device
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.setEncodingScheme(System.UInt16)">
            <summary>
            encoding scheme
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.setTdlType(System.UInt16)">
            <summary>
            tactical data link type
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.setSampleRate(System.UInt32)">
            <summary>
            sample rate
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.setDataLength(System.UInt16)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getdataLength method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.setSamples(System.UInt16)">
            <summary>
            samples
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.setData(System.Byte[])">
            <summary>
            data bytes
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.getData">
            <summary>
            data bytes
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.IntercomSignalPdu.equals(DIS1998net.IntercomSignalPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.IntercomSignalPdu.EntityID">
            <summary>
            entity ID
            </summary>
        </member>
        <member name="P:DIS1998net.IntercomSignalPdu.DataLength">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getdataLength method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.IntercomSignalPdu.Data">
            <summary>
            data bytes
            </summary>
        </member>
        <member name="T:DIS1998net.EntityType">
             Section 5.2.16. Identifies the type of entity, including kind of entity, domain (surface, subsurface, air, etc) country, category, etc.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.EntityType._entityKind">
            Kind of entity 
        </member>
        <member name="F:DIS1998net.EntityType._domain">
            Domain of entity (air, surface, subsurface, space, etc) 
        </member>
        <member name="F:DIS1998net.EntityType._country">
            country to which the design of the entity is attributed 
        </member>
        <member name="F:DIS1998net.EntityType._category">
            category of entity 
        </member>
        <member name="F:DIS1998net.EntityType._subcategory">
            subcategory of entity 
        </member>
        <member name="F:DIS1998net.EntityType._specific">
            specific info based on subcategory field 
        </member>
        <member name="M:DIS1998net.EntityType.#ctor">
            Constructor 
            <summary>
            Section 5.2.16. Identifies the type of entity, including kind of entity, domain (surface, subsurface, air, etc) country, category, etc.
            </summary>
        </member>
        <member name="M:DIS1998net.EntityType.setEntityKind(System.Byte)">
            <summary>
            Kind of entity
            </summary>
        </member>
        <member name="M:DIS1998net.EntityType.setDomain(System.Byte)">
            <summary>
            Domain of entity (air, surface, subsurface, space, etc)
            </summary>
        </member>
        <member name="M:DIS1998net.EntityType.setCountry(System.UInt16)">
            <summary>
            country to which the design of the entity is attributed
            </summary>
        </member>
        <member name="M:DIS1998net.EntityType.setCategory(System.Byte)">
            <summary>
            category of entity
            </summary>
        </member>
        <member name="M:DIS1998net.EntityType.setSubcategory(System.Byte)">
            <summary>
            subcategory of entity
            </summary>
        </member>
        <member name="M:DIS1998net.EntityType.setSpecific(System.Byte)">
            <summary>
            specific info based on subcategory field
            </summary>
        </member>
        <member name="M:DIS1998net.EntityType.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.EntityType.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.EntityType.equals(DIS1998net.EntityType)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.ElectronicEmissionsPdu">
             Section 5.3.7.1. Information about active electronic warfare (EW) emissions and active EW countermeasures shall be communicated using an Electromagnetic Emission PDU. COMPLETE (I think)
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="T:DIS1998net.DistributedEmissionsFamilyPdu">
             Section 5.3.7. Electronic Emissions. Abstract superclass for distirubted emissions PDU
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="M:DIS1998net.DistributedEmissionsFamilyPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.7. Electronic Emissions. Abstract superclass for distirubted emissions PDU
            </summary>
        </member>
        <member name="M:DIS1998net.DistributedEmissionsFamilyPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.DistributedEmissionsFamilyPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.DistributedEmissionsFamilyPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.DistributedEmissionsFamilyPdu.equals(DIS1998net.DistributedEmissionsFamilyPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="F:DIS1998net.ElectronicEmissionsPdu._emittingEntityID">
            ID of the entity emitting 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionsPdu._eventID">
            ID of event 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionsPdu._stateUpdateIndicator">
            This field shall be used to indicate if the data in the PDU represents a state update or just data that has changed since issuance of the last Electromagnetic Emission PDU [relative to the identified entity and emission system(s)]. 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionsPdu._numberOfSystems">
            This field shall specify the number of emission systems being described in the current PDU. 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionsPdu._paddingForEmissionsPdu">
            padding 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionsPdu._systems">
            Electronic emmissions systems 
        </member>
        <member name="M:DIS1998net.ElectronicEmissionsPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.7.1. Information about active electronic warfare (EW) emissions and active EW countermeasures shall be communicated using an Electromagnetic Emission PDU. COMPLETE (I think)
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionsPdu.setEmittingEntityID(DIS1998net.EntityID)">
            <summary>
            ID of the entity emitting
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionsPdu.getEmittingEntityID">
            <summary>
            ID of the entity emitting
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionsPdu.setEventID(DIS1998net.EventID)">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionsPdu.getEventID">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionsPdu.setStateUpdateIndicator(System.Byte)">
            <summary>
            This field shall be used to indicate if the data in the PDU represents a state update or just data that has changed since issuance of the last Electromagnetic Emission PDU [relative to the identified entity and emission system(s)].
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionsPdu.setNumberOfSystems(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSystems method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionsPdu.setPaddingForEmissionsPdu(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionsPdu.setSystems(System.Collections.Generic.List{DIS1998net.ElectronicEmissionSystemData})">
            <summary>
            Electronic emmissions systems
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionsPdu.getSystems">
            <summary>
            Electronic emmissions systems
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionsPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionsPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionsPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionsPdu.equals(DIS1998net.ElectronicEmissionsPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.ElectronicEmissionsPdu.EmittingEntityID">
            <summary>
            ID of the entity emitting
            </summary>
        </member>
        <member name="P:DIS1998net.ElectronicEmissionsPdu.EventID">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="P:DIS1998net.ElectronicEmissionsPdu.NumberOfSystems">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSystems method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.ElectronicEmissionsPdu.Systems">
            <summary>
            Electronic emmissions systems
            </summary>
        </member>
        <member name="T:DIS1998net.DeadReckoningParameter">
             represents values used in dead reckoning algorithms
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.DeadReckoningParameter._deadReckoningAlgorithm">
            enumeration of what dead reckoning algorighm to use 
        </member>
        <member name="F:DIS1998net.DeadReckoningParameter._otherParameters">
            other parameters to use in the dead reckoning algorithm 
        </member>
        <member name="F:DIS1998net.DeadReckoningParameter._entityLinearAcceleration">
            Linear acceleration of the entity 
        </member>
        <member name="F:DIS1998net.DeadReckoningParameter._entityAngularVelocity">
            angular velocity of the entity 
        </member>
        <member name="M:DIS1998net.DeadReckoningParameter.#ctor">
            Constructor 
            <summary>
            represents values used in dead reckoning algorithms
            </summary>
        </member>
        <member name="M:DIS1998net.DeadReckoningParameter.setDeadReckoningAlgorithm(System.Byte)">
            <summary>
            enumeration of what dead reckoning algorighm to use
            </summary>
        </member>
        <member name="M:DIS1998net.DeadReckoningParameter.setOtherParameters(System.Byte[])">
            <summary>
            other parameters to use in the dead reckoning algorithm
            </summary>
        </member>
        <member name="M:DIS1998net.DeadReckoningParameter.getOtherParameters">
            <summary>
            other parameters to use in the dead reckoning algorithm
            </summary>
        </member>
        <member name="M:DIS1998net.DeadReckoningParameter.setEntityLinearAcceleration(DIS1998net.Vector3Float)">
            <summary>
            Linear acceleration of the entity
            </summary>
        </member>
        <member name="M:DIS1998net.DeadReckoningParameter.getEntityLinearAcceleration">
            <summary>
            Linear acceleration of the entity
            </summary>
        </member>
        <member name="M:DIS1998net.DeadReckoningParameter.setEntityAngularVelocity(DIS1998net.Vector3Float)">
            <summary>
            angular velocity of the entity
            </summary>
        </member>
        <member name="M:DIS1998net.DeadReckoningParameter.getEntityAngularVelocity">
            <summary>
            angular velocity of the entity
            </summary>
        </member>
        <member name="M:DIS1998net.DeadReckoningParameter.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.DeadReckoningParameter.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.DeadReckoningParameter.equals(DIS1998net.DeadReckoningParameter)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.DeadReckoningParameter.OtherParameters">
            <summary>
            other parameters to use in the dead reckoning algorithm
            </summary>
        </member>
        <member name="P:DIS1998net.DeadReckoningParameter.EntityLinearAcceleration">
            <summary>
            Linear acceleration of the entity
            </summary>
        </member>
        <member name="P:DIS1998net.DeadReckoningParameter.EntityAngularVelocity">
            <summary>
            angular velocity of the entity
            </summary>
        </member>
        <member name="T:DIS1998net.AcousticEmitterSystem">
             5.3.35: Information about a particular UA emitter shall be represented using an Acoustic Emitter System record. This record shall consist of three fields: Acoustic Name, Function, and Acoustic ID Number
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.AcousticEmitterSystem._acousticName">
            This field shall specify the system for a particular UA emitter. 
        </member>
        <member name="F:DIS1998net.AcousticEmitterSystem._acousticFunction">
            This field shall describe the function of the acoustic system.  
        </member>
        <member name="F:DIS1998net.AcousticEmitterSystem._acousticID">
            This field shall specify the UA emitter identification number relative to a specific system. This field shall be represented by an 8-bit unsigned integer. This field allows the differentiation of multiple systems on an entity, even if in some instances two or more of the systems may be identical UA emitter types. Numbering of systems shall begin with the value 1.  
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystem.#ctor">
            Constructor 
            <summary>
            5.3.35: Information about a particular UA emitter shall be represented using an Acoustic Emitter System record. This record shall consist of three fields: Acoustic Name, Function, and Acoustic ID Number
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystem.setAcousticName(System.UInt16)">
            <summary>
            This field shall specify the system for a particular UA emitter.
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystem.setAcousticFunction(System.Byte)">
            <summary>
            This field shall describe the function of the acoustic system. 
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystem.setAcousticID(System.Byte)">
            <summary>
            This field shall specify the UA emitter identification number relative to a specific system. This field shall be represented by an 8-bit unsigned integer. This field allows the differentiation of multiple systems on an entity, even if in some instances two or more of the systems may be identical UA emitter types. Numbering of systems shall begin with the value 1. 
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystem.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystem.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystem.equals(DIS1998net.AcousticEmitterSystem)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.UaPdu">
             Section 5.3.7.3. Information about underwater acoustic emmissions. This requires manual cleanup.  The beam data records should ALL be a the finish, rather than attached to each emitter system. UNFINISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.UaPdu._emittingEntityID">
            ID of the entity that is the source of the emission 
        </member>
        <member name="F:DIS1998net.UaPdu._eventID">
            ID of event 
        </member>
        <member name="F:DIS1998net.UaPdu._stateChangeIndicator">
            This field shall be used to indicate whether the data in the UA PDU represent a state update or data that have changed since issuance of the last UA PDU 
        </member>
        <member name="F:DIS1998net.UaPdu._pad">
            padding 
        </member>
        <member name="F:DIS1998net.UaPdu._passiveParameterIndex">
            This field indicates which database record (or file) shall be used in the definition of passive signature (unintentional) emissions of the entity. The indicated database record (or  file) shall define all noise generated as a function of propulsion plant configurations and associated  auxiliaries. 
        </member>
        <member name="F:DIS1998net.UaPdu._propulsionPlantConfiguration">
            This field shall specify the entity propulsion plant configuration. This field is used to determine the passive signature characteristics of an entity. 
        </member>
        <member name="F:DIS1998net.UaPdu._numberOfShafts">
             This field shall represent the number of shafts on a platform 
        </member>
        <member name="F:DIS1998net.UaPdu._numberOfAPAs">
            This field shall indicate the number of APAs described in the current UA PDU 
        </member>
        <member name="F:DIS1998net.UaPdu._numberOfUAEmitterSystems">
            This field shall specify the number of UA emitter systems being described in the current UA PDU 
        </member>
        <member name="F:DIS1998net.UaPdu._shaftRPMs">
            shaft RPM values 
        </member>
        <member name="F:DIS1998net.UaPdu._apaData">
            apaData 
        </member>
        <member name="M:DIS1998net.UaPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.7.3. Information about underwater acoustic emmissions. This requires manual cleanup.  The beam data records should ALL be a the finish, rather than attached to each emitter system. UNFINISHED
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.setEmittingEntityID(DIS1998net.EntityID)">
            <summary>
            ID of the entity that is the source of the emission
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.getEmittingEntityID">
            <summary>
            ID of the entity that is the source of the emission
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.setEventID(DIS1998net.EventID)">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.getEventID">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.setStateChangeIndicator(System.Byte)">
            <summary>
            This field shall be used to indicate whether the data in the UA PDU represent a state update or data that have changed since issuance of the last UA PDU
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.setPad(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.setPassiveParameterIndex(System.UInt16)">
            <summary>
            This field indicates which database record (or file) shall be used in the definition of passive signature (unintentional) emissions of the entity. The indicated database record (or  file) shall define all noise generated as a function of propulsion plant configurations and associated  auxiliaries.
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.setPropulsionPlantConfiguration(System.Byte)">
            <summary>
            This field shall specify the entity propulsion plant configuration. This field is used to determine the passive signature characteristics of an entity.
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.setNumberOfShafts(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfShafts method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.setNumberOfAPAs(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfAPAs method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.setNumberOfUAEmitterSystems(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfUAEmitterSystems method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.setShaftRPMs(System.Collections.Generic.List{DIS1998net.ShaftRPMs})">
            <summary>
            shaft RPM values
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.getShaftRPMs">
            <summary>
            shaft RPM values
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.setApaData(System.Collections.Generic.List{DIS1998net.ApaData})">
            <summary>
            apaData
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.getApaData">
            <summary>
            apaData
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.UaPdu.equals(DIS1998net.UaPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.UaPdu.EmittingEntityID">
            <summary>
            ID of the entity that is the source of the emission
            </summary>
        </member>
        <member name="P:DIS1998net.UaPdu.EventID">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="P:DIS1998net.UaPdu.NumberOfShafts">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfShafts method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.UaPdu.NumberOfAPAs">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfAPAs method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.UaPdu.NumberOfUAEmitterSystems">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfUAEmitterSystems method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.UaPdu.ShaftRPMs">
            <summary>
            shaft RPM values
            </summary>
        </member>
        <member name="P:DIS1998net.UaPdu.ApaData">
            <summary>
            apaData
            </summary>
        </member>
        <member name="T:DIS1998net.LinearSegmentParameter">
             5.2.48: Linear segment parameters
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.LinearSegmentParameter._segmentNumber">
            number of segments 
        </member>
        <member name="F:DIS1998net.LinearSegmentParameter._segmentAppearance">
            segment appearance 
        </member>
        <member name="F:DIS1998net.LinearSegmentParameter._location">
            location 
        </member>
        <member name="F:DIS1998net.LinearSegmentParameter._orientation">
            orientation 
        </member>
        <member name="F:DIS1998net.LinearSegmentParameter._segmentLength">
            segmentLength 
        </member>
        <member name="F:DIS1998net.LinearSegmentParameter._segmentWidth">
            segmentWidth 
        </member>
        <member name="F:DIS1998net.LinearSegmentParameter._segmentHeight">
            segmentHeight 
        </member>
        <member name="F:DIS1998net.LinearSegmentParameter._segmentDepth">
            segment Depth 
        </member>
        <member name="F:DIS1998net.LinearSegmentParameter._pad1">
            segment Depth 
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.#ctor">
            Constructor 
            <summary>
            5.2.48: Linear segment parameters
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.setSegmentNumber(System.Byte)">
            <summary>
            number of segments
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.setSegmentAppearance(DIS1998net.SixByteChunk)">
            <summary>
            segment appearance
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.getSegmentAppearance">
            <summary>
            segment appearance
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.setLocation(DIS1998net.Vector3Double)">
            <summary>
            location
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.getLocation">
            <summary>
            location
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.setOrientation(DIS1998net.Orientation)">
            <summary>
            orientation
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.getOrientation">
            <summary>
            orientation
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.setSegmentLength(System.UInt16)">
            <summary>
            segmentLength
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.setSegmentWidth(System.UInt16)">
            <summary>
            segmentWidth
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.setSegmentHeight(System.UInt16)">
            <summary>
            segmentHeight
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.setSegmentDepth(System.UInt16)">
            <summary>
            segment Depth
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.setPad1(System.UInt32)">
            <summary>
            segment Depth
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.LinearSegmentParameter.equals(DIS1998net.LinearSegmentParameter)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.LinearSegmentParameter.SegmentAppearance">
            <summary>
            segment appearance
            </summary>
        </member>
        <member name="P:DIS1998net.LinearSegmentParameter.Location">
            <summary>
            location
            </summary>
        </member>
        <member name="P:DIS1998net.LinearSegmentParameter.Orientation">
            <summary>
            orientation
            </summary>
        </member>
        <member name="T:DIS1998net.CommentPdu">
             Section 5.3.6.12. Arbitrary messages can be entered into the data stream via use of this PDU. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.CommentPdu._numberOfFixedDatumRecords">
            Number of fixed datum records 
        </member>
        <member name="F:DIS1998net.CommentPdu._numberOfVariableDatumRecords">
            Number of variable datum records 
        </member>
        <member name="F:DIS1998net.CommentPdu._fixedDatums">
            variable length list of fixed datums 
        </member>
        <member name="F:DIS1998net.CommentPdu._variableDatums">
            variable length list of variable length datums 
        </member>
        <member name="M:DIS1998net.CommentPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.6.12. Arbitrary messages can be entered into the data stream via use of this PDU. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.CommentPdu.setNumberOfFixedDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.CommentPdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.CommentPdu.setFixedDatums(System.Collections.Generic.List{DIS1998net.FixedDatum})">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="M:DIS1998net.CommentPdu.getFixedDatums">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="M:DIS1998net.CommentPdu.setVariableDatums(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="M:DIS1998net.CommentPdu.getVariableDatums">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="M:DIS1998net.CommentPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.CommentPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.CommentPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.CommentPdu.equals(DIS1998net.CommentPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.CommentPdu.NumberOfFixedDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.CommentPdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.CommentPdu.FixedDatums">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="P:DIS1998net.CommentPdu.VariableDatums">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="T:DIS1998net.ArealObjectStatePdu">
             Section 5.3.11.5: Information about the addition/modification of an oobject that is geometrically      achored to the terrain with a set of three or more points that come to a closure. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="T:DIS1998net.SyntheticEnvironmentFamilyPdu">
             Section 5.3.11: Abstract superclass for synthetic environment PDUs
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="M:DIS1998net.SyntheticEnvironmentFamilyPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.11: Abstract superclass for synthetic environment PDUs
            </summary>
        </member>
        <member name="M:DIS1998net.SyntheticEnvironmentFamilyPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.SyntheticEnvironmentFamilyPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.SyntheticEnvironmentFamilyPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.SyntheticEnvironmentFamilyPdu.equals(DIS1998net.SyntheticEnvironmentFamilyPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="F:DIS1998net.ArealObjectStatePdu._objectID">
            Object in synthetic environment 
        </member>
        <member name="F:DIS1998net.ArealObjectStatePdu._referencedObjectID">
            Object with which this point object is associated 
        </member>
        <member name="F:DIS1998net.ArealObjectStatePdu._updateNumber">
            unique update number of each state transition of an object 
        </member>
        <member name="F:DIS1998net.ArealObjectStatePdu._forceID">
            force ID 
        </member>
        <member name="F:DIS1998net.ArealObjectStatePdu._modifications">
            modifications enumeration 
        </member>
        <member name="F:DIS1998net.ArealObjectStatePdu._objectType">
            Object type 
        </member>
        <member name="F:DIS1998net.ArealObjectStatePdu._objectAppearance">
            Object appearance 
        </member>
        <member name="F:DIS1998net.ArealObjectStatePdu._numberOfPoints">
            Number of points 
        </member>
        <member name="F:DIS1998net.ArealObjectStatePdu._requesterID">
            requesterID 
        </member>
        <member name="F:DIS1998net.ArealObjectStatePdu._receivingID">
            receiver ID 
        </member>
        <member name="F:DIS1998net.ArealObjectStatePdu._objectLocation">
            location of object 
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.11.5: Information about the addition/modification of an oobject that is geometrically      achored to the terrain with a set of three or more points that come to a closure. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.setObjectID(DIS1998net.EntityID)">
            <summary>
            Object in synthetic environment
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.getObjectID">
            <summary>
            Object in synthetic environment
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.setReferencedObjectID(DIS1998net.EntityID)">
            <summary>
            Object with which this point object is associated
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.getReferencedObjectID">
            <summary>
            Object with which this point object is associated
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.setUpdateNumber(System.UInt16)">
            <summary>
            unique update number of each state transition of an object
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.setForceID(System.Byte)">
            <summary>
            force ID
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.setModifications(System.Byte)">
            <summary>
            modifications enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.setObjectType(DIS1998net.EntityType)">
            <summary>
            Object type
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.getObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.setObjectAppearance(DIS1998net.SixByteChunk)">
            <summary>
            Object appearance
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.getObjectAppearance">
            <summary>
            Object appearance
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.setNumberOfPoints(System.UInt16)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfPoints method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.setRequesterID(DIS1998net.SimulationAddress)">
            <summary>
            requesterID
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.getRequesterID">
            <summary>
            requesterID
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.setReceivingID(DIS1998net.SimulationAddress)">
            <summary>
            receiver ID
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.getReceivingID">
            <summary>
            receiver ID
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.setObjectLocation(System.Collections.Generic.List{DIS1998net.Vector3Double})">
            <summary>
            location of object
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.getObjectLocation">
            <summary>
            location of object
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ArealObjectStatePdu.equals(DIS1998net.ArealObjectStatePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.ArealObjectStatePdu.ObjectID">
            <summary>
            Object in synthetic environment
            </summary>
        </member>
        <member name="P:DIS1998net.ArealObjectStatePdu.ReferencedObjectID">
            <summary>
            Object with which this point object is associated
            </summary>
        </member>
        <member name="P:DIS1998net.ArealObjectStatePdu.ObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="P:DIS1998net.ArealObjectStatePdu.ObjectAppearance">
            <summary>
            Object appearance
            </summary>
        </member>
        <member name="P:DIS1998net.ArealObjectStatePdu.NumberOfPoints">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfPoints method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.ArealObjectStatePdu.RequesterID">
            <summary>
            requesterID
            </summary>
        </member>
        <member name="P:DIS1998net.ArealObjectStatePdu.ReceivingID">
            <summary>
            receiver ID
            </summary>
        </member>
        <member name="P:DIS1998net.ArealObjectStatePdu.ObjectLocation">
            <summary>
            location of object
            </summary>
        </member>
        <member name="T:DIS1998net.ActionRequestPdu">
             Section 5.3.6.6. Request from simulation manager to an entity. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ActionRequestPdu._requestID">
            Request ID that is unique 
        </member>
        <member name="F:DIS1998net.ActionRequestPdu._actionID">
            identifies the action being requested 
        </member>
        <member name="F:DIS1998net.ActionRequestPdu._numberOfFixedDatumRecords">
            Number of fixed datum records 
        </member>
        <member name="F:DIS1998net.ActionRequestPdu._numberOfVariableDatumRecords">
            Number of variable datum records 
        </member>
        <member name="F:DIS1998net.ActionRequestPdu._fixedDatums">
            variable length list of fixed datums 
        </member>
        <member name="F:DIS1998net.ActionRequestPdu._variableDatums">
            variable length list of variable length datums 
        </member>
        <member name="M:DIS1998net.ActionRequestPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.6.6. Request from simulation manager to an entity. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestPdu.setRequestID(System.UInt32)">
            <summary>
            Request ID that is unique
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestPdu.setActionID(System.UInt32)">
            <summary>
            identifies the action being requested
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestPdu.setNumberOfFixedDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestPdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestPdu.setFixedDatums(System.Collections.Generic.List{DIS1998net.FixedDatum})">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestPdu.getFixedDatums">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestPdu.setVariableDatums(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestPdu.getVariableDatums">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestPdu.equals(DIS1998net.ActionRequestPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.ActionRequestPdu.NumberOfFixedDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.ActionRequestPdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.ActionRequestPdu.FixedDatums">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="P:DIS1998net.ActionRequestPdu.VariableDatums">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="T:DIS1998net.RepairCompletePdu">
             Section 5.2.5.5. Repair is complete. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.RepairCompletePdu._receivingEntityID">
            Entity that is receiving service 
        </member>
        <member name="F:DIS1998net.RepairCompletePdu._repairingEntityID">
            Entity that is supplying 
        </member>
        <member name="F:DIS1998net.RepairCompletePdu._repair">
            Enumeration for type of repair 
        </member>
        <member name="F:DIS1998net.RepairCompletePdu._padding2">
            padding, number prevents conflict with superclass ivar name 
        </member>
        <member name="M:DIS1998net.RepairCompletePdu.#ctor">
            Constructor 
            <summary>
            Section 5.2.5.5. Repair is complete. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.RepairCompletePdu.setReceivingEntityID(DIS1998net.EntityID)">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="M:DIS1998net.RepairCompletePdu.getReceivingEntityID">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="M:DIS1998net.RepairCompletePdu.setRepairingEntityID(DIS1998net.EntityID)">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="M:DIS1998net.RepairCompletePdu.getRepairingEntityID">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="M:DIS1998net.RepairCompletePdu.setRepair(System.UInt16)">
            <summary>
            Enumeration for type of repair
            </summary>
        </member>
        <member name="M:DIS1998net.RepairCompletePdu.setPadding2(System.Int16)">
            <summary>
            padding, number prevents conflict with superclass ivar name
            </summary>
        </member>
        <member name="M:DIS1998net.RepairCompletePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.RepairCompletePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.RepairCompletePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.RepairCompletePdu.equals(DIS1998net.RepairCompletePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.RepairCompletePdu.ReceivingEntityID">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="P:DIS1998net.RepairCompletePdu.RepairingEntityID">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="T:DIS1998net.GridAxisRecordRepresentation2">
             5.2.44: Grid data record, representation 1
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="T:DIS1998net.GridAxisRecord">
             5.2.44: Grid data record, a common abstract superclass for several subtypes 
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.GridAxisRecord._sampleType">
            type of environmental sample 
        </member>
        <member name="F:DIS1998net.GridAxisRecord._dataRepresentation">
            value that describes data representation 
        </member>
        <member name="M:DIS1998net.GridAxisRecord.#ctor">
            Constructor 
            <summary>
            5.2.44: Grid data record, a common abstract superclass for several subtypes 
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecord.setSampleType(System.UInt16)">
            <summary>
            type of environmental sample
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecord.setDataRepresentation(System.UInt16)">
            <summary>
            value that describes data representation
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecord.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecord.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecord.equals(DIS1998net.GridAxisRecord)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="F:DIS1998net.GridAxisRecordRepresentation2._numberOfValues">
            number of values 
        </member>
        <member name="F:DIS1998net.GridAxisRecordRepresentation2._dataValues">
            variable length list of data parameters ^^^this is wrong--need padding as well 
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation2.#ctor">
            Constructor 
            <summary>
            5.2.44: Grid data record, representation 1
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation2.setNumberOfValues(System.UInt16)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfValues method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation2.setDataValues(System.Collections.Generic.List{DIS1998net.FourByteChunk})">
            <summary>
            variable length list of data parameters ^^^this is wrong--need padding as well
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation2.getDataValues">
            <summary>
            variable length list of data parameters ^^^this is wrong--need padding as well
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation2.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation2.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation2.equals(DIS1998net.GridAxisRecordRepresentation2)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.GridAxisRecordRepresentation2.NumberOfValues">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfValues method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.GridAxisRecordRepresentation2.DataValues">
            <summary>
            variable length list of data parameters ^^^this is wrong--need padding as well
            </summary>
        </member>
        <member name="T:DIS1998net.ElectronicEmissionSystemData">
             Data about one electronic system
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ElectronicEmissionSystemData._systemDataLength">
            This field shall specify the length of this emitter system?s data (including beam data and its track/jam information) in 32-bit words. The length shall include the System Data Length field.  
        </member>
        <member name="F:DIS1998net.ElectronicEmissionSystemData._numberOfBeams">
            This field shall specify the number of beams being described in the current PDU for the system being described.  
        </member>
        <member name="F:DIS1998net.ElectronicEmissionSystemData._emissionsPadding2">
            padding. 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionSystemData._emitterSystem">
            This field shall specify information about a particular emitter system 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionSystemData._location">
            Location with respect to the entity 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionSystemData._beamDataRecords">
            variable length list of beam data records 
        </member>
        <member name="M:DIS1998net.ElectronicEmissionSystemData.#ctor">
            Constructor 
            <summary>
            Data about one electronic system
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionSystemData.setSystemDataLength(System.Byte)">
            <summary>
            This field shall specify the length of this emitter system?s data (including beam data and its track/jam information) in 32-bit words. The length shall include the System Data Length field. 
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionSystemData.setNumberOfBeams(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfBeams method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionSystemData.setEmissionsPadding2(System.UInt16)">
            <summary>
            padding.
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionSystemData.setEmitterSystem(DIS1998net.EmitterSystem)">
            <summary>
            This field shall specify information about a particular emitter system
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionSystemData.getEmitterSystem">
            <summary>
            This field shall specify information about a particular emitter system
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionSystemData.setLocation(DIS1998net.Vector3Float)">
            <summary>
            Location with respect to the entity
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionSystemData.getLocation">
            <summary>
            Location with respect to the entity
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionSystemData.setBeamDataRecords(System.Collections.Generic.List{DIS1998net.ElectronicEmissionBeamData})">
            <summary>
            variable length list of beam data records
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionSystemData.getBeamDataRecords">
            <summary>
            variable length list of beam data records
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionSystemData.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionSystemData.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionSystemData.equals(DIS1998net.ElectronicEmissionSystemData)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.ElectronicEmissionSystemData.NumberOfBeams">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfBeams method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.ElectronicEmissionSystemData.EmitterSystem">
            <summary>
            This field shall specify information about a particular emitter system
            </summary>
        </member>
        <member name="P:DIS1998net.ElectronicEmissionSystemData.Location">
            <summary>
            Location with respect to the entity
            </summary>
        </member>
        <member name="P:DIS1998net.ElectronicEmissionSystemData.BeamDataRecords">
            <summary>
            variable length list of beam data records
            </summary>
        </member>
        <member name="T:DIS1998net.DataQueryPdu">
             Section 5.3.6.8. Request for data from an entity. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.DataQueryPdu._requestID">
            ID of request 
        </member>
        <member name="F:DIS1998net.DataQueryPdu._timeInterval">
            time issues between issues of Data PDUs. Zero means send once only. 
        </member>
        <member name="F:DIS1998net.DataQueryPdu._numberOfFixedDatumRecords">
            Number of fixed datum records 
        </member>
        <member name="F:DIS1998net.DataQueryPdu._numberOfVariableDatumRecords">
            Number of variable datum records 
        </member>
        <member name="F:DIS1998net.DataQueryPdu._fixedDatums">
            variable length list of fixed datums 
        </member>
        <member name="F:DIS1998net.DataQueryPdu._variableDatums">
            variable length list of variable length datums 
        </member>
        <member name="M:DIS1998net.DataQueryPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.6.8. Request for data from an entity. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryPdu.setRequestID(System.UInt32)">
            <summary>
            ID of request
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryPdu.setTimeInterval(System.UInt32)">
            <summary>
            time issues between issues of Data PDUs. Zero means send once only.
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryPdu.setNumberOfFixedDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryPdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryPdu.setFixedDatums(System.Collections.Generic.List{DIS1998net.FixedDatum})">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryPdu.getFixedDatums">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryPdu.setVariableDatums(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryPdu.getVariableDatums">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryPdu.equals(DIS1998net.DataQueryPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.DataQueryPdu.NumberOfFixedDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.DataQueryPdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.DataQueryPdu.FixedDatums">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="P:DIS1998net.DataQueryPdu.VariableDatums">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="T:DIS1998net.CommentReliablePdu">
             Section 5.3.12.12: Arbitrary messages. Only reliable this time. Neds manual intervention     to fix padding in variable datums. UNFINISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.CommentReliablePdu._numberOfFixedDatumRecords">
            Fixed datum record count 
        </member>
        <member name="F:DIS1998net.CommentReliablePdu._numberOfVariableDatumRecords">
            variable datum record count 
        </member>
        <member name="F:DIS1998net.CommentReliablePdu._fixedDatumRecords">
            Fixed datum records 
        </member>
        <member name="F:DIS1998net.CommentReliablePdu._variableDatumRecords">
            Variable datum records 
        </member>
        <member name="M:DIS1998net.CommentReliablePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12.12: Arbitrary messages. Only reliable this time. Neds manual intervention     to fix padding in variable datums. UNFINISHED
            </summary>
        </member>
        <member name="M:DIS1998net.CommentReliablePdu.setNumberOfFixedDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.CommentReliablePdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.CommentReliablePdu.setFixedDatumRecords(System.Collections.Generic.List{DIS1998net.FixedDatum})">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="M:DIS1998net.CommentReliablePdu.getFixedDatumRecords">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="M:DIS1998net.CommentReliablePdu.setVariableDatumRecords(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="M:DIS1998net.CommentReliablePdu.getVariableDatumRecords">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="M:DIS1998net.CommentReliablePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.CommentReliablePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.CommentReliablePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.CommentReliablePdu.equals(DIS1998net.CommentReliablePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.CommentReliablePdu.NumberOfFixedDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.CommentReliablePdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.CommentReliablePdu.FixedDatumRecords">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="P:DIS1998net.CommentReliablePdu.VariableDatumRecords">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="T:DIS1998net.BeamAntennaPattern">
             Section 5.2.4.2. Used when the antenna pattern type field has a value of 1. Specifies           the direction, patter, and polarization of radiation from an antenna.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.BeamAntennaPattern._beamDirection">
            The rotation that transformst he reference coordinate sytem     into the beam coordinate system. Either world coordinates or entity coordinates may be used as the     reference coordinate system, as specified by teh reference system field of the antenna pattern record. 
        </member>
        <member name="F:DIS1998net.BeamAntennaPattern._ez">
            Magnigute of the z-component in beam coordinates at some arbitrary      single point in the mainbeam      and in the far field of the antenna. 
        </member>
        <member name="F:DIS1998net.BeamAntennaPattern._ex">
            Magnigute of the x-component in beam coordinates at some arbitrary      single point in the mainbeam      and in the far field of the antenna. 
        </member>
        <member name="F:DIS1998net.BeamAntennaPattern._phase">
            THe phase angle between Ez and Ex in radians. 
        </member>
        <member name="M:DIS1998net.BeamAntennaPattern.#ctor">
            Constructor 
            <summary>
            Section 5.2.4.2. Used when the antenna pattern type field has a value of 1. Specifies           the direction, patter, and polarization of radiation from an antenna.
            </summary>
        </member>
        <member name="M:DIS1998net.BeamAntennaPattern.setBeamDirection(DIS1998net.Orientation)">
            <summary>
            The rotation that transformst he reference coordinate sytem     into the beam coordinate system. Either world coordinates or entity coordinates may be used as the     reference coordinate system, as specified by teh reference system field of the antenna pattern record.
            </summary>
        </member>
        <member name="M:DIS1998net.BeamAntennaPattern.getBeamDirection">
            <summary>
            The rotation that transformst he reference coordinate sytem     into the beam coordinate system. Either world coordinates or entity coordinates may be used as the     reference coordinate system, as specified by teh reference system field of the antenna pattern record.
            </summary>
        </member>
        <member name="M:DIS1998net.BeamAntennaPattern.setEz(System.Single)">
            <summary>
            Magnigute of the z-component in beam coordinates at some arbitrary      single point in the mainbeam      and in the far field of the antenna.
            </summary>
        </member>
        <member name="M:DIS1998net.BeamAntennaPattern.setEx(System.Single)">
            <summary>
            Magnigute of the x-component in beam coordinates at some arbitrary      single point in the mainbeam      and in the far field of the antenna.
            </summary>
        </member>
        <member name="M:DIS1998net.BeamAntennaPattern.setPhase(System.Single)">
            <summary>
            THe phase angle between Ez and Ex in radians.
            </summary>
        </member>
        <member name="M:DIS1998net.BeamAntennaPattern.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.BeamAntennaPattern.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.BeamAntennaPattern.equals(DIS1998net.BeamAntennaPattern)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.BeamAntennaPattern.BeamDirection">
            <summary>
            The rotation that transformst he reference coordinate sytem     into the beam coordinate system. Either world coordinates or entity coordinates may be used as the     reference coordinate system, as specified by teh reference system field of the antenna pattern record.
            </summary>
        </member>
        <member name="T:DIS1998net.AggregateID">
             Section 5.2.36. Each agregate in a given simulation app is given an aggregate identifier number unique for all other aggregates in that app and in that exercise. The id is valid for the duration of the the exercise.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.AggregateID._site">
            The site ID 
        </member>
        <member name="F:DIS1998net.AggregateID._application">
            The application ID 
        </member>
        <member name="F:DIS1998net.AggregateID._aggregateID">
            the aggregate ID 
        </member>
        <member name="M:DIS1998net.AggregateID.#ctor">
            Constructor 
            <summary>
            Section 5.2.36. Each agregate in a given simulation app is given an aggregate identifier number unique for all other aggregates in that app and in that exercise. The id is valid for the duration of the the exercise.
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateID.setSite(System.UInt16)">
            <summary>
            The site ID
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateID.setApplication(System.UInt16)">
            <summary>
            The application ID
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateID.setAggregateID(System.UInt16)">
            <summary>
            the aggregate ID
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateID.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateID.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateID.equals(DIS1998net.AggregateID)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.TrackJamTarget">
             One track/jam target
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.TrackJamTarget._trackJam">
            track/jam target 
        </member>
        <member name="F:DIS1998net.TrackJamTarget._emitterID">
            Emitter ID 
        </member>
        <member name="F:DIS1998net.TrackJamTarget._beamID">
            beam ID 
        </member>
        <member name="M:DIS1998net.TrackJamTarget.#ctor">
            Constructor 
            <summary>
            One track/jam target
            </summary>
        </member>
        <member name="M:DIS1998net.TrackJamTarget.setTrackJam(DIS1998net.EntityID)">
            <summary>
            track/jam target
            </summary>
        </member>
        <member name="M:DIS1998net.TrackJamTarget.getTrackJam">
            <summary>
            track/jam target
            </summary>
        </member>
        <member name="M:DIS1998net.TrackJamTarget.setEmitterID(System.Byte)">
            <summary>
            Emitter ID
            </summary>
        </member>
        <member name="M:DIS1998net.TrackJamTarget.setBeamID(System.Byte)">
            <summary>
            beam ID
            </summary>
        </member>
        <member name="M:DIS1998net.TrackJamTarget.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.TrackJamTarget.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.TrackJamTarget.equals(DIS1998net.TrackJamTarget)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.TrackJamTarget.TrackJam">
            <summary>
            track/jam target
            </summary>
        </member>
        <member name="T:DIS1998net.RadioEntityType">
             Section 5.2.25. Identifies the type of radio
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.RadioEntityType._entityKind">
            Kind of entity 
        </member>
        <member name="F:DIS1998net.RadioEntityType._domain">
            Domain of entity (air, surface, subsurface, space, etc) 
        </member>
        <member name="F:DIS1998net.RadioEntityType._country">
            country to which the design of the entity is attributed 
        </member>
        <member name="F:DIS1998net.RadioEntityType._category">
            category of entity 
        </member>
        <member name="F:DIS1998net.RadioEntityType._nomenclatureVersion">
            specific info based on subcategory field 
        </member>
        <member name="M:DIS1998net.RadioEntityType.#ctor">
            Constructor 
            <summary>
            Section 5.2.25. Identifies the type of radio
            </summary>
        </member>
        <member name="M:DIS1998net.RadioEntityType.setEntityKind(System.Byte)">
            <summary>
            Kind of entity
            </summary>
        </member>
        <member name="M:DIS1998net.RadioEntityType.setDomain(System.Byte)">
            <summary>
            Domain of entity (air, surface, subsurface, space, etc)
            </summary>
        </member>
        <member name="M:DIS1998net.RadioEntityType.setCountry(System.UInt16)">
            <summary>
            country to which the design of the entity is attributed
            </summary>
        </member>
        <member name="M:DIS1998net.RadioEntityType.setCategory(System.Byte)">
            <summary>
            category of entity
            </summary>
        </member>
        <member name="M:DIS1998net.RadioEntityType.setNomenclatureVersion(System.Byte)">
            <summary>
            specific info based on subcategory field
            </summary>
        </member>
        <member name="M:DIS1998net.RadioEntityType.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.RadioEntityType.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.RadioEntityType.equals(DIS1998net.RadioEntityType)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.PduContainer">
             Used for XML compatability. A container that holds PDUs
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.PduContainer._numberOfPdus">
            Number of PDUs in the container list 
        </member>
        <member name="F:DIS1998net.PduContainer._pdus">
            record sets 
        </member>
        <member name="M:DIS1998net.PduContainer.#ctor">
            Constructor 
            <summary>
            Used for XML compatability. A container that holds PDUs
            </summary>
        </member>
        <member name="M:DIS1998net.PduContainer.setNumberOfPdus(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfPdus method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.PduContainer.setPdus(System.Collections.Generic.List{DIS1998net.Pdu})">
            <summary>
            record sets
            </summary>
        </member>
        <member name="M:DIS1998net.PduContainer.getPdus">
            <summary>
            record sets
            </summary>
        </member>
        <member name="M:DIS1998net.PduContainer.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.PduContainer.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.PduContainer.equals(DIS1998net.PduContainer)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.PduContainer.NumberOfPdus">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfPdus method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.PduContainer.Pdus">
            <summary>
            record sets
            </summary>
        </member>
        <member name="T:DIS1998net.MinefieldResponseNackPdu">
             Section 5.3.10.4 proivde the means to request a retransmit of a minefield data pdu. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.MinefieldResponseNackPdu._minefieldID">
            Minefield ID 
        </member>
        <member name="F:DIS1998net.MinefieldResponseNackPdu._requestingEntityID">
            entity ID making the request 
        </member>
        <member name="F:DIS1998net.MinefieldResponseNackPdu._requestID">
            request ID 
        </member>
        <member name="F:DIS1998net.MinefieldResponseNackPdu._numberOfMissingPdus">
            how many pdus were missing 
        </member>
        <member name="F:DIS1998net.MinefieldResponseNackPdu._missingPduSequenceNumbers">
            PDU sequence numbers that were missing 
        </member>
        <member name="M:DIS1998net.MinefieldResponseNackPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.10.4 proivde the means to request a retransmit of a minefield data pdu. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldResponseNackPdu.setMinefieldID(DIS1998net.EntityID)">
            <summary>
            Minefield ID
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldResponseNackPdu.getMinefieldID">
            <summary>
            Minefield ID
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldResponseNackPdu.setRequestingEntityID(DIS1998net.EntityID)">
            <summary>
            entity ID making the request
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldResponseNackPdu.getRequestingEntityID">
            <summary>
            entity ID making the request
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldResponseNackPdu.setRequestID(System.Byte)">
            <summary>
            request ID
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldResponseNackPdu.setNumberOfMissingPdus(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfMissingPdus method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldResponseNackPdu.setMissingPduSequenceNumbers(System.Collections.Generic.List{DIS1998net.EightByteChunk})">
            <summary>
            PDU sequence numbers that were missing
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldResponseNackPdu.getMissingPduSequenceNumbers">
            <summary>
            PDU sequence numbers that were missing
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldResponseNackPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldResponseNackPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldResponseNackPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldResponseNackPdu.equals(DIS1998net.MinefieldResponseNackPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.MinefieldResponseNackPdu.MinefieldID">
            <summary>
            Minefield ID
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldResponseNackPdu.RequestingEntityID">
            <summary>
            entity ID making the request
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldResponseNackPdu.NumberOfMissingPdus">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfMissingPdus method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldResponseNackPdu.MissingPduSequenceNumbers">
            <summary>
            PDU sequence numbers that were missing
            </summary>
        </member>
        <member name="T:DIS1998net.LayerHeader">
             5.2.47.  Layer header.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.LayerHeader._layerNumber">
            Layer number 
        </member>
        <member name="F:DIS1998net.LayerHeader._layerSpecificInformaiton">
            Layer speccific information enumeration 
        </member>
        <member name="F:DIS1998net.LayerHeader._length">
            information length 
        </member>
        <member name="M:DIS1998net.LayerHeader.#ctor">
            Constructor 
            <summary>
            5.2.47.  Layer header.
            </summary>
        </member>
        <member name="M:DIS1998net.LayerHeader.setLayerNumber(System.Byte)">
            <summary>
            Layer number
            </summary>
        </member>
        <member name="M:DIS1998net.LayerHeader.setLayerSpecificInformaiton(System.Byte)">
            <summary>
            Layer speccific information enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.LayerHeader.setLength(System.UInt16)">
            <summary>
            information length
            </summary>
        </member>
        <member name="M:DIS1998net.LayerHeader.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.LayerHeader.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.LayerHeader.equals(DIS1998net.LayerHeader)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.IsPartOfPdu">
             Section 5.3.9.4 The joining of two or more simulation entities is communicated by this PDU. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.IsPartOfPdu._orginatingEntityID">
            ID of entity originating PDU 
        </member>
        <member name="F:DIS1998net.IsPartOfPdu._receivingEntityID">
            ID of entity receiving PDU 
        </member>
        <member name="F:DIS1998net.IsPartOfPdu._relationship">
            relationship of joined parts 
        </member>
        <member name="F:DIS1998net.IsPartOfPdu._partLocation">
            location of part; centroid of part in host's coordinate system. x=range, y=bearing, z=0 
        </member>
        <member name="F:DIS1998net.IsPartOfPdu._namedLocationID">
            named location 
        </member>
        <member name="F:DIS1998net.IsPartOfPdu._partEntityType">
            entity type 
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.9.4 The joining of two or more simulation entities is communicated by this PDU. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.setOrginatingEntityID(DIS1998net.EntityID)">
            <summary>
            ID of entity originating PDU
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.getOrginatingEntityID">
            <summary>
            ID of entity originating PDU
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.setReceivingEntityID(DIS1998net.EntityID)">
            <summary>
            ID of entity receiving PDU
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.getReceivingEntityID">
            <summary>
            ID of entity receiving PDU
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.setRelationship(DIS1998net.Relationship)">
            <summary>
            relationship of joined parts
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.getRelationship">
            <summary>
            relationship of joined parts
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.setPartLocation(DIS1998net.Vector3Float)">
            <summary>
            location of part; centroid of part in host's coordinate system. x=range, y=bearing, z=0
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.getPartLocation">
            <summary>
            location of part; centroid of part in host's coordinate system. x=range, y=bearing, z=0
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.setNamedLocationID(DIS1998net.NamedLocation)">
            <summary>
            named location
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.getNamedLocationID">
            <summary>
            named location
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.setPartEntityType(DIS1998net.EntityType)">
            <summary>
            entity type
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.getPartEntityType">
            <summary>
            entity type
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.IsPartOfPdu.equals(DIS1998net.IsPartOfPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.IsPartOfPdu.OrginatingEntityID">
            <summary>
            ID of entity originating PDU
            </summary>
        </member>
        <member name="P:DIS1998net.IsPartOfPdu.ReceivingEntityID">
            <summary>
            ID of entity receiving PDU
            </summary>
        </member>
        <member name="P:DIS1998net.IsPartOfPdu.Relationship">
            <summary>
            relationship of joined parts
            </summary>
        </member>
        <member name="P:DIS1998net.IsPartOfPdu.PartLocation">
            <summary>
            location of part; centroid of part in host's coordinate system. x=range, y=bearing, z=0
            </summary>
        </member>
        <member name="P:DIS1998net.IsPartOfPdu.NamedLocationID">
            <summary>
            named location
            </summary>
        </member>
        <member name="P:DIS1998net.IsPartOfPdu.PartEntityType">
            <summary>
            entity type
            </summary>
        </member>
        <member name="T:DIS1998net.GridAxisRecordRepresentation1">
             5.2.44: Grid data record, representation 1
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.GridAxisRecordRepresentation1._fieldScale">
            constant scale factor 
        </member>
        <member name="F:DIS1998net.GridAxisRecordRepresentation1._fieldOffset">
            constant offset used to scale grid data 
        </member>
        <member name="F:DIS1998net.GridAxisRecordRepresentation1._numberOfValues">
            Number of data values 
        </member>
        <member name="F:DIS1998net.GridAxisRecordRepresentation1._dataValues">
            variable length list of data parameters ^^^this is wrong--need padding as well 
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation1.#ctor">
            Constructor 
            <summary>
            5.2.44: Grid data record, representation 1
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation1.setFieldScale(System.Single)">
            <summary>
            constant scale factor
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation1.setFieldOffset(System.Single)">
            <summary>
            constant offset used to scale grid data
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation1.setNumberOfValues(System.UInt16)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfValues method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation1.setDataValues(System.Collections.Generic.List{DIS1998net.TwoByteChunk})">
            <summary>
            variable length list of data parameters ^^^this is wrong--need padding as well
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation1.getDataValues">
            <summary>
            variable length list of data parameters ^^^this is wrong--need padding as well
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation1.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation1.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation1.equals(DIS1998net.GridAxisRecordRepresentation1)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.GridAxisRecordRepresentation1.NumberOfValues">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfValues method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.GridAxisRecordRepresentation1.DataValues">
            <summary>
            variable length list of data parameters ^^^this is wrong--need padding as well
            </summary>
        </member>
        <member name="T:DIS1998net.EventReportReliablePdu">
             Section 5.3.12.11: reports the occurance of a significatnt event to the simulation manager. Needs manual     intervention to fix padding in variable datums. UNFINISHED.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.EventReportReliablePdu._eventType">
            Event type 
        </member>
        <member name="F:DIS1998net.EventReportReliablePdu._pad1">
            padding 
        </member>
        <member name="F:DIS1998net.EventReportReliablePdu._numberOfFixedDatumRecords">
            Fixed datum record count 
        </member>
        <member name="F:DIS1998net.EventReportReliablePdu._numberOfVariableDatumRecords">
            variable datum record count 
        </member>
        <member name="F:DIS1998net.EventReportReliablePdu._fixedDatumRecords">
            Fixed datum records 
        </member>
        <member name="F:DIS1998net.EventReportReliablePdu._variableDatumRecords">
            Variable datum records 
        </member>
        <member name="M:DIS1998net.EventReportReliablePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12.11: reports the occurance of a significatnt event to the simulation manager. Needs manual     intervention to fix padding in variable datums. UNFINISHED.
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportReliablePdu.setEventType(System.UInt16)">
            <summary>
            Event type
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportReliablePdu.setPad1(System.UInt32)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportReliablePdu.setNumberOfFixedDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportReliablePdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportReliablePdu.setFixedDatumRecords(System.Collections.Generic.List{DIS1998net.FixedDatum})">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportReliablePdu.getFixedDatumRecords">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportReliablePdu.setVariableDatumRecords(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportReliablePdu.getVariableDatumRecords">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportReliablePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportReliablePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportReliablePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.EventReportReliablePdu.equals(DIS1998net.EventReportReliablePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.EventReportReliablePdu.NumberOfFixedDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.EventReportReliablePdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.EventReportReliablePdu.FixedDatumRecords">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="P:DIS1998net.EventReportReliablePdu.VariableDatumRecords">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="T:DIS1998net.EntityStateUpdatePdu">
             5.3.3.4. Nonstatic information about a particular entity may be communicated by issuing an Entity State Update PDU. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.EntityStateUpdatePdu._entityID">
            This field shall identify the entity issuing the PDU 
        </member>
        <member name="F:DIS1998net.EntityStateUpdatePdu._padding1">
            Padding 
        </member>
        <member name="F:DIS1998net.EntityStateUpdatePdu._numberOfArticulationParameters">
            How many articulation parameters are in the variable length list 
        </member>
        <member name="F:DIS1998net.EntityStateUpdatePdu._entityLinearVelocity">
            Describes the speed of the entity in the world 
        </member>
        <member name="F:DIS1998net.EntityStateUpdatePdu._entityLocation">
            describes the location of the entity in the world 
        </member>
        <member name="F:DIS1998net.EntityStateUpdatePdu._entityOrientation">
            describes the orientation of the entity, in euler angles 
        </member>
        <member name="F:DIS1998net.EntityStateUpdatePdu._entityAppearance">
            a series of bit flags that are used to help draw the entity, such as smoking, on fire, etc. 
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.#ctor">
            Constructor 
            <summary>
            5.3.3.4. Nonstatic information about a particular entity may be communicated by issuing an Entity State Update PDU. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.setEntityID(DIS1998net.EntityID)">
            <summary>
            This field shall identify the entity issuing the PDU
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.getEntityID">
            <summary>
            This field shall identify the entity issuing the PDU
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.setPadding1(System.Byte)">
            <summary>
            Padding
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.setNumberOfArticulationParameters(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfArticulationParameters method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.setEntityLinearVelocity(DIS1998net.Vector3Float)">
            <summary>
            Describes the speed of the entity in the world
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.getEntityLinearVelocity">
            <summary>
            Describes the speed of the entity in the world
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.setEntityLocation(DIS1998net.Vector3Double)">
            <summary>
            describes the location of the entity in the world
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.getEntityLocation">
            <summary>
            describes the location of the entity in the world
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.setEntityOrientation(DIS1998net.Orientation)">
            <summary>
            describes the orientation of the entity, in euler angles
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.getEntityOrientation">
            <summary>
            describes the orientation of the entity, in euler angles
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.setEntityAppearance(System.UInt32)">
            <summary>
            a series of bit flags that are used to help draw the entity, such as smoking, on fire, etc.
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStateUpdatePdu.equals(DIS1998net.EntityStateUpdatePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.EntityStateUpdatePdu.EntityID">
            <summary>
            This field shall identify the entity issuing the PDU
            </summary>
        </member>
        <member name="P:DIS1998net.EntityStateUpdatePdu.NumberOfArticulationParameters">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfArticulationParameters method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.EntityStateUpdatePdu.EntityLinearVelocity">
            <summary>
            Describes the speed of the entity in the world
            </summary>
        </member>
        <member name="P:DIS1998net.EntityStateUpdatePdu.EntityLocation">
            <summary>
            describes the location of the entity in the world
            </summary>
        </member>
        <member name="P:DIS1998net.EntityStateUpdatePdu.EntityOrientation">
            <summary>
            describes the orientation of the entity, in euler angles
            </summary>
        </member>
        <member name="T:DIS1998net.NamedLocation">
             discrete ostional relationsihip 
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.NamedLocation._stationName">
            station name enumeration 
        </member>
        <member name="F:DIS1998net.NamedLocation._stationNumber">
            station number 
        </member>
        <member name="M:DIS1998net.NamedLocation.#ctor">
            Constructor 
            <summary>
            discrete ostional relationsihip 
            </summary>
        </member>
        <member name="M:DIS1998net.NamedLocation.setStationName(System.UInt16)">
            <summary>
            station name enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.NamedLocation.setStationNumber(System.UInt16)">
            <summary>
            station number
            </summary>
        </member>
        <member name="M:DIS1998net.NamedLocation.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.NamedLocation.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.NamedLocation.equals(DIS1998net.NamedLocation)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.GridAxisRecordRepresentation0">
             5.2.44: Grid data record, representation 0
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.GridAxisRecordRepresentation0._numberOfBytes">
            number of bytes of environmental state data 
        </member>
        <member name="F:DIS1998net.GridAxisRecordRepresentation0._dataValues">
            variable length list of data parameters ^^^this is wrong--need padding as well 
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation0.#ctor">
            Constructor 
            <summary>
            5.2.44: Grid data record, representation 0
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation0.setNumberOfBytes(System.UInt16)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfBytes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation0.setDataValues(System.Byte[])">
            <summary>
            variable length list of data parameters ^^^this is wrong--need padding as well
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation0.getDataValues">
            <summary>
            variable length list of data parameters ^^^this is wrong--need padding as well
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation0.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation0.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.GridAxisRecordRepresentation0.equals(DIS1998net.GridAxisRecordRepresentation0)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.GridAxisRecordRepresentation0.NumberOfBytes">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfBytes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.GridAxisRecordRepresentation0.DataValues">
            <summary>
            variable length list of data parameters ^^^this is wrong--need padding as well
            </summary>
        </member>
        <member name="T:DIS1998net.ActionResponsePdu">
             Section 5.3.6.7. response to an action request PDU. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ActionResponsePdu._requestID">
            Request ID that is unique 
        </member>
        <member name="F:DIS1998net.ActionResponsePdu._requestStatus">
            Status of response 
        </member>
        <member name="F:DIS1998net.ActionResponsePdu._numberOfFixedDatumRecords">
            Number of fixed datum records 
        </member>
        <member name="F:DIS1998net.ActionResponsePdu._numberOfVariableDatumRecords">
            Number of variable datum records 
        </member>
        <member name="F:DIS1998net.ActionResponsePdu._fixedDatums">
            variable length list of fixed datums 
        </member>
        <member name="F:DIS1998net.ActionResponsePdu._variableDatums">
            variable length list of variable length datums 
        </member>
        <member name="M:DIS1998net.ActionResponsePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.6.7. response to an action request PDU. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponsePdu.setRequestID(System.UInt32)">
            <summary>
            Request ID that is unique
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponsePdu.setRequestStatus(System.UInt32)">
            <summary>
            Status of response
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponsePdu.setNumberOfFixedDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponsePdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponsePdu.setFixedDatums(System.Collections.Generic.List{DIS1998net.FixedDatum})">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponsePdu.getFixedDatums">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponsePdu.setVariableDatums(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponsePdu.getVariableDatums">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponsePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponsePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponsePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponsePdu.equals(DIS1998net.ActionResponsePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.ActionResponsePdu.NumberOfFixedDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.ActionResponsePdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.ActionResponsePdu.FixedDatums">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="P:DIS1998net.ActionResponsePdu.VariableDatums">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="T:DIS1998net.AcousticBeamFundamentalParameter">
             Used in UaPdu
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.AcousticBeamFundamentalParameter._activeEmissionParameterIndex">
            parameter index 
        </member>
        <member name="F:DIS1998net.AcousticBeamFundamentalParameter._scanPattern">
            scan pattern 
        </member>
        <member name="F:DIS1998net.AcousticBeamFundamentalParameter._beamCenterAzimuth">
            beam center azimuth 
        </member>
        <member name="F:DIS1998net.AcousticBeamFundamentalParameter._azimuthalBeamwidth">
            azimuthal beamwidth 
        </member>
        <member name="F:DIS1998net.AcousticBeamFundamentalParameter._beamCenterDE">
            beam center 
        </member>
        <member name="F:DIS1998net.AcousticBeamFundamentalParameter._deBeamwidth">
            DE beamwidth (vertical beamwidth) 
        </member>
        <member name="M:DIS1998net.AcousticBeamFundamentalParameter.#ctor">
            Constructor 
            <summary>
            Used in UaPdu
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamFundamentalParameter.setActiveEmissionParameterIndex(System.UInt16)">
            <summary>
            parameter index
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamFundamentalParameter.setScanPattern(System.UInt16)">
            <summary>
            scan pattern
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamFundamentalParameter.setBeamCenterAzimuth(System.Single)">
            <summary>
            beam center azimuth
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamFundamentalParameter.setAzimuthalBeamwidth(System.Single)">
            <summary>
            azimuthal beamwidth
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamFundamentalParameter.setBeamCenterDE(System.Single)">
            <summary>
            beam center
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamFundamentalParameter.setDeBeamwidth(System.Single)">
            <summary>
            DE beamwidth (vertical beamwidth)
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamFundamentalParameter.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamFundamentalParameter.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamFundamentalParameter.equals(DIS1998net.AcousticBeamFundamentalParameter)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.AcknowledgeReliablePdu">
             Section 5.3.12.5: Ack receipt of a start-resume, stop-freeze, create-entity or remove enitty (reliable) pdus. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.AcknowledgeReliablePdu._acknowledgeFlag">
            ack flags 
        </member>
        <member name="F:DIS1998net.AcknowledgeReliablePdu._responseFlag">
            response flags 
        </member>
        <member name="F:DIS1998net.AcknowledgeReliablePdu._requestID">
            Request ID 
        </member>
        <member name="M:DIS1998net.AcknowledgeReliablePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12.5: Ack receipt of a start-resume, stop-freeze, create-entity or remove enitty (reliable) pdus. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.AcknowledgeReliablePdu.setAcknowledgeFlag(System.UInt16)">
            <summary>
            ack flags
            </summary>
        </member>
        <member name="M:DIS1998net.AcknowledgeReliablePdu.setResponseFlag(System.UInt16)">
            <summary>
            response flags
            </summary>
        </member>
        <member name="M:DIS1998net.AcknowledgeReliablePdu.setRequestID(System.UInt32)">
            <summary>
            Request ID
            </summary>
        </member>
        <member name="M:DIS1998net.AcknowledgeReliablePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.AcknowledgeReliablePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.AcknowledgeReliablePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.AcknowledgeReliablePdu.equals(DIS1998net.AcknowledgeReliablePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.StartResumePdu">
             Section 5.2.6.3. Start or resume an exercise. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.StartResumePdu._realWorldTime">
            UTC time at which the simulation shall start or resume 
        </member>
        <member name="F:DIS1998net.StartResumePdu._simulationTime">
            Simulation clock time at which the simulation shall start or resume 
        </member>
        <member name="F:DIS1998net.StartResumePdu._requestID">
            Identifier for the request 
        </member>
        <member name="M:DIS1998net.StartResumePdu.#ctor">
            Constructor 
            <summary>
            Section 5.2.6.3. Start or resume an exercise. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumePdu.setRealWorldTime(DIS1998net.ClockTime)">
            <summary>
            UTC time at which the simulation shall start or resume
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumePdu.getRealWorldTime">
            <summary>
            UTC time at which the simulation shall start or resume
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumePdu.setSimulationTime(DIS1998net.ClockTime)">
            <summary>
            Simulation clock time at which the simulation shall start or resume
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumePdu.getSimulationTime">
            <summary>
            Simulation clock time at which the simulation shall start or resume
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumePdu.setRequestID(System.UInt32)">
            <summary>
            Identifier for the request
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.StartResumePdu.equals(DIS1998net.StartResumePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.StartResumePdu.RealWorldTime">
            <summary>
            UTC time at which the simulation shall start or resume
            </summary>
        </member>
        <member name="P:DIS1998net.StartResumePdu.SimulationTime">
            <summary>
            Simulation clock time at which the simulation shall start or resume
            </summary>
        </member>
        <member name="T:DIS1998net.SimulationAddress">
             Section 5.2.14.1. A Simulation Address  record shall consist of the Site Identification number and the Application Identification number.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.SimulationAddress._site">
            The site ID 
        </member>
        <member name="F:DIS1998net.SimulationAddress._application">
            The application ID 
        </member>
        <member name="M:DIS1998net.SimulationAddress.#ctor">
            Constructor 
            <summary>
            Section 5.2.14.1. A Simulation Address  record shall consist of the Site Identification number and the Application Identification number.
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationAddress.setSite(System.UInt16)">
            <summary>
            The site ID
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationAddress.setApplication(System.UInt16)">
            <summary>
            The application ID
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationAddress.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationAddress.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.SimulationAddress.equals(DIS1998net.SimulationAddress)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.ServiceRequestPdu">
             Section 5.3.5.1. Information about a request for supplies. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ServiceRequestPdu._requestingEntityID">
            Entity that is requesting service 
        </member>
        <member name="F:DIS1998net.ServiceRequestPdu._servicingEntityID">
            Entity that is providing the service 
        </member>
        <member name="F:DIS1998net.ServiceRequestPdu._serviceTypeRequested">
            type of service requested 
        </member>
        <member name="F:DIS1998net.ServiceRequestPdu._numberOfSupplyTypes">
            How many requested 
        </member>
        <member name="F:DIS1998net.ServiceRequestPdu._serviceRequestPadding">
            padding 
        </member>
        <member name="M:DIS1998net.ServiceRequestPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.5.1. Information about a request for supplies. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.ServiceRequestPdu.setRequestingEntityID(DIS1998net.EntityID)">
            <summary>
            Entity that is requesting service
            </summary>
        </member>
        <member name="M:DIS1998net.ServiceRequestPdu.getRequestingEntityID">
            <summary>
            Entity that is requesting service
            </summary>
        </member>
        <member name="M:DIS1998net.ServiceRequestPdu.setServicingEntityID(DIS1998net.EntityID)">
            <summary>
            Entity that is providing the service
            </summary>
        </member>
        <member name="M:DIS1998net.ServiceRequestPdu.getServicingEntityID">
            <summary>
            Entity that is providing the service
            </summary>
        </member>
        <member name="M:DIS1998net.ServiceRequestPdu.setServiceTypeRequested(System.Byte)">
            <summary>
            type of service requested
            </summary>
        </member>
        <member name="M:DIS1998net.ServiceRequestPdu.setNumberOfSupplyTypes(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSupplyTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ServiceRequestPdu.setServiceRequestPadding(System.Int16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.ServiceRequestPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.ServiceRequestPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ServiceRequestPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ServiceRequestPdu.equals(DIS1998net.ServiceRequestPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.ServiceRequestPdu.RequestingEntityID">
            <summary>
            Entity that is requesting service
            </summary>
        </member>
        <member name="P:DIS1998net.ServiceRequestPdu.ServicingEntityID">
            <summary>
            Entity that is providing the service
            </summary>
        </member>
        <member name="P:DIS1998net.ServiceRequestPdu.NumberOfSupplyTypes">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSupplyTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="T:DIS1998net.OneByteChunk">
             8 bit piece of data
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.OneByteChunk._otherParameters">
            one byte of arbitrary data 
        </member>
        <member name="M:DIS1998net.OneByteChunk.#ctor">
            Constructor 
            <summary>
            8 bit piece of data
            </summary>
        </member>
        <member name="M:DIS1998net.OneByteChunk.setOtherParameters(System.Byte[])">
            <summary>
            one byte of arbitrary data
            </summary>
        </member>
        <member name="M:DIS1998net.OneByteChunk.getOtherParameters">
            <summary>
            one byte of arbitrary data
            </summary>
        </member>
        <member name="M:DIS1998net.OneByteChunk.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.OneByteChunk.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.OneByteChunk.equals(DIS1998net.OneByteChunk)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.OneByteChunk.OtherParameters">
            <summary>
            one byte of arbitrary data
            </summary>
        </member>
        <member name="T:DIS1998net.MinefieldDataPdu">
             Section 5.3.10.3 Information about individual mines within a minefield. This is very, very wrong. UNFINISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.MinefieldDataPdu._minefieldID">
            Minefield ID 
        </member>
        <member name="F:DIS1998net.MinefieldDataPdu._requestingEntityID">
            ID of entity making request 
        </member>
        <member name="F:DIS1998net.MinefieldDataPdu._minefieldSequenceNumbeer">
            Minefield sequence number 
        </member>
        <member name="F:DIS1998net.MinefieldDataPdu._requestID">
            request ID 
        </member>
        <member name="F:DIS1998net.MinefieldDataPdu._pduSequenceNumber">
            pdu sequence number 
        </member>
        <member name="F:DIS1998net.MinefieldDataPdu._numberOfPdus">
            number of pdus in response 
        </member>
        <member name="F:DIS1998net.MinefieldDataPdu._numberOfMinesInThisPdu">
            how many mines are in this PDU 
        </member>
        <member name="F:DIS1998net.MinefieldDataPdu._numberOfSensorTypes">
            how many sensor type are in this PDU 
        </member>
        <member name="F:DIS1998net.MinefieldDataPdu._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.MinefieldDataPdu._dataFilter">
            32 boolean fields 
        </member>
        <member name="F:DIS1998net.MinefieldDataPdu._mineType">
            Mine type 
        </member>
        <member name="F:DIS1998net.MinefieldDataPdu._sensorTypes">
            Sensor types, each 16 bits long 
        </member>
        <member name="F:DIS1998net.MinefieldDataPdu._pad3">
            Padding to get things 32-bit aligned. ^^^this is wrong--dyanmically sized padding needed 
        </member>
        <member name="F:DIS1998net.MinefieldDataPdu._mineLocation">
            Mine locations 
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.10.3 Information about individual mines within a minefield. This is very, very wrong. UNFINISHED
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.setMinefieldID(DIS1998net.EntityID)">
            <summary>
            Minefield ID
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.getMinefieldID">
            <summary>
            Minefield ID
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.setRequestingEntityID(DIS1998net.EntityID)">
            <summary>
            ID of entity making request
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.getRequestingEntityID">
            <summary>
            ID of entity making request
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.setMinefieldSequenceNumbeer(System.UInt16)">
            <summary>
            Minefield sequence number
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.setRequestID(System.Byte)">
            <summary>
            request ID
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.setPduSequenceNumber(System.Byte)">
            <summary>
            pdu sequence number
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.setNumberOfPdus(System.Byte)">
            <summary>
            number of pdus in response
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.setNumberOfMinesInThisPdu(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfMinesInThisPdu method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.setNumberOfSensorTypes(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSensorTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.setPad2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.setDataFilter(System.UInt32)">
            <summary>
            32 boolean fields
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.setMineType(DIS1998net.EntityType)">
            <summary>
            Mine type
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.getMineType">
            <summary>
            Mine type
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.setSensorTypes(System.Collections.Generic.List{DIS1998net.TwoByteChunk})">
            <summary>
            Sensor types, each 16 bits long
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.getSensorTypes">
            <summary>
            Sensor types, each 16 bits long
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.setPad3(System.Byte)">
            <summary>
            Padding to get things 32-bit aligned. ^^^this is wrong--dyanmically sized padding needed
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.setMineLocation(System.Collections.Generic.List{DIS1998net.Vector3Float})">
            <summary>
            Mine locations
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.getMineLocation">
            <summary>
            Mine locations
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldDataPdu.equals(DIS1998net.MinefieldDataPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.MinefieldDataPdu.MinefieldID">
            <summary>
            Minefield ID
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldDataPdu.RequestingEntityID">
            <summary>
            ID of entity making request
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldDataPdu.NumberOfMinesInThisPdu">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfMinesInThisPdu method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldDataPdu.NumberOfSensorTypes">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSensorTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldDataPdu.MineType">
            <summary>
            Mine type
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldDataPdu.SensorTypes">
            <summary>
            Sensor types, each 16 bits long
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldDataPdu.MineLocation">
            <summary>
            Mine locations
            </summary>
        </member>
        <member name="T:DISnet.Utilities.DIS1998ChunkConverter">
            <summary>
            Chunk Convertor for DIS 1998 (note same  methods could be reused with 1995)
            </summary>
        </member>
        <member name="M:DISnet.Utilities.DIS1998ChunkConverter.EightByteChunksToArray(System.Collections.Generic.List{DIS1998net.EightByteChunk})">
            <summary>
            Method to convert Eight Byte Chunks into an Array
            </summary>
            <param name="chunkList">List that holds the EightByteChunks</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:DISnet.Utilities.DIS1998ChunkConverter.FourByteChunksToArray(System.Collections.Generic.List{DIS1998net.FourByteChunk})">
            <summary>
            Method to convert Four Byte Chunks into an Array
            </summary>
            <param name="chunkList">List that holds the FourByteChunks</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:DISnet.Utilities.DIS1998ChunkConverter.TwoByteChunksToArray(System.Collections.Generic.List{DIS1998net.TwoByteChunk})">
            <summary>
            Method to convert Two Byte Chunks into an Array
            </summary>
            <param name="chunkList">List that holds the TwoByteChunks</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:DISnet.Utilities.DIS1998ChunkConverter.StringToEightByteChunks(System.String)">
            <summary>
            Method to convert a string into Eight Byte Chunks into an Array.  This method was provided as a means to transport 'other'
            types of data via a PDU that uses variable or fixed Datum.
            </summary>
            <param name="data">String data to convert</param>
            <returns>List of EightByteChunk data</returns>
        </member>
        <member name="M:DISnet.Utilities.DIS1998ChunkConverter.StringToFourByteChunks(System.String)">
            <summary>
            Method to convert a string into Four Byte Chunks into an Array.  This method was provided as a means to transport 'other'
            types of data via a PDU that uses variable or fixed Datum.
            </summary>
            <param name="data">String data to convert</param>
            <returns>List of FourByteChunk data</returns>
        </member>
        <member name="M:DISnet.Utilities.DIS1998ChunkConverter.StringToTwoByteChunks(System.String)">
            <summary>
            Method to convert a string into Two Byte Chunks into an Array.  This method was provided as a means to transport 'other'
            types of data via a PDU that uses variable or fixed Datum.
            </summary>
            <param name="data">String data to convert</param>
            <returns>List of TwoByteChunk data</returns>
        </member>
        <member name="M:DISnet.Utilities.DIS1998ChunkConverter.ArrayToEightByteChunks(System.Array)">
            <summary>
            Method to convert a byte Array into Eigh tByte Chunks
            </summary>
            <param name="data">Byte array that contains data to convert</param>
            <returns>List containing EightByteChunks</returns>
        </member>
        <member name="M:DISnet.Utilities.DIS1998ChunkConverter.ArrayToFourByteChunks(System.Array)">
            <summary>
            Method to convert a byte Array into Four tByte Chunks
            </summary>
            <param name="data">Byte array that contains data to convert</param>
            <returns>List containing FourByteChunks</returns>
        </member>
        <member name="M:DISnet.Utilities.DIS1998ChunkConverter.ArrayToTwoByteChunks(System.Array)">
            <summary>
            Method to convert a byte Array into Two tByte Chunks
            </summary>
            <param name="data">Byte array that contains data to convert</param>
            <returns>List containing TwoByteChunks</returns>
        </member>
        <member name="T:DIS1998net.SystemID">
             5.2.58. Used in IFF ATC PDU
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.SystemID._systemType">
            System Type 
        </member>
        <member name="F:DIS1998net.SystemID._systemName">
            System name, an enumeration 
        </member>
        <member name="F:DIS1998net.SystemID._systemMode">
            System mode 
        </member>
        <member name="F:DIS1998net.SystemID._changeOptions">
            Change Options 
        </member>
        <member name="M:DIS1998net.SystemID.#ctor">
            Constructor 
            <summary>
            5.2.58. Used in IFF ATC PDU
            </summary>
        </member>
        <member name="M:DIS1998net.SystemID.setSystemType(System.UInt16)">
            <summary>
            System Type
            </summary>
        </member>
        <member name="M:DIS1998net.SystemID.setSystemName(System.UInt16)">
            <summary>
            System name, an enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.SystemID.setSystemMode(System.Byte)">
            <summary>
            System mode
            </summary>
        </member>
        <member name="M:DIS1998net.SystemID.setChangeOptions(System.Byte)">
            <summary>
            Change Options
            </summary>
        </member>
        <member name="M:DIS1998net.SystemID.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.SystemID.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.SystemID.equals(DIS1998net.SystemID)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.SeesPdu">
             Section 5.3.7.5. SEES PDU, supplemental emissions entity state information. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.SeesPdu._orginatingEntityID">
            Originating entity ID 
        </member>
        <member name="F:DIS1998net.SeesPdu._infraredSignatureRepresentationIndex">
            IR Signature representation index 
        </member>
        <member name="F:DIS1998net.SeesPdu._acousticSignatureRepresentationIndex">
            acoustic Signature representation index 
        </member>
        <member name="F:DIS1998net.SeesPdu._radarCrossSectionSignatureRepresentationIndex">
            radar cross section representation index 
        </member>
        <member name="F:DIS1998net.SeesPdu._numberOfPropulsionSystems">
            how many propulsion systems 
        </member>
        <member name="F:DIS1998net.SeesPdu._numberOfVectoringNozzleSystems">
            how many vectoring nozzle systems 
        </member>
        <member name="F:DIS1998net.SeesPdu._propulsionSystemData">
            variable length list of propulsion system data 
        </member>
        <member name="F:DIS1998net.SeesPdu._vectoringSystemData">
            variable length list of vectoring system data 
        </member>
        <member name="M:DIS1998net.SeesPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.7.5. SEES PDU, supplemental emissions entity state information. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.setOrginatingEntityID(DIS1998net.EntityID)">
            <summary>
            Originating entity ID
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.getOrginatingEntityID">
            <summary>
            Originating entity ID
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.setInfraredSignatureRepresentationIndex(System.UInt16)">
            <summary>
            IR Signature representation index
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.setAcousticSignatureRepresentationIndex(System.UInt16)">
            <summary>
            acoustic Signature representation index
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.setRadarCrossSectionSignatureRepresentationIndex(System.UInt16)">
            <summary>
            radar cross section representation index
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.setNumberOfPropulsionSystems(System.UInt16)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfPropulsionSystems method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.setNumberOfVectoringNozzleSystems(System.UInt16)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVectoringNozzleSystems method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.setPropulsionSystemData(System.Collections.Generic.List{DIS1998net.PropulsionSystemData})">
            <summary>
            variable length list of propulsion system data
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.getPropulsionSystemData">
            <summary>
            variable length list of propulsion system data
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.setVectoringSystemData(System.Collections.Generic.List{DIS1998net.VectoringNozzleSystemData})">
            <summary>
            variable length list of vectoring system data
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.getVectoringSystemData">
            <summary>
            variable length list of vectoring system data
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.SeesPdu.equals(DIS1998net.SeesPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.SeesPdu.OrginatingEntityID">
            <summary>
            Originating entity ID
            </summary>
        </member>
        <member name="P:DIS1998net.SeesPdu.NumberOfPropulsionSystems">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfPropulsionSystems method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.SeesPdu.NumberOfVectoringNozzleSystems">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVectoringNozzleSystems method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.SeesPdu.PropulsionSystemData">
            <summary>
            variable length list of propulsion system data
            </summary>
        </member>
        <member name="P:DIS1998net.SeesPdu.VectoringSystemData">
            <summary>
            variable length list of vectoring system data
            </summary>
        </member>
        <member name="T:DIS1998net.Relationship">
             5.2.56. Purpose for joinging two entities
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.Relationship._nature">
            Nature of join 
        </member>
        <member name="F:DIS1998net.Relationship._position">
            position of join 
        </member>
        <member name="M:DIS1998net.Relationship.#ctor">
            Constructor 
            <summary>
            5.2.56. Purpose for joinging two entities
            </summary>
        </member>
        <member name="M:DIS1998net.Relationship.setNature(System.UInt16)">
            <summary>
            Nature of join
            </summary>
        </member>
        <member name="M:DIS1998net.Relationship.setPosition(System.UInt16)">
            <summary>
            position of join
            </summary>
        </member>
        <member name="M:DIS1998net.Relationship.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.Relationship.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.Relationship.equals(DIS1998net.Relationship)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.RecordSet">
             Record sets, used in transfer control request PDU
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.RecordSet._recordID">
            record ID 
        </member>
        <member name="F:DIS1998net.RecordSet._recordSetSerialNumber">
            record set serial number 
        </member>
        <member name="F:DIS1998net.RecordSet._recordLength">
            record length 
        </member>
        <member name="F:DIS1998net.RecordSet._recordCount">
            record count 
        </member>
        <member name="F:DIS1998net.RecordSet._recordValues">
            ^^^This is wrong--variable sized data records 
        </member>
        <member name="F:DIS1998net.RecordSet._pad4">
            ^^^This is wrong--variable sized padding 
        </member>
        <member name="M:DIS1998net.RecordSet.#ctor">
            Constructor 
            <summary>
            Record sets, used in transfer control request PDU
            </summary>
        </member>
        <member name="M:DIS1998net.RecordSet.setRecordID(System.UInt32)">
            <summary>
            record ID
            </summary>
        </member>
        <member name="M:DIS1998net.RecordSet.setRecordSetSerialNumber(System.UInt32)">
            <summary>
            record set serial number
            </summary>
        </member>
        <member name="M:DIS1998net.RecordSet.setRecordLength(System.UInt16)">
            <summary>
            record length
            </summary>
        </member>
        <member name="M:DIS1998net.RecordSet.setRecordCount(System.UInt16)">
            <summary>
            record count
            </summary>
        </member>
        <member name="M:DIS1998net.RecordSet.setRecordValues(System.UInt16)">
            <summary>
            ^^^This is wrong--variable sized data records
            </summary>
        </member>
        <member name="M:DIS1998net.RecordSet.setPad4(System.Byte)">
            <summary>
            ^^^This is wrong--variable sized padding
            </summary>
        </member>
        <member name="M:DIS1998net.RecordSet.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.RecordSet.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.RecordSet.equals(DIS1998net.RecordSet)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.GriddedDataPdu">
             Section 5.3.11.2: Information about globat, spatially varying enviornmental effects. This requires manual cleanup; the grid axis        records are variable sized. UNFINISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._environmentalSimulationApplicationID">
            environmental simulation application ID 
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._fieldNumber">
            unique identifier for each piece of enviornmental data 
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._pduNumber">
            sequence number for the total set of PDUS used to transmit the data 
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._pduTotal">
            Total number of PDUS used to transmit the data 
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._coordinateSystem">
            coordinate system of the grid 
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._numberOfGridAxes">
            number of grid axes for the environmental data 
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._constantGrid">
            are domain grid axes identidal to those of the priveious domain update? 
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._environmentType">
            type of environment 
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._orientation">
            orientation of the data grid 
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._sampleTime">
            valid time of the enviormental data sample, 64 bit unsigned int 
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._totalValues">
            total number of all data values for all pdus for an environmental sample 
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._vectorDimension">
            total number of data values at each grid point. 
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._padding1">
            padding 
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._padding2">
            padding 
        </member>
        <member name="F:DIS1998net.GriddedDataPdu._gridDataList">
            Grid data ^^^This is wrong 
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.11.2: Information about globat, spatially varying enviornmental effects. This requires manual cleanup; the grid axis        records are variable sized. UNFINISHED
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setEnvironmentalSimulationApplicationID(DIS1998net.EntityID)">
            <summary>
            environmental simulation application ID
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.getEnvironmentalSimulationApplicationID">
            <summary>
            environmental simulation application ID
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setFieldNumber(System.UInt16)">
            <summary>
            unique identifier for each piece of enviornmental data
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setPduNumber(System.UInt16)">
            <summary>
            sequence number for the total set of PDUS used to transmit the data
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setPduTotal(System.UInt16)">
            <summary>
            Total number of PDUS used to transmit the data
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setCoordinateSystem(System.UInt16)">
            <summary>
            coordinate system of the grid
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setNumberOfGridAxes(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfGridAxes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setConstantGrid(System.Byte)">
            <summary>
            are domain grid axes identidal to those of the priveious domain update?
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setEnvironmentType(DIS1998net.EntityType)">
            <summary>
            type of environment
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.getEnvironmentType">
            <summary>
            type of environment
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setOrientation(DIS1998net.Orientation)">
            <summary>
            orientation of the data grid
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.getOrientation">
            <summary>
            orientation of the data grid
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setSampleTime(System.Int64)">
            <summary>
            valid time of the enviormental data sample, 64 bit unsigned int
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setTotalValues(System.UInt32)">
            <summary>
            total number of all data values for all pdus for an environmental sample
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setVectorDimension(System.Byte)">
            <summary>
            total number of data values at each grid point.
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setPadding1(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setPadding2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.setGridDataList(System.Collections.Generic.List{DIS1998net.GridAxisRecord})">
            <summary>
            Grid data ^^^This is wrong
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.getGridDataList">
            <summary>
            Grid data ^^^This is wrong
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.GriddedDataPdu.equals(DIS1998net.GriddedDataPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.GriddedDataPdu.EnvironmentalSimulationApplicationID">
            <summary>
            environmental simulation application ID
            </summary>
        </member>
        <member name="P:DIS1998net.GriddedDataPdu.NumberOfGridAxes">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfGridAxes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.GriddedDataPdu.EnvironmentType">
            <summary>
            type of environment
            </summary>
        </member>
        <member name="P:DIS1998net.GriddedDataPdu.Orientation">
            <summary>
            orientation of the data grid
            </summary>
        </member>
        <member name="P:DIS1998net.GriddedDataPdu.GridDataList">
            <summary>
            Grid data ^^^This is wrong
            </summary>
        </member>
        <member name="T:DIS1998net.EnvironmentalProcessPdu">
             Section 5.3.11.1: Information about environmental effects and processes. This requires manual cleanup. the environmental        record is variable, as is the padding. UNFINISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.EnvironmentalProcessPdu._environementalProcessID">
            Environmental process ID 
        </member>
        <member name="F:DIS1998net.EnvironmentalProcessPdu._environmentType">
            Environment type 
        </member>
        <member name="F:DIS1998net.EnvironmentalProcessPdu._modelType">
            model type 
        </member>
        <member name="F:DIS1998net.EnvironmentalProcessPdu._environmentStatus">
            Environment status 
        </member>
        <member name="F:DIS1998net.EnvironmentalProcessPdu._numberOfEnvironmentRecords">
            number of environment records  
        </member>
        <member name="F:DIS1998net.EnvironmentalProcessPdu._sequenceNumber">
            PDU sequence number for the environmentla process if pdu sequencing required 
        </member>
        <member name="F:DIS1998net.EnvironmentalProcessPdu._environmentRecords">
            environemt records 
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.11.1: Information about environmental effects and processes. This requires manual cleanup. the environmental        record is variable, as is the padding. UNFINISHED
            </summary>
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.setEnvironementalProcessID(DIS1998net.EntityID)">
            <summary>
            Environmental process ID
            </summary>
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.getEnvironementalProcessID">
            <summary>
            Environmental process ID
            </summary>
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.setEnvironmentType(DIS1998net.EntityType)">
            <summary>
            Environment type
            </summary>
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.getEnvironmentType">
            <summary>
            Environment type
            </summary>
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.setModelType(System.Byte)">
            <summary>
            model type
            </summary>
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.setEnvironmentStatus(System.Byte)">
            <summary>
            Environment status
            </summary>
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.setNumberOfEnvironmentRecords(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfEnvironmentRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.setSequenceNumber(System.UInt16)">
            <summary>
            PDU sequence number for the environmentla process if pdu sequencing required
            </summary>
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.setEnvironmentRecords(System.Collections.Generic.List{DIS1998net.Environment})">
            <summary>
            environemt records
            </summary>
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.getEnvironmentRecords">
            <summary>
            environemt records
            </summary>
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.EnvironmentalProcessPdu.equals(DIS1998net.EnvironmentalProcessPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.EnvironmentalProcessPdu.EnvironementalProcessID">
            <summary>
            Environmental process ID
            </summary>
        </member>
        <member name="P:DIS1998net.EnvironmentalProcessPdu.EnvironmentType">
            <summary>
            Environment type
            </summary>
        </member>
        <member name="P:DIS1998net.EnvironmentalProcessPdu.NumberOfEnvironmentRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfEnvironmentRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.EnvironmentalProcessPdu.EnvironmentRecords">
            <summary>
            environemt records
            </summary>
        </member>
        <member name="T:DISnet.DataStreamUtilities.EndianTypes">
            <summary>
            Represents the underlining represetation of value types
            </summary>
        </member>
        <member name="T:DISnet.DataStreamUtilities.EndianTypes.Endian">
            <summary>
            Known endian types
            </summary>
        </member>
        <member name="T:DIS1998net.DataQueryReliablePdu">
             Section 5.3.12.8: request for data from an entity. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.DataQueryReliablePdu._requiredReliabilityService">
            level of reliability service used for this transaction 
        </member>
        <member name="F:DIS1998net.DataQueryReliablePdu._pad1">
            padding 
        </member>
        <member name="F:DIS1998net.DataQueryReliablePdu._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.DataQueryReliablePdu._requestID">
            request ID 
        </member>
        <member name="F:DIS1998net.DataQueryReliablePdu._timeInterval">
            time interval between issuing data query PDUs 
        </member>
        <member name="F:DIS1998net.DataQueryReliablePdu._numberOfFixedDatumRecords">
            Fixed datum record count 
        </member>
        <member name="F:DIS1998net.DataQueryReliablePdu._numberOfVariableDatumRecords">
            variable datum record count 
        </member>
        <member name="F:DIS1998net.DataQueryReliablePdu._fixedDatumRecords">
            Fixed datum records 
        </member>
        <member name="F:DIS1998net.DataQueryReliablePdu._variableDatumRecords">
            Variable datum records 
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12.8: request for data from an entity. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.setRequiredReliabilityService(System.Byte)">
            <summary>
            level of reliability service used for this transaction
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.setPad1(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.setPad2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.setRequestID(System.UInt32)">
            <summary>
            request ID
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.setTimeInterval(System.UInt32)">
            <summary>
            time interval between issuing data query PDUs
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.setNumberOfFixedDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.setFixedDatumRecords(System.Collections.Generic.List{DIS1998net.FixedDatum})">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.getFixedDatumRecords">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.setVariableDatumRecords(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.getVariableDatumRecords">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.DataQueryReliablePdu.equals(DIS1998net.DataQueryReliablePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.DataQueryReliablePdu.NumberOfFixedDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.DataQueryReliablePdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.DataQueryReliablePdu.FixedDatumRecords">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="P:DIS1998net.DataQueryReliablePdu.VariableDatumRecords">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="T:DIS1998net.CreateEntityReliablePdu">
             Section 5.3.12.1: creation of an entity , reliable. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.CreateEntityReliablePdu._requiredReliabilityService">
            level of reliability service used for this transaction 
        </member>
        <member name="F:DIS1998net.CreateEntityReliablePdu._pad1">
            padding 
        </member>
        <member name="F:DIS1998net.CreateEntityReliablePdu._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.CreateEntityReliablePdu._requestID">
            Request ID 
        </member>
        <member name="M:DIS1998net.CreateEntityReliablePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12.1: creation of an entity , reliable. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.CreateEntityReliablePdu.setRequiredReliabilityService(System.Byte)">
            <summary>
            level of reliability service used for this transaction
            </summary>
        </member>
        <member name="M:DIS1998net.CreateEntityReliablePdu.setPad1(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.CreateEntityReliablePdu.setPad2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.CreateEntityReliablePdu.setRequestID(System.UInt32)">
            <summary>
            Request ID
            </summary>
        </member>
        <member name="M:DIS1998net.CreateEntityReliablePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.CreateEntityReliablePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.CreateEntityReliablePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.CreateEntityReliablePdu.equals(DIS1998net.CreateEntityReliablePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.CollisionPdu">
             Section 5.3.3.2. Information about a collision. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.CollisionPdu._issuingEntityID">
            ID of the entity that issued the collision PDU 
        </member>
        <member name="F:DIS1998net.CollisionPdu._collidingEntityID">
            ID of entity that has collided with the issuing entity ID 
        </member>
        <member name="F:DIS1998net.CollisionPdu._eventID">
            ID of event 
        </member>
        <member name="F:DIS1998net.CollisionPdu._collisionType">
            ID of event 
        </member>
        <member name="F:DIS1998net.CollisionPdu._pad">
            some padding 
        </member>
        <member name="F:DIS1998net.CollisionPdu._velocity">
            velocity at collision 
        </member>
        <member name="F:DIS1998net.CollisionPdu._mass">
            mass of issuing entity 
        </member>
        <member name="F:DIS1998net.CollisionPdu._location">
            Location with respect to entity the issuing entity collided with 
        </member>
        <member name="M:DIS1998net.CollisionPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.3.2. Information about a collision. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.setIssuingEntityID(DIS1998net.EntityID)">
            <summary>
            ID of the entity that issued the collision PDU
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.getIssuingEntityID">
            <summary>
            ID of the entity that issued the collision PDU
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.setCollidingEntityID(DIS1998net.EntityID)">
            <summary>
            ID of entity that has collided with the issuing entity ID
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.getCollidingEntityID">
            <summary>
            ID of entity that has collided with the issuing entity ID
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.setEventID(DIS1998net.EventID)">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.getEventID">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.setCollisionType(System.Byte)">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.setPad(System.Byte)">
            <summary>
            some padding
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.setVelocity(DIS1998net.Vector3Float)">
            <summary>
            velocity at collision
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.getVelocity">
            <summary>
            velocity at collision
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.setMass(System.Single)">
            <summary>
            mass of issuing entity
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.setLocation(DIS1998net.Vector3Float)">
            <summary>
            Location with respect to entity the issuing entity collided with
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.getLocation">
            <summary>
            Location with respect to entity the issuing entity collided with
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.CollisionPdu.equals(DIS1998net.CollisionPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.CollisionPdu.IssuingEntityID">
            <summary>
            ID of the entity that issued the collision PDU
            </summary>
        </member>
        <member name="P:DIS1998net.CollisionPdu.CollidingEntityID">
            <summary>
            ID of entity that has collided with the issuing entity ID
            </summary>
        </member>
        <member name="P:DIS1998net.CollisionPdu.EventID">
            <summary>
            ID of event
            </summary>
        </member>
        <member name="P:DIS1998net.CollisionPdu.Velocity">
            <summary>
            velocity at collision
            </summary>
        </member>
        <member name="P:DIS1998net.CollisionPdu.Location">
            <summary>
            Location with respect to entity the issuing entity collided with
            </summary>
        </member>
        <member name="T:DIS1998net.AcousticBeamData">
             Used in UA PDU
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.AcousticBeamData._beamDataLength">
            beam data length 
        </member>
        <member name="F:DIS1998net.AcousticBeamData._beamIDNumber">
            beamIDNumber 
        </member>
        <member name="F:DIS1998net.AcousticBeamData._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.AcousticBeamData._fundamentalDataParameters">
            fundamental data parameters 
        </member>
        <member name="M:DIS1998net.AcousticBeamData.#ctor">
            Constructor 
            <summary>
            Used in UA PDU
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamData.setBeamDataLength(System.UInt16)">
            <summary>
            beam data length
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamData.setBeamIDNumber(System.Byte)">
            <summary>
            beamIDNumber
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamData.setPad2(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamData.setFundamentalDataParameters(DIS1998net.AcousticBeamFundamentalParameter)">
            <summary>
            fundamental data parameters
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamData.getFundamentalDataParameters">
            <summary>
            fundamental data parameters
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamData.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamData.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticBeamData.equals(DIS1998net.AcousticBeamData)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.AcousticBeamData.FundamentalDataParameters">
            <summary>
            fundamental data parameters
            </summary>
        </member>
        <member name="T:DIS1998net.TransmitterPdu">
             Section 5.3.8.1. Detailed information about a radio transmitter. This PDU requires manually         written code to complete, since the modulation parameters are of variable length. UNFINISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.TransmitterPdu._radioEntityType">
            linear accelleration of entity 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._transmitState">
            transmit state 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._inputSource">
            input source 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._padding1">
            padding 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._antennaLocation">
            Location of antenna 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._relativeAntennaLocation">
            relative location of antenna 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._antennaPatternType">
            antenna pattern type 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._antennaPatternCount">
            atenna pattern length 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._frequency">
            frequency 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._transmitFrequencyBandwidth">
            transmit frequency Bandwidth 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._power">
            transmission power 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._modulationType">
            modulation 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._cryptoSystem">
            crypto system enumeration 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._cryptoKeyId">
            crypto system key identifer 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._modulationParameterCount">
            how many modulation parameters we have 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._padding2">
            padding2 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._padding3">
            padding3 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._modulationParametersList">
            variable length list of modulation parameters 
        </member>
        <member name="F:DIS1998net.TransmitterPdu._antennaPatternList">
            variable length list of antenna pattern records 
        </member>
        <member name="M:DIS1998net.TransmitterPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.8.1. Detailed information about a radio transmitter. This PDU requires manually         written code to complete, since the modulation parameters are of variable length. UNFINISHED
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setRadioEntityType(DIS1998net.RadioEntityType)">
            <summary>
            linear accelleration of entity
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.getRadioEntityType">
            <summary>
            linear accelleration of entity
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setTransmitState(System.Byte)">
            <summary>
            transmit state
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setInputSource(System.Byte)">
            <summary>
            input source
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setPadding1(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setAntennaLocation(DIS1998net.Vector3Double)">
            <summary>
            Location of antenna
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.getAntennaLocation">
            <summary>
            Location of antenna
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setRelativeAntennaLocation(DIS1998net.Vector3Float)">
            <summary>
            relative location of antenna
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.getRelativeAntennaLocation">
            <summary>
            relative location of antenna
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setAntennaPatternType(System.UInt16)">
            <summary>
            antenna pattern type
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setAntennaPatternCount(System.UInt16)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getantennaPatternCount method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setFrequency(System.UInt64)">
            <summary>
            frequency
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setTransmitFrequencyBandwidth(System.Single)">
            <summary>
            transmit frequency Bandwidth
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setPower(System.Single)">
            <summary>
            transmission power
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setModulationType(DIS1998net.ModulationType)">
            <summary>
            modulation
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.getModulationType">
            <summary>
            modulation
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setCryptoSystem(System.UInt16)">
            <summary>
            crypto system enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setCryptoKeyId(System.UInt16)">
            <summary>
            crypto system key identifer
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setModulationParameterCount(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getmodulationParameterCount method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setPadding2(System.UInt16)">
            <summary>
            padding2
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setPadding3(System.Byte)">
            <summary>
            padding3
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setModulationParametersList(System.Collections.Generic.List{DIS1998net.Vector3Float})">
            <summary>
            variable length list of modulation parameters
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.getModulationParametersList">
            <summary>
            variable length list of modulation parameters
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.setAntennaPatternList(System.Collections.Generic.List{DIS1998net.Vector3Float})">
            <summary>
            variable length list of antenna pattern records
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.getAntennaPatternList">
            <summary>
            variable length list of antenna pattern records
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.TransmitterPdu.equals(DIS1998net.TransmitterPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.TransmitterPdu.RadioEntityType">
            <summary>
            linear accelleration of entity
            </summary>
        </member>
        <member name="P:DIS1998net.TransmitterPdu.AntennaLocation">
            <summary>
            Location of antenna
            </summary>
        </member>
        <member name="P:DIS1998net.TransmitterPdu.RelativeAntennaLocation">
            <summary>
            relative location of antenna
            </summary>
        </member>
        <member name="P:DIS1998net.TransmitterPdu.AntennaPatternCount">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getantennaPatternCount method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.TransmitterPdu.ModulationType">
            <summary>
            modulation
            </summary>
        </member>
        <member name="P:DIS1998net.TransmitterPdu.ModulationParameterCount">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getmodulationParameterCount method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.TransmitterPdu.ModulationParametersList">
            <summary>
            variable length list of modulation parameters
            </summary>
        </member>
        <member name="P:DIS1998net.TransmitterPdu.AntennaPatternList">
            <summary>
            variable length list of antenna pattern records
            </summary>
        </member>
        <member name="T:DIS1998net.TransferControlRequestPdu">
             Section 5.3.9.3 Information initiating the dyanic allocation and control of simulation entities         between two simulation applications. Requires manual cleanup. The padding between record sets is variable. UNFINISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.TransferControlRequestPdu._orginatingEntityID">
            ID of entity originating request 
        </member>
        <member name="F:DIS1998net.TransferControlRequestPdu._recevingEntityID">
            ID of entity receiving request 
        </member>
        <member name="F:DIS1998net.TransferControlRequestPdu._requestID">
            ID ofrequest 
        </member>
        <member name="F:DIS1998net.TransferControlRequestPdu._requiredReliabilityService">
            required level of reliabliity service. 
        </member>
        <member name="F:DIS1998net.TransferControlRequestPdu._tranferType">
            type of transfer desired 
        </member>
        <member name="F:DIS1998net.TransferControlRequestPdu._transferEntityID">
            The entity for which control is being requested to transfer 
        </member>
        <member name="F:DIS1998net.TransferControlRequestPdu._numberOfRecordSets">
            number of record sets to transfer 
        </member>
        <member name="F:DIS1998net.TransferControlRequestPdu._recordSets">
            ^^^This is wrong--the RecordSet class needs more work 
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.9.3 Information initiating the dyanic allocation and control of simulation entities         between two simulation applications. Requires manual cleanup. The padding between record sets is variable. UNFINISHED
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.setOrginatingEntityID(DIS1998net.EntityID)">
            <summary>
            ID of entity originating request
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.getOrginatingEntityID">
            <summary>
            ID of entity originating request
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.setRecevingEntityID(DIS1998net.EntityID)">
            <summary>
            ID of entity receiving request
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.getRecevingEntityID">
            <summary>
            ID of entity receiving request
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.setRequestID(System.UInt32)">
            <summary>
            ID ofrequest
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.setRequiredReliabilityService(System.Byte)">
            <summary>
            required level of reliabliity service.
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.setTranferType(System.Byte)">
            <summary>
            type of transfer desired
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.setTransferEntityID(DIS1998net.EntityID)">
            <summary>
            The entity for which control is being requested to transfer
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.getTransferEntityID">
            <summary>
            The entity for which control is being requested to transfer
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.setNumberOfRecordSets(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfRecordSets method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.setRecordSets(System.Collections.Generic.List{DIS1998net.RecordSet})">
            <summary>
            ^^^This is wrong--the RecordSet class needs more work
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.getRecordSets">
            <summary>
            ^^^This is wrong--the RecordSet class needs more work
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.TransferControlRequestPdu.equals(DIS1998net.TransferControlRequestPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.TransferControlRequestPdu.OrginatingEntityID">
            <summary>
            ID of entity originating request
            </summary>
        </member>
        <member name="P:DIS1998net.TransferControlRequestPdu.RecevingEntityID">
            <summary>
            ID of entity receiving request
            </summary>
        </member>
        <member name="P:DIS1998net.TransferControlRequestPdu.TransferEntityID">
            <summary>
            The entity for which control is being requested to transfer
            </summary>
        </member>
        <member name="P:DIS1998net.TransferControlRequestPdu.NumberOfRecordSets">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfRecordSets method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.TransferControlRequestPdu.RecordSets">
            <summary>
            ^^^This is wrong--the RecordSet class needs more work
            </summary>
        </member>
        <member name="T:DIS1998net.SixByteChunk">
             48 bit piece of data
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.SixByteChunk._otherParameters">
            six bytes of arbitrary data 
        </member>
        <member name="M:DIS1998net.SixByteChunk.#ctor">
            Constructor 
            <summary>
            48 bit piece of data
            </summary>
        </member>
        <member name="M:DIS1998net.SixByteChunk.setOtherParameters(System.Byte[])">
            <summary>
            six bytes of arbitrary data
            </summary>
        </member>
        <member name="M:DIS1998net.SixByteChunk.getOtherParameters">
            <summary>
            six bytes of arbitrary data
            </summary>
        </member>
        <member name="M:DIS1998net.SixByteChunk.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.SixByteChunk.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.SixByteChunk.equals(DIS1998net.SixByteChunk)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.SixByteChunk.OtherParameters">
            <summary>
            six bytes of arbitrary data
            </summary>
        </member>
        <member name="T:DIS1998net.RemoveEntityPdu">
             Section 5.3.6.2. Remove an entity. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.RemoveEntityPdu._requestID">
            Identifier for the request 
        </member>
        <member name="M:DIS1998net.RemoveEntityPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.6.2. Remove an entity. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.RemoveEntityPdu.setRequestID(System.UInt32)">
            <summary>
            Identifier for the request
            </summary>
        </member>
        <member name="M:DIS1998net.RemoveEntityPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.RemoveEntityPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.RemoveEntityPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.RemoveEntityPdu.equals(DIS1998net.RemoveEntityPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.IsGroupOfPdu">
             Section 5.3.9.2 Information about a particular group of entities grouped together for the purposes of netowrk bandwidth         reduction or aggregation. Needs manual cleanup. The GED size requires a database lookup. UNFINISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.IsGroupOfPdu._groupEntityID">
            ID of aggregated entities 
        </member>
        <member name="F:DIS1998net.IsGroupOfPdu._groupedEntityCategory">
            type of entities constituting the group 
        </member>
        <member name="F:DIS1998net.IsGroupOfPdu._numberOfGroupedEntities">
            Number of individual entities constituting the group 
        </member>
        <member name="F:DIS1998net.IsGroupOfPdu._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.IsGroupOfPdu._latitude">
            latitude 
        </member>
        <member name="F:DIS1998net.IsGroupOfPdu._longitude">
            longitude 
        </member>
        <member name="F:DIS1998net.IsGroupOfPdu._groupedEntityDescriptions">
            GED records about each individual entity in the group. ^^^this is wrong--need a database lookup to find the actual size of the list elements 
        </member>
        <member name="M:DIS1998net.IsGroupOfPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.9.2 Information about a particular group of entities grouped together for the purposes of netowrk bandwidth         reduction or aggregation. Needs manual cleanup. The GED size requires a database lookup. UNFINISHED
            </summary>
        </member>
        <member name="M:DIS1998net.IsGroupOfPdu.setGroupEntityID(DIS1998net.EntityID)">
            <summary>
            ID of aggregated entities
            </summary>
        </member>
        <member name="M:DIS1998net.IsGroupOfPdu.getGroupEntityID">
            <summary>
            ID of aggregated entities
            </summary>
        </member>
        <member name="M:DIS1998net.IsGroupOfPdu.setGroupedEntityCategory(System.Byte)">
            <summary>
            type of entities constituting the group
            </summary>
        </member>
        <member name="M:DIS1998net.IsGroupOfPdu.setNumberOfGroupedEntities(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfGroupedEntities method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.IsGroupOfPdu.setPad2(System.UInt32)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.IsGroupOfPdu.setLatitude(System.Double)">
            <summary>
            latitude
            </summary>
        </member>
        <member name="M:DIS1998net.IsGroupOfPdu.setLongitude(System.Double)">
            <summary>
            longitude
            </summary>
        </member>
        <member name="M:DIS1998net.IsGroupOfPdu.setGroupedEntityDescriptions(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            GED records about each individual entity in the group. ^^^this is wrong--need a database lookup to find the actual size of the list elements
            </summary>
        </member>
        <member name="M:DIS1998net.IsGroupOfPdu.getGroupedEntityDescriptions">
            <summary>
            GED records about each individual entity in the group. ^^^this is wrong--need a database lookup to find the actual size of the list elements
            </summary>
        </member>
        <member name="M:DIS1998net.IsGroupOfPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.IsGroupOfPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.IsGroupOfPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.IsGroupOfPdu.equals(DIS1998net.IsGroupOfPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.IsGroupOfPdu.GroupEntityID">
            <summary>
            ID of aggregated entities
            </summary>
        </member>
        <member name="P:DIS1998net.IsGroupOfPdu.NumberOfGroupedEntities">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfGroupedEntities method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.IsGroupOfPdu.GroupedEntityDescriptions">
            <summary>
            GED records about each individual entity in the group. ^^^this is wrong--need a database lookup to find the actual size of the list elements
            </summary>
        </member>
        <member name="T:DIS1998net.EntityID">
             Each entity in a given DIS simulation application shall be given an entity identifier number unique to all  other entities in that application. This identifier number is valid for the duration of the exercise; however,  entity identifier numbers may be reused when all possible numbers have been exhausted. No entity shall  have an entity identifier number of NO_ENTITY, ALL_ENTITIES, or RQST_ASSIGN_ID. The entity iden-  tifier number need not be registered or retained for future exercises. The entity identifier number shall be  specified by a 16-bit unsigned integer.  An entity identifier number equal to zero with valid site and application identification shall address a  simulation application. An entity identifier number equal to ALL_ENTITIES shall mean all entities within  the specified site and application. An entity identifier number equal to RQST_ASSIGN_ID allows the  receiver of the create entity to define the entity identifier number of the new entity.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.EntityID._site">
            The site ID 
        </member>
        <member name="F:DIS1998net.EntityID._application">
            The application ID 
        </member>
        <member name="F:DIS1998net.EntityID._entity">
            the entity ID 
        </member>
        <member name="M:DIS1998net.EntityID.#ctor">
            Constructor 
            <summary>
            Each entity in a given DIS simulation application shall be given an entity identifier number unique to all  other entities in that application. This identifier number is valid for the duration of the exercise; however,  entity identifier numbers may be reused when all possible numbers have been exhausted. No entity shall  have an entity identifier number of NO_ENTITY, ALL_ENTITIES, or RQST_ASSIGN_ID. The entity iden-  tifier number need not be registered or retained for future exercises. The entity identifier number shall be  specified by a 16-bit unsigned integer.  An entity identifier number equal to zero with valid site and application identification shall address a  simulation application. An entity identifier number equal to ALL_ENTITIES shall mean all entities within  the specified site and application. An entity identifier number equal to RQST_ASSIGN_ID allows the  receiver of the create entity to define the entity identifier number of the new entity.
            </summary>
        </member>
        <member name="M:DIS1998net.EntityID.setSite(System.UInt16)">
            <summary>
            The site ID
            </summary>
        </member>
        <member name="M:DIS1998net.EntityID.setApplication(System.UInt16)">
            <summary>
            The application ID
            </summary>
        </member>
        <member name="M:DIS1998net.EntityID.setEntity(System.UInt16)">
            <summary>
            the entity ID
            </summary>
        </member>
        <member name="M:DIS1998net.EntityID.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.EntityID.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.EntityID.equals(DIS1998net.EntityID)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DISnet.DataStreamUtilities.DataOutputStream">
            <summary>
            Class used to export PDU information from a DataStream
            </summary>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.#ctor(DISnet.DataStreamUtilities.EndianTypes.Endian)">
            <summary>
            Constructor to create the DataOutputStream
            </summary>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.#ctor(DISnet.DataStreamUtilities.DataStream,DISnet.DataStreamUtilities.EndianTypes.Endian)">
            <summary>
            Constructor to create a DataOutputStream from an existing DataStream and setting the type of Endian to use
            </summary>
            <param name="ds"></param>
            <param name="endian"></param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.writeShort(System.Int16)">
            <summary>
            Write a short value to the DataStream
            </summary>
            <param name="data">short value</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.writeFloat(System.Single)">
            <summary>
            Write a float value to the DataStream
            </summary>
            <param name="data">float</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.writeInt(System.Int32)">
            <summary>
            Write a int value to the DataStream
            </summary>
            <param name="data">int32</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.writeUshort(System.UInt16)">
            <summary>
            Write a unsigned short value to the DataStream
            </summary>
            <param name="data">unsigned short</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.writeUint(System.UInt32)">
            <summary>
            Write a unsigned int value to the DataStream
            </summary>
            <param name="data">unsigned int</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.writeByte(System.Byte)">
            <summary>
            Write a byte value to the DataStream
            </summary>
            <param name="data">byte</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.writeByte(System.Byte[])">
            <summary>
            Write a byte array value to the DataStream
            </summary>
            <param name="data">byte</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.writeDouble(System.Double)">
            <summary>
            Write a double value to the DataStream
            </summary>
            <param name="data">double</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.writeLong(System.Int64)">
            <summary>
            Write a long value to the DataStream
            </summary>
            <param name="data">long</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.writeUlong(System.UInt64)">
            <summary>
            Write a unsigned long value to the DataStream
            </summary>
            <param name="data">long</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.WriteData(System.Byte)">
            <summary>
            Base method to write a byte value to the DataStream
            </summary>
            <param name="data">byte</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.WriteData(System.Byte[])">
            <summary>
            Base method to write an array of bytes to the DataStream
            </summary>
            <param name="data">byte array</param>
        </member>
        <member name="M:DISnet.DataStreamUtilities.DataOutputStream.ConvertToBytes">
            <summary>
            Converts the DataStream to a byte array
            </summary>
            <returns>byte array</returns>
        </member>
        <member name="P:DISnet.DataStreamUtilities.DataOutputStream.Endian">
            <summary>
            Gets or Sets the Endian type
            </summary>
        </member>
        <member name="P:DISnet.DataStreamUtilities.DataOutputStream.DS">
            <summary>
            Get the underlining DataStream
            </summary>
        </member>
        <member name="T:DIS1998net.DataPdu">
             Section 5.3.6.10. Information issued in response to a data query pdu or a set data pdu is communicated using a data pdu. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.DataPdu._requestID">
            ID of request 
        </member>
        <member name="F:DIS1998net.DataPdu._padding1">
            padding 
        </member>
        <member name="F:DIS1998net.DataPdu._numberOfFixedDatumRecords">
            Number of fixed datum records 
        </member>
        <member name="F:DIS1998net.DataPdu._numberOfVariableDatumRecords">
            Number of variable datum records 
        </member>
        <member name="F:DIS1998net.DataPdu._fixedDatums">
            variable length list of fixed datums 
        </member>
        <member name="F:DIS1998net.DataPdu._variableDatums">
            variable length list of variable length datums 
        </member>
        <member name="M:DIS1998net.DataPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.6.10. Information issued in response to a data query pdu or a set data pdu is communicated using a data pdu. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.DataPdu.setRequestID(System.UInt32)">
            <summary>
            ID of request
            </summary>
        </member>
        <member name="M:DIS1998net.DataPdu.setPadding1(System.UInt32)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.DataPdu.setNumberOfFixedDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.DataPdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.DataPdu.setFixedDatums(System.Collections.Generic.List{DIS1998net.FixedDatum})">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="M:DIS1998net.DataPdu.getFixedDatums">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="M:DIS1998net.DataPdu.setVariableDatums(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="M:DIS1998net.DataPdu.getVariableDatums">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="M:DIS1998net.DataPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.DataPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.DataPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.DataPdu.equals(DIS1998net.DataPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.DataPdu.NumberOfFixedDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.DataPdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.DataPdu.FixedDatums">
            <summary>
            variable length list of fixed datums
            </summary>
        </member>
        <member name="P:DIS1998net.DataPdu.VariableDatums">
            <summary>
            variable length list of variable length datums
            </summary>
        </member>
        <member name="T:DIS1998net.TwoByteChunk">
             16 bit piece of data
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.TwoByteChunk._otherParameters">
            two bytes of arbitrary data 
        </member>
        <member name="M:DIS1998net.TwoByteChunk.#ctor">
            Constructor 
            <summary>
            16 bit piece of data
            </summary>
        </member>
        <member name="M:DIS1998net.TwoByteChunk.setOtherParameters(System.Byte[])">
            <summary>
            two bytes of arbitrary data
            </summary>
        </member>
        <member name="M:DIS1998net.TwoByteChunk.getOtherParameters">
            <summary>
            two bytes of arbitrary data
            </summary>
        </member>
        <member name="M:DIS1998net.TwoByteChunk.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.TwoByteChunk.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.TwoByteChunk.equals(DIS1998net.TwoByteChunk)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.TwoByteChunk.OtherParameters">
            <summary>
            two bytes of arbitrary data
            </summary>
        </member>
        <member name="T:DIS1998net.ResupplyCancelPdu">
             Section 5.2.5.4. Cancel of resupply by either the receiving or supplying entity. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ResupplyCancelPdu._receivingEntityID">
            Entity that is receiving service 
        </member>
        <member name="F:DIS1998net.ResupplyCancelPdu._supplyingEntityID">
            Entity that is supplying 
        </member>
        <member name="M:DIS1998net.ResupplyCancelPdu.#ctor">
            Constructor 
            <summary>
            Section 5.2.5.4. Cancel of resupply by either the receiving or supplying entity. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyCancelPdu.setReceivingEntityID(DIS1998net.EntityID)">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyCancelPdu.getReceivingEntityID">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyCancelPdu.setSupplyingEntityID(DIS1998net.EntityID)">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyCancelPdu.getSupplyingEntityID">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyCancelPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyCancelPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyCancelPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyCancelPdu.equals(DIS1998net.ResupplyCancelPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.ResupplyCancelPdu.ReceivingEntityID">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="P:DIS1998net.ResupplyCancelPdu.SupplyingEntityID">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="T:DIS1998net.LinearObjectStatePdu">
             Section 5.3.11.4: Information abut the addition or modification of a synthecic enviroment object that      is anchored to the terrain with a single point and has size or orientation. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.LinearObjectStatePdu._objectID">
            Object in synthetic environment 
        </member>
        <member name="F:DIS1998net.LinearObjectStatePdu._referencedObjectID">
            Object with which this point object is associated 
        </member>
        <member name="F:DIS1998net.LinearObjectStatePdu._updateNumber">
            unique update number of each state transition of an object 
        </member>
        <member name="F:DIS1998net.LinearObjectStatePdu._forceID">
            force ID 
        </member>
        <member name="F:DIS1998net.LinearObjectStatePdu._numberOfSegments">
            number of linear segment parameters 
        </member>
        <member name="F:DIS1998net.LinearObjectStatePdu._requesterID">
            requesterID 
        </member>
        <member name="F:DIS1998net.LinearObjectStatePdu._receivingID">
            receiver ID 
        </member>
        <member name="F:DIS1998net.LinearObjectStatePdu._objectType">
            Object type 
        </member>
        <member name="F:DIS1998net.LinearObjectStatePdu._linearSegmentParameters">
            Linear segment parameters 
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.11.4: Information abut the addition or modification of a synthecic enviroment object that      is anchored to the terrain with a single point and has size or orientation. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.setObjectID(DIS1998net.EntityID)">
            <summary>
            Object in synthetic environment
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.getObjectID">
            <summary>
            Object in synthetic environment
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.setReferencedObjectID(DIS1998net.EntityID)">
            <summary>
            Object with which this point object is associated
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.getReferencedObjectID">
            <summary>
            Object with which this point object is associated
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.setUpdateNumber(System.UInt16)">
            <summary>
            unique update number of each state transition of an object
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.setForceID(System.Byte)">
            <summary>
            force ID
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.setNumberOfSegments(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSegments method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.setRequesterID(DIS1998net.SimulationAddress)">
            <summary>
            requesterID
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.getRequesterID">
            <summary>
            requesterID
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.setReceivingID(DIS1998net.SimulationAddress)">
            <summary>
            receiver ID
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.getReceivingID">
            <summary>
            receiver ID
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.setObjectType(DIS1998net.ObjectType)">
            <summary>
            Object type
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.getObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.setLinearSegmentParameters(System.Collections.Generic.List{DIS1998net.LinearSegmentParameter})">
            <summary>
            Linear segment parameters
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.getLinearSegmentParameters">
            <summary>
            Linear segment parameters
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.LinearObjectStatePdu.equals(DIS1998net.LinearObjectStatePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.LinearObjectStatePdu.ObjectID">
            <summary>
            Object in synthetic environment
            </summary>
        </member>
        <member name="P:DIS1998net.LinearObjectStatePdu.ReferencedObjectID">
            <summary>
            Object with which this point object is associated
            </summary>
        </member>
        <member name="P:DIS1998net.LinearObjectStatePdu.NumberOfSegments">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSegments method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.LinearObjectStatePdu.RequesterID">
            <summary>
            requesterID
            </summary>
        </member>
        <member name="P:DIS1998net.LinearObjectStatePdu.ReceivingID">
            <summary>
            receiver ID
            </summary>
        </member>
        <member name="P:DIS1998net.LinearObjectStatePdu.ObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="P:DIS1998net.LinearObjectStatePdu.LinearSegmentParameters">
            <summary>
            Linear segment parameters
            </summary>
        </member>
        <member name="T:DIS1998net.FundamentalParameterData">
             Section 5.2.22. Contains electromagnetic emmision regineratin parameters that are        variable throughout a scenario dependent on the actions of the participants in the simulation. Also provides basic parametric data that may be used to support low-fidelity simulations.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.FundamentalParameterData._frequency">
            center frequency of the emission in hertz. 
        </member>
        <member name="F:DIS1998net.FundamentalParameterData._frequencyRange">
            Bandwidth of the frequencies corresponding to the fequency field. 
        </member>
        <member name="F:DIS1998net.FundamentalParameterData._effectiveRadiatedPower">
            Effective radiated power for the emission in DdBm. For a      radar noise jammer, indicates the peak of the transmitted power. 
        </member>
        <member name="F:DIS1998net.FundamentalParameterData._pulseRepetitionFrequency">
            Average repetition frequency of the emission in hertz. 
        </member>
        <member name="F:DIS1998net.FundamentalParameterData._pulseWidth">
            Average pulse width  of the emission in microseconds. 
        </member>
        <member name="F:DIS1998net.FundamentalParameterData._beamAzimuthCenter">
            Specifies the beam azimuth an elevation centers and corresponding half-angles     to describe the scan volume 
        </member>
        <member name="F:DIS1998net.FundamentalParameterData._beamAzimuthSweep">
            Specifies the beam azimuth sweep to determine scan volume 
        </member>
        <member name="F:DIS1998net.FundamentalParameterData._beamElevationCenter">
            Specifies the beam elevation center to determine scan volume 
        </member>
        <member name="F:DIS1998net.FundamentalParameterData._beamElevationSweep">
            Specifies the beam elevation sweep to determine scan volume 
        </member>
        <member name="F:DIS1998net.FundamentalParameterData._beamSweepSync">
            allows receiver to synchronize its regenerated scan pattern to     that of the emmitter. Specifies the percentage of time a scan is through its pattern from its origion. 
        </member>
        <member name="M:DIS1998net.FundamentalParameterData.#ctor">
            Constructor 
            <summary>
            Section 5.2.22. Contains electromagnetic emmision regineratin parameters that are        variable throughout a scenario dependent on the actions of the participants in the simulation. Also provides basic parametric data that may be used to support low-fidelity simulations.
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterData.setFrequency(System.Single)">
            <summary>
            center frequency of the emission in hertz.
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterData.setFrequencyRange(System.Single)">
            <summary>
            Bandwidth of the frequencies corresponding to the fequency field.
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterData.setEffectiveRadiatedPower(System.Single)">
            <summary>
            Effective radiated power for the emission in DdBm. For a      radar noise jammer, indicates the peak of the transmitted power.
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterData.setPulseRepetitionFrequency(System.Single)">
            <summary>
            Average repetition frequency of the emission in hertz.
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterData.setPulseWidth(System.Single)">
            <summary>
            Average pulse width  of the emission in microseconds.
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterData.setBeamAzimuthCenter(System.Single)">
            <summary>
            Specifies the beam azimuth an elevation centers and corresponding half-angles     to describe the scan volume
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterData.setBeamAzimuthSweep(System.Single)">
            <summary>
            Specifies the beam azimuth sweep to determine scan volume
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterData.setBeamElevationCenter(System.Single)">
            <summary>
            Specifies the beam elevation center to determine scan volume
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterData.setBeamElevationSweep(System.Single)">
            <summary>
            Specifies the beam elevation sweep to determine scan volume
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterData.setBeamSweepSync(System.Single)">
            <summary>
            allows receiver to synchronize its regenerated scan pattern to     that of the emmitter. Specifies the percentage of time a scan is through its pattern from its origion.
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterData.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterData.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.FundamentalParameterData.equals(DIS1998net.FundamentalParameterData)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.ElectronicEmissionBeamData">
             Description of one electronic emission beam
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ElectronicEmissionBeamData._beamDataLength">
            This field shall specify the length of this beams data in 32 bit words 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionBeamData._beamIDNumber">
            This field shall specify a unique emitter database number assigned to differentiate between otherwise similar or identical emitter beams within an emitter system. 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionBeamData._beamParameterIndex">
            This field shall specify a Beam Parameter Index number that shall be used by receiving entities in conjunction with the Emitter Name field to provide a pointer to the stored database parameters required to regenerate the beam.  
        </member>
        <member name="F:DIS1998net.ElectronicEmissionBeamData._fundamentalParameterData">
            Fundamental parameter data such as frequency range, beam sweep, etc. 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionBeamData._beamFunction">
            beam function of a particular beam 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionBeamData._numberOfTrackJamTargets">
            Number of track/jam targets 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionBeamData._highDensityTrackJam">
            wheher or not the receiving simulation apps can assume all the targets in the scan pattern are being tracked/jammed 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionBeamData._pad4">
            padding 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionBeamData._jammingModeSequence">
            identify jamming techniques used 
        </member>
        <member name="F:DIS1998net.ElectronicEmissionBeamData._trackJamTargets">
            variable length list of track/jam targets 
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.#ctor">
            Constructor 
            <summary>
            Description of one electronic emission beam
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.setBeamDataLength(System.Byte)">
            <summary>
            This field shall specify the length of this beams data in 32 bit words
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.setBeamIDNumber(System.Byte)">
            <summary>
            This field shall specify a unique emitter database number assigned to differentiate between otherwise similar or identical emitter beams within an emitter system.
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.setBeamParameterIndex(System.UInt16)">
            <summary>
            This field shall specify a Beam Parameter Index number that shall be used by receiving entities in conjunction with the Emitter Name field to provide a pointer to the stored database parameters required to regenerate the beam. 
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.setFundamentalParameterData(DIS1998net.FundamentalParameterData)">
            <summary>
            Fundamental parameter data such as frequency range, beam sweep, etc.
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.getFundamentalParameterData">
            <summary>
            Fundamental parameter data such as frequency range, beam sweep, etc.
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.setBeamFunction(System.Byte)">
            <summary>
            beam function of a particular beam
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.setNumberOfTrackJamTargets(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfTrackJamTargets method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.setHighDensityTrackJam(System.Byte)">
            <summary>
            wheher or not the receiving simulation apps can assume all the targets in the scan pattern are being tracked/jammed
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.setPad4(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.setJammingModeSequence(System.UInt32)">
            <summary>
            identify jamming techniques used
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.setTrackJamTargets(System.Collections.Generic.List{DIS1998net.TrackJamTarget})">
            <summary>
            variable length list of track/jam targets
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.getTrackJamTargets">
            <summary>
            variable length list of track/jam targets
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ElectronicEmissionBeamData.equals(DIS1998net.ElectronicEmissionBeamData)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.ElectronicEmissionBeamData.FundamentalParameterData">
            <summary>
            Fundamental parameter data such as frequency range, beam sweep, etc.
            </summary>
        </member>
        <member name="P:DIS1998net.ElectronicEmissionBeamData.NumberOfTrackJamTargets">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfTrackJamTargets method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.ElectronicEmissionBeamData.TrackJamTargets">
            <summary>
            variable length list of track/jam targets
            </summary>
        </member>
        <member name="T:DIS1998net.DetonationPdu">
             Section 5.3.4.2. Information about stuff exploding. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.DetonationPdu._munitionID">
            ID of muntion that was fired 
        </member>
        <member name="F:DIS1998net.DetonationPdu._eventID">
            ID firing event 
        </member>
        <member name="F:DIS1998net.DetonationPdu._velocity">
            ID firing event 
        </member>
        <member name="F:DIS1998net.DetonationPdu._locationInWorldCoordinates">
            where the detonation is, in world coordinates 
        </member>
        <member name="F:DIS1998net.DetonationPdu._burstDescriptor">
            Describes munition used 
        </member>
        <member name="F:DIS1998net.DetonationPdu._locationInEntityCoordinates">
            location of the detonation or impact in the target entity's coordinate system. This information should be used for damage assessment. 
        </member>
        <member name="F:DIS1998net.DetonationPdu._detonationResult">
            result of the explosion 
        </member>
        <member name="F:DIS1998net.DetonationPdu._numberOfArticulationParameters">
            How many articulation parameters we have 
        </member>
        <member name="F:DIS1998net.DetonationPdu._pad">
            padding 
        </member>
        <member name="M:DIS1998net.DetonationPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.4.2. Information about stuff exploding. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.setMunitionID(DIS1998net.EntityID)">
            <summary>
            ID of muntion that was fired
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.getMunitionID">
            <summary>
            ID of muntion that was fired
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.setEventID(DIS1998net.EventID)">
            <summary>
            ID firing event
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.getEventID">
            <summary>
            ID firing event
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.setVelocity(DIS1998net.Vector3Float)">
            <summary>
            ID firing event
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.getVelocity">
            <summary>
            ID firing event
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.setLocationInWorldCoordinates(DIS1998net.Vector3Double)">
            <summary>
            where the detonation is, in world coordinates
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.getLocationInWorldCoordinates">
            <summary>
            where the detonation is, in world coordinates
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.setBurstDescriptor(DIS1998net.BurstDescriptor)">
            <summary>
            Describes munition used
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.getBurstDescriptor">
            <summary>
            Describes munition used
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.setLocationInEntityCoordinates(DIS1998net.Vector3Float)">
            <summary>
            location of the detonation or impact in the target entity's coordinate system. This information should be used for damage assessment.
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.getLocationInEntityCoordinates">
            <summary>
            location of the detonation or impact in the target entity's coordinate system. This information should be used for damage assessment.
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.setDetonationResult(System.Byte)">
            <summary>
            result of the explosion
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.setNumberOfArticulationParameters(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfArticulationParameters method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.setPad(System.Int16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.DetonationPdu.equals(DIS1998net.DetonationPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.DetonationPdu.MunitionID">
            <summary>
            ID of muntion that was fired
            </summary>
        </member>
        <member name="P:DIS1998net.DetonationPdu.EventID">
            <summary>
            ID firing event
            </summary>
        </member>
        <member name="P:DIS1998net.DetonationPdu.Velocity">
            <summary>
            ID firing event
            </summary>
        </member>
        <member name="P:DIS1998net.DetonationPdu.LocationInWorldCoordinates">
            <summary>
            where the detonation is, in world coordinates
            </summary>
        </member>
        <member name="P:DIS1998net.DetonationPdu.BurstDescriptor">
            <summary>
            Describes munition used
            </summary>
        </member>
        <member name="P:DIS1998net.DetonationPdu.LocationInEntityCoordinates">
            <summary>
            location of the detonation or impact in the target entity's coordinate system. This information should be used for damage assessment.
            </summary>
        </member>
        <member name="P:DIS1998net.DetonationPdu.NumberOfArticulationParameters">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfArticulationParameters method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="T:DIS1998net.ArticulationParameter">
             Section 5.2.5. Articulation parameters for  movable parts and attached parts of an entity. Specifes wether or not a change has occured,  the part identifcation of the articulated part to which it is attached, and the type and value of each parameter.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="M:DIS1998net.ArticulationParameter.#ctor">
            Constructor 
            <summary>
            Section 5.2.5. Articulation parameters for  movable parts and attached parts of an entity. Specifes wether or not a change has occured,  the part identifcation of the articulated part to which it is attached, and the type and value of each parameter.
            </summary>
        </member>
        <member name="M:DIS1998net.ArticulationParameter.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ArticulationParameter.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ArticulationParameter.equals(DIS1998net.ArticulationParameter)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.StopFreezeReliablePdu">
             Section 5.3.12.4: Stop freeze simulation, relaible. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.StopFreezeReliablePdu._realWorldTime">
            time in real world for this operation to happen 
        </member>
        <member name="F:DIS1998net.StopFreezeReliablePdu._reason">
            Reason for stopping/freezing simulation 
        </member>
        <member name="F:DIS1998net.StopFreezeReliablePdu._frozenBehavior">
            internal behvior of the simulation while frozen 
        </member>
        <member name="F:DIS1998net.StopFreezeReliablePdu._requiredReliablityService">
            reliablity level 
        </member>
        <member name="F:DIS1998net.StopFreezeReliablePdu._pad1">
            padding 
        </member>
        <member name="F:DIS1998net.StopFreezeReliablePdu._requestID">
            Request ID 
        </member>
        <member name="M:DIS1998net.StopFreezeReliablePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12.4: Stop freeze simulation, relaible. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezeReliablePdu.setRealWorldTime(DIS1998net.ClockTime)">
            <summary>
            time in real world for this operation to happen
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezeReliablePdu.getRealWorldTime">
            <summary>
            time in real world for this operation to happen
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezeReliablePdu.setReason(System.Byte)">
            <summary>
            Reason for stopping/freezing simulation
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezeReliablePdu.setFrozenBehavior(System.Byte)">
            <summary>
            internal behvior of the simulation while frozen
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezeReliablePdu.setRequiredReliablityService(System.Byte)">
            <summary>
            reliablity level
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezeReliablePdu.setPad1(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezeReliablePdu.setRequestID(System.UInt32)">
            <summary>
            Request ID
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezeReliablePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezeReliablePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezeReliablePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezeReliablePdu.equals(DIS1998net.StopFreezeReliablePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.StopFreezeReliablePdu.RealWorldTime">
            <summary>
            time in real world for this operation to happen
            </summary>
        </member>
        <member name="T:DIS1998net.ResupplyReceivedPdu">
             Section 5.3.5.3. Receipt of supplies is communiated. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ResupplyReceivedPdu._receivingEntityID">
            Entity that is receiving service 
        </member>
        <member name="F:DIS1998net.ResupplyReceivedPdu._supplyingEntityID">
            Entity that is supplying 
        </member>
        <member name="F:DIS1998net.ResupplyReceivedPdu._numberOfSupplyTypes">
            how many supplies are being offered 
        </member>
        <member name="F:DIS1998net.ResupplyReceivedPdu._padding1">
            padding 
        </member>
        <member name="F:DIS1998net.ResupplyReceivedPdu._padding2">
            padding 
        </member>
        <member name="M:DIS1998net.ResupplyReceivedPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.5.3. Receipt of supplies is communiated. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyReceivedPdu.setReceivingEntityID(DIS1998net.EntityID)">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyReceivedPdu.getReceivingEntityID">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyReceivedPdu.setSupplyingEntityID(DIS1998net.EntityID)">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyReceivedPdu.getSupplyingEntityID">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyReceivedPdu.setNumberOfSupplyTypes(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSupplyTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyReceivedPdu.setPadding1(System.Int16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyReceivedPdu.setPadding2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyReceivedPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyReceivedPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyReceivedPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ResupplyReceivedPdu.equals(DIS1998net.ResupplyReceivedPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.ResupplyReceivedPdu.ReceivingEntityID">
            <summary>
            Entity that is receiving service
            </summary>
        </member>
        <member name="P:DIS1998net.ResupplyReceivedPdu.SupplyingEntityID">
            <summary>
            Entity that is supplying
            </summary>
        </member>
        <member name="P:DIS1998net.ResupplyReceivedPdu.NumberOfSupplyTypes">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfSupplyTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="T:DIS1998net.FixedDatum">
             Section 5.2.18. Fixed Datum Record
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.FixedDatum._fixedDatumID">
            ID of the fixed datum 
        </member>
        <member name="F:DIS1998net.FixedDatum._fixedDatumValue">
            Value for the fixed datum 
        </member>
        <member name="M:DIS1998net.FixedDatum.#ctor">
            Constructor 
            <summary>
            Section 5.2.18. Fixed Datum Record
            </summary>
        </member>
        <member name="M:DIS1998net.FixedDatum.setFixedDatumID(System.UInt32)">
            <summary>
            ID of the fixed datum
            </summary>
        </member>
        <member name="M:DIS1998net.FixedDatum.setFixedDatumValue(System.UInt32)">
            <summary>
            Value for the fixed datum
            </summary>
        </member>
        <member name="M:DIS1998net.FixedDatum.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.FixedDatum.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.FixedDatum.equals(DIS1998net.FixedDatum)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.DesignatorPdu">
             Section 5.3.7.2. Handles designating operations. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.DesignatorPdu._designatingEntityID">
            ID of the entity designating 
        </member>
        <member name="F:DIS1998net.DesignatorPdu._codeName">
            This field shall specify a unique emitter database number assigned to  differentiate between otherwise similar or identical emitter beams within an emitter system. 
        </member>
        <member name="F:DIS1998net.DesignatorPdu._designatedEntityID">
            ID of the entity being designated 
        </member>
        <member name="F:DIS1998net.DesignatorPdu._designatorCode">
            This field shall identify the designator code being used by the designating entity  
        </member>
        <member name="F:DIS1998net.DesignatorPdu._designatorPower">
            This field shall identify the designator output power in watts 
        </member>
        <member name="F:DIS1998net.DesignatorPdu._designatorWavelength">
            This field shall identify the designator wavelength in units of microns 
        </member>
        <member name="F:DIS1998net.DesignatorPdu._designatorSpotWrtDesignated">
            designtor spot wrt the designated entity 
        </member>
        <member name="F:DIS1998net.DesignatorPdu._designatorSpotLocation">
            designtor spot wrt the designated entity 
        </member>
        <member name="F:DIS1998net.DesignatorPdu._deadReckoningAlgorithm">
            Dead reckoning algorithm 
        </member>
        <member name="F:DIS1998net.DesignatorPdu._padding1">
            padding 
        </member>
        <member name="F:DIS1998net.DesignatorPdu._padding2">
            padding 
        </member>
        <member name="F:DIS1998net.DesignatorPdu._entityLinearAcceleration">
            linear accelleration of entity 
        </member>
        <member name="M:DIS1998net.DesignatorPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.7.2. Handles designating operations. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.setDesignatingEntityID(DIS1998net.EntityID)">
            <summary>
            ID of the entity designating
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.getDesignatingEntityID">
            <summary>
            ID of the entity designating
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.setCodeName(System.UInt16)">
            <summary>
            This field shall specify a unique emitter database number assigned to  differentiate between otherwise similar or identical emitter beams within an emitter system.
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.setDesignatedEntityID(DIS1998net.EntityID)">
            <summary>
            ID of the entity being designated
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.getDesignatedEntityID">
            <summary>
            ID of the entity being designated
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.setDesignatorCode(System.UInt16)">
            <summary>
            This field shall identify the designator code being used by the designating entity 
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.setDesignatorPower(System.Single)">
            <summary>
            This field shall identify the designator output power in watts
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.setDesignatorWavelength(System.Single)">
            <summary>
            This field shall identify the designator wavelength in units of microns
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.setDesignatorSpotWrtDesignated(DIS1998net.Vector3Float)">
            <summary>
            designtor spot wrt the designated entity
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.getDesignatorSpotWrtDesignated">
            <summary>
            designtor spot wrt the designated entity
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.setDesignatorSpotLocation(DIS1998net.Vector3Double)">
            <summary>
            designtor spot wrt the designated entity
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.getDesignatorSpotLocation">
            <summary>
            designtor spot wrt the designated entity
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.setDeadReckoningAlgorithm(System.Byte)">
            <summary>
            Dead reckoning algorithm
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.setPadding1(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.setPadding2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.setEntityLinearAcceleration(DIS1998net.Vector3Float)">
            <summary>
            linear accelleration of entity
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.getEntityLinearAcceleration">
            <summary>
            linear accelleration of entity
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.DesignatorPdu.equals(DIS1998net.DesignatorPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.DesignatorPdu.DesignatingEntityID">
            <summary>
            ID of the entity designating
            </summary>
        </member>
        <member name="P:DIS1998net.DesignatorPdu.DesignatedEntityID">
            <summary>
            ID of the entity being designated
            </summary>
        </member>
        <member name="P:DIS1998net.DesignatorPdu.DesignatorSpotWrtDesignated">
            <summary>
            designtor spot wrt the designated entity
            </summary>
        </member>
        <member name="P:DIS1998net.DesignatorPdu.DesignatorSpotLocation">
            <summary>
            designtor spot wrt the designated entity
            </summary>
        </member>
        <member name="P:DIS1998net.DesignatorPdu.EntityLinearAcceleration">
            <summary>
            linear accelleration of entity
            </summary>
        </member>
        <member name="T:DIS1998net.DataReliablePdu">
             Section 5.3.12.10: issued in response to a data query R or set dataR pdu. Needs manual intervention      to fix padding on variable datums. UNFINSIHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.DataReliablePdu._requestID">
            Request ID 
        </member>
        <member name="F:DIS1998net.DataReliablePdu._requiredReliabilityService">
            level of reliability service used for this transaction 
        </member>
        <member name="F:DIS1998net.DataReliablePdu._pad1">
            padding 
        </member>
        <member name="F:DIS1998net.DataReliablePdu._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.DataReliablePdu._numberOfFixedDatumRecords">
            Fixed datum record count 
        </member>
        <member name="F:DIS1998net.DataReliablePdu._numberOfVariableDatumRecords">
            variable datum record count 
        </member>
        <member name="F:DIS1998net.DataReliablePdu._fixedDatumRecords">
            Fixed datum records 
        </member>
        <member name="F:DIS1998net.DataReliablePdu._variableDatumRecords">
            Variable datum records 
        </member>
        <member name="M:DIS1998net.DataReliablePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12.10: issued in response to a data query R or set dataR pdu. Needs manual intervention      to fix padding on variable datums. UNFINSIHED
            </summary>
        </member>
        <member name="M:DIS1998net.DataReliablePdu.setRequestID(System.UInt32)">
            <summary>
            Request ID
            </summary>
        </member>
        <member name="M:DIS1998net.DataReliablePdu.setRequiredReliabilityService(System.Byte)">
            <summary>
            level of reliability service used for this transaction
            </summary>
        </member>
        <member name="M:DIS1998net.DataReliablePdu.setPad1(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.DataReliablePdu.setPad2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.DataReliablePdu.setNumberOfFixedDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.DataReliablePdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.DataReliablePdu.setFixedDatumRecords(System.Collections.Generic.List{DIS1998net.FixedDatum})">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="M:DIS1998net.DataReliablePdu.getFixedDatumRecords">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="M:DIS1998net.DataReliablePdu.setVariableDatumRecords(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="M:DIS1998net.DataReliablePdu.getVariableDatumRecords">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="M:DIS1998net.DataReliablePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.DataReliablePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.DataReliablePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.DataReliablePdu.equals(DIS1998net.DataReliablePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.DataReliablePdu.NumberOfFixedDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.DataReliablePdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.DataReliablePdu.FixedDatumRecords">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="P:DIS1998net.DataReliablePdu.VariableDatumRecords">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="T:DIS1998net.AntennaLocation">
             5.2.3: location of the radiating portion of the antenna, specified in world coordinates and         entity coordinates.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.AntennaLocation._antennaLocation">
            Location of the radiating portion of the antenna in world    coordinates 
        </member>
        <member name="F:DIS1998net.AntennaLocation._relativeAntennaLocation">
            Location of the radiating portion of the antenna     in entity coordinates 
        </member>
        <member name="M:DIS1998net.AntennaLocation.#ctor">
            Constructor 
            <summary>
            5.2.3: location of the radiating portion of the antenna, specified in world coordinates and         entity coordinates.
            </summary>
        </member>
        <member name="M:DIS1998net.AntennaLocation.setAntennaLocation(DIS1998net.Vector3Double)">
            <summary>
            Location of the radiating portion of the antenna in world    coordinates
            </summary>
        </member>
        <member name="M:DIS1998net.AntennaLocation.getAntennaLocation">
            <summary>
            Location of the radiating portion of the antenna in world    coordinates
            </summary>
        </member>
        <member name="M:DIS1998net.AntennaLocation.setRelativeAntennaLocation(DIS1998net.Vector3Float)">
            <summary>
            Location of the radiating portion of the antenna     in entity coordinates
            </summary>
        </member>
        <member name="M:DIS1998net.AntennaLocation.getRelativeAntennaLocation">
            <summary>
            Location of the radiating portion of the antenna     in entity coordinates
            </summary>
        </member>
        <member name="M:DIS1998net.AntennaLocation.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.AntennaLocation.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.AntennaLocation.equals(DIS1998net.AntennaLocation)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.AntennaLocation.AntennaLocation_">
            <summary>
            Location of the radiating portion of the antenna in world    coordinates
            </summary>
        </member>
        <member name="P:DIS1998net.AntennaLocation.RelativeAntennaLocation">
            <summary>
            Location of the radiating portion of the antenna     in entity coordinates
            </summary>
        </member>
        <member name="T:DIS1998net.ActionResponseReliablePdu">
             Section 5.3.12.7: Response from an entity to an action request PDU. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ActionResponseReliablePdu._requestID">
            request ID 
        </member>
        <member name="F:DIS1998net.ActionResponseReliablePdu._responseStatus">
            status of response 
        </member>
        <member name="F:DIS1998net.ActionResponseReliablePdu._numberOfFixedDatumRecords">
            Fixed datum record count 
        </member>
        <member name="F:DIS1998net.ActionResponseReliablePdu._numberOfVariableDatumRecords">
            variable datum record count 
        </member>
        <member name="F:DIS1998net.ActionResponseReliablePdu._fixedDatumRecords">
            Fixed datum records 
        </member>
        <member name="F:DIS1998net.ActionResponseReliablePdu._variableDatumRecords">
            Variable datum records 
        </member>
        <member name="M:DIS1998net.ActionResponseReliablePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12.7: Response from an entity to an action request PDU. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponseReliablePdu.setRequestID(System.UInt32)">
            <summary>
            request ID
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponseReliablePdu.setResponseStatus(System.UInt32)">
            <summary>
            status of response
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponseReliablePdu.setNumberOfFixedDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponseReliablePdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponseReliablePdu.setFixedDatumRecords(System.Collections.Generic.List{DIS1998net.FixedDatum})">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponseReliablePdu.getFixedDatumRecords">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponseReliablePdu.setVariableDatumRecords(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponseReliablePdu.getVariableDatumRecords">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponseReliablePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponseReliablePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponseReliablePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ActionResponseReliablePdu.equals(DIS1998net.ActionResponseReliablePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.ActionResponseReliablePdu.NumberOfFixedDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.ActionResponseReliablePdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.ActionResponseReliablePdu.FixedDatumRecords">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="P:DIS1998net.ActionResponseReliablePdu.VariableDatumRecords">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="F:DISnet.Utilities.Conversion.ARTICULATION_PARAMETER_TYPE_METRIC_MASK">
            the mask that will leave only the typemetric
            from an integer representing the Articulation Parameter's parameter type.
            this mask is based on the IEEE Std 1278.1-1995
        </member>
        <member name="F:DISnet.Utilities.Conversion.ARTICULATION_PARAMETER_TYPE_METRIC_NUMBER_OF_BITS">
            the number of bits used to store the type metric value
            within the Articulation Parameter's parameter type value.
            this mask is based on the IEEE Std 1278.1-1995
        </member>
        <member name="M:DISnet.Utilities.Conversion.MakeArticulationParameterType(System.UInt32,System.UInt32)">
            make the value needed for the ArticulationParameter's Parameter Type.
            @param typeclass the enumeration for the articulated part.
            This must have less precision than ARTICULATION_PARAMETER_TYPE_METRIC_NUMBER_OF_BITS.
            @param typemetric the enumeration for the motion description.
            this must have less precision than 32 - ARTICULATION_PARAMETER_TYPE_METRIC_NUMBER_OF_BITS.
            @return the value to be used as the Parameter Type, with 32 bits precision.
        </member>
        <member name="M:DISnet.Utilities.Conversion.GetArticulationTypeMetric(System.Int32)">
            extract the data for the type metric value stored within the parameter type value.
            this an inverse to the function, MakeArticulationParameterType.
            @param parametertype the value storing the type metric and type class values.
            @return the type metric value, with ARTICULATION_PARAMETER_TYPE_METRIC_NUMBER_OF_BITS bits precision.
        </member>
        <member name="M:DISnet.Utilities.Conversion.GetArticulationTypeClass(System.Int32)">
            extract the data for the type class value stored within the parameter type value.
            this an inverse to the function, MakeArticulationParameterType.
            @param parametertype the value storing the type metric and type class values.
            @return the type class value, with ARTICULATION_PARAMETER_TYPE_METRIC_NUMBER_OF_BITS bits precision
        </member>
        <member name="T:DIS1998net.MinefieldStatePdu">
             Section 5.3.10.1 Abstract superclass for PDUs relating to minefields. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.MinefieldStatePdu._minefieldID">
            Minefield ID 
        </member>
        <member name="F:DIS1998net.MinefieldStatePdu._minefieldSequence">
            Minefield sequence 
        </member>
        <member name="F:DIS1998net.MinefieldStatePdu._forceID">
            force ID 
        </member>
        <member name="F:DIS1998net.MinefieldStatePdu._numberOfPerimeterPoints">
            Number of permieter points 
        </member>
        <member name="F:DIS1998net.MinefieldStatePdu._minefieldType">
            type of minefield 
        </member>
        <member name="F:DIS1998net.MinefieldStatePdu._numberOfMineTypes">
            how many mine types 
        </member>
        <member name="F:DIS1998net.MinefieldStatePdu._minefieldLocation">
            location of minefield in world coords 
        </member>
        <member name="F:DIS1998net.MinefieldStatePdu._minefieldOrientation">
            orientation of minefield 
        </member>
        <member name="F:DIS1998net.MinefieldStatePdu._appearance">
            appearance bitflags 
        </member>
        <member name="F:DIS1998net.MinefieldStatePdu._protocolMode">
            protocolMode 
        </member>
        <member name="F:DIS1998net.MinefieldStatePdu._perimeterPoints">
            perimeter points for the minefield 
        </member>
        <member name="F:DIS1998net.MinefieldStatePdu._mineType">
            Type of mines 
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.10.1 Abstract superclass for PDUs relating to minefields. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.setMinefieldID(DIS1998net.EntityID)">
            <summary>
            Minefield ID
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.getMinefieldID">
            <summary>
            Minefield ID
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.setMinefieldSequence(System.UInt16)">
            <summary>
            Minefield sequence
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.setForceID(System.Byte)">
            <summary>
            force ID
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.setNumberOfPerimeterPoints(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfPerimeterPoints method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.setMinefieldType(DIS1998net.EntityType)">
            <summary>
            type of minefield
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.getMinefieldType">
            <summary>
            type of minefield
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.setNumberOfMineTypes(System.UInt16)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfMineTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.setMinefieldLocation(DIS1998net.Vector3Double)">
            <summary>
            location of minefield in world coords
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.getMinefieldLocation">
            <summary>
            location of minefield in world coords
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.setMinefieldOrientation(DIS1998net.Orientation)">
            <summary>
            orientation of minefield
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.getMinefieldOrientation">
            <summary>
            orientation of minefield
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.setAppearance(System.UInt16)">
            <summary>
            appearance bitflags
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.setProtocolMode(System.UInt16)">
            <summary>
            protocolMode
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.setPerimeterPoints(System.Collections.Generic.List{DIS1998net.Point})">
            <summary>
            perimeter points for the minefield
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.getPerimeterPoints">
            <summary>
            perimeter points for the minefield
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.setMineType(System.Collections.Generic.List{DIS1998net.EntityType})">
            <summary>
            Type of mines
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.getMineType">
            <summary>
            Type of mines
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.MinefieldStatePdu.equals(DIS1998net.MinefieldStatePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.MinefieldStatePdu.MinefieldID">
            <summary>
            Minefield ID
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldStatePdu.NumberOfPerimeterPoints">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfPerimeterPoints method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldStatePdu.MinefieldType">
            <summary>
            type of minefield
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldStatePdu.NumberOfMineTypes">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfMineTypes method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldStatePdu.MinefieldLocation">
            <summary>
            location of minefield in world coords
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldStatePdu.MinefieldOrientation">
            <summary>
            orientation of minefield
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldStatePdu.PerimeterPoints">
            <summary>
            perimeter points for the minefield
            </summary>
        </member>
        <member name="P:DIS1998net.MinefieldStatePdu.MineType">
            <summary>
            Type of mines
            </summary>
        </member>
        <member name="T:DIS1998net.Marking">
             Section 5.2.15. Specifies the character set used inthe first byte, followed by 11 characters of text data.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.Marking._characterSet">
            The character set 
        </member>
        <member name="F:DIS1998net.Marking._characters">
            The characters 
        </member>
        <member name="M:DIS1998net.Marking.#ctor">
            Constructor 
            <summary>
            Section 5.2.15. Specifies the character set used inthe first byte, followed by 11 characters of text data.
            </summary>
        </member>
        <member name="M:DIS1998net.Marking.setCharacterSet(System.Byte)">
            <summary>
            The character set
            </summary>
        </member>
        <member name="M:DIS1998net.Marking.setCharacters(System.Byte[])">
            <summary>
            The characters
            </summary>
        </member>
        <member name="M:DIS1998net.Marking.getCharacters">
            <summary>
            The characters
            </summary>
        </member>
        <member name="M:DIS1998net.Marking.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.Marking.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.Marking.equals(DIS1998net.Marking)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.Marking.Characters">
            <summary>
            The characters
            </summary>
        </member>
        <member name="T:DIS1998net.IffFundamentalData">
             5.2.42. Basic operational data ofr IFF ATC NAVAIDS
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.IffFundamentalData._systemStatus">
            system status 
        </member>
        <member name="F:DIS1998net.IffFundamentalData._alternateParameter4">
            Alternate parameter 4 
        </member>
        <member name="F:DIS1998net.IffFundamentalData._informationLayers">
            eight boolean fields 
        </member>
        <member name="F:DIS1998net.IffFundamentalData._modifier">
            enumeration 
        </member>
        <member name="F:DIS1998net.IffFundamentalData._parameter1">
            parameter, enumeration 
        </member>
        <member name="F:DIS1998net.IffFundamentalData._parameter2">
            parameter, enumeration 
        </member>
        <member name="F:DIS1998net.IffFundamentalData._parameter3">
            parameter, enumeration 
        </member>
        <member name="F:DIS1998net.IffFundamentalData._parameter4">
            parameter, enumeration 
        </member>
        <member name="F:DIS1998net.IffFundamentalData._parameter5">
            parameter, enumeration 
        </member>
        <member name="F:DIS1998net.IffFundamentalData._parameter6">
            parameter, enumeration 
        </member>
        <member name="M:DIS1998net.IffFundamentalData.#ctor">
            Constructor 
            <summary>
            5.2.42. Basic operational data ofr IFF ATC NAVAIDS
            </summary>
        </member>
        <member name="M:DIS1998net.IffFundamentalData.setSystemStatus(System.Byte)">
            <summary>
            system status
            </summary>
        </member>
        <member name="M:DIS1998net.IffFundamentalData.setAlternateParameter4(System.Byte)">
            <summary>
            Alternate parameter 4
            </summary>
        </member>
        <member name="M:DIS1998net.IffFundamentalData.setInformationLayers(System.Byte)">
            <summary>
            eight boolean fields
            </summary>
        </member>
        <member name="M:DIS1998net.IffFundamentalData.setModifier(System.Byte)">
            <summary>
            enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.IffFundamentalData.setParameter1(System.UInt16)">
            <summary>
            parameter, enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.IffFundamentalData.setParameter2(System.UInt16)">
            <summary>
            parameter, enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.IffFundamentalData.setParameter3(System.UInt16)">
            <summary>
            parameter, enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.IffFundamentalData.setParameter4(System.UInt16)">
            <summary>
            parameter, enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.IffFundamentalData.setParameter5(System.UInt16)">
            <summary>
            parameter, enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.IffFundamentalData.setParameter6(System.UInt16)">
            <summary>
            parameter, enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.IffFundamentalData.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.IffFundamentalData.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.IffFundamentalData.equals(DIS1998net.IffFundamentalData)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.IffAtcNavAidsLayer2Pdu">
             Section 5.3.7.4.2 When present, layer 2 should follow layer 1 and have the following fields. This requires manual cleanup.        the beamData attribute semantics are used in multiple ways. UNFINSISHED
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="T:DIS1998net.IffAtcNavAidsLayer1Pdu">
             5.3.7.4.1: Navigational and IFF PDU. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.IffAtcNavAidsLayer1Pdu._emittingEntityId">
            ID of the entity that is the source of the emissions 
        </member>
        <member name="F:DIS1998net.IffAtcNavAidsLayer1Pdu._eventID">
            Number generated by the issuing simulation to associate realted events. 
        </member>
        <member name="F:DIS1998net.IffAtcNavAidsLayer1Pdu._location">
            Location wrt entity. There is some ambugiuity in the standard here, but this is the order it is listed in the table. 
        </member>
        <member name="F:DIS1998net.IffAtcNavAidsLayer1Pdu._systemID">
            System ID information 
        </member>
        <member name="F:DIS1998net.IffAtcNavAidsLayer1Pdu._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.IffAtcNavAidsLayer1Pdu._fundamentalParameters">
            fundamental parameters 
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.#ctor">
            Constructor 
            <summary>
            5.3.7.4.1: Navigational and IFF PDU. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.setEmittingEntityId(DIS1998net.EntityID)">
            <summary>
            ID of the entity that is the source of the emissions
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.getEmittingEntityId">
            <summary>
            ID of the entity that is the source of the emissions
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.setEventID(DIS1998net.EventID)">
            <summary>
            Number generated by the issuing simulation to associate realted events.
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.getEventID">
            <summary>
            Number generated by the issuing simulation to associate realted events.
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.setLocation(DIS1998net.Vector3Float)">
            <summary>
            Location wrt entity. There is some ambugiuity in the standard here, but this is the order it is listed in the table.
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.getLocation">
            <summary>
            Location wrt entity. There is some ambugiuity in the standard here, but this is the order it is listed in the table.
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.setSystemID(DIS1998net.SystemID)">
            <summary>
            System ID information
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.getSystemID">
            <summary>
            System ID information
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.setPad2(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.setFundamentalParameters(DIS1998net.IffFundamentalData)">
            <summary>
            fundamental parameters
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.getFundamentalParameters">
            <summary>
            fundamental parameters
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer1Pdu.equals(DIS1998net.IffAtcNavAidsLayer1Pdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.IffAtcNavAidsLayer1Pdu.EmittingEntityId">
            <summary>
            ID of the entity that is the source of the emissions
            </summary>
        </member>
        <member name="P:DIS1998net.IffAtcNavAidsLayer1Pdu.EventID">
            <summary>
            Number generated by the issuing simulation to associate realted events.
            </summary>
        </member>
        <member name="P:DIS1998net.IffAtcNavAidsLayer1Pdu.Location">
            <summary>
            Location wrt entity. There is some ambugiuity in the standard here, but this is the order it is listed in the table.
            </summary>
        </member>
        <member name="P:DIS1998net.IffAtcNavAidsLayer1Pdu.SystemID">
            <summary>
            System ID information
            </summary>
        </member>
        <member name="P:DIS1998net.IffAtcNavAidsLayer1Pdu.FundamentalParameters">
            <summary>
            fundamental parameters
            </summary>
        </member>
        <member name="F:DIS1998net.IffAtcNavAidsLayer2Pdu._layerHeader">
            layer header 
        </member>
        <member name="F:DIS1998net.IffAtcNavAidsLayer2Pdu._beamData">
            beam data 
        </member>
        <member name="F:DIS1998net.IffAtcNavAidsLayer2Pdu._secondaryOperationalData">
            Secondary operational data, 5.2.57 
        </member>
        <member name="F:DIS1998net.IffAtcNavAidsLayer2Pdu._fundamentalIffParameters">
            variable length list of fundamental parameters. ^^^This is wrong 
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer2Pdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.7.4.2 When present, layer 2 should follow layer 1 and have the following fields. This requires manual cleanup.        the beamData attribute semantics are used in multiple ways. UNFINSISHED
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer2Pdu.setLayerHeader(DIS1998net.LayerHeader)">
            <summary>
            layer header
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer2Pdu.getLayerHeader">
            <summary>
            layer header
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer2Pdu.setBeamData(DIS1998net.BeamData)">
            <summary>
            beam data
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer2Pdu.getBeamData">
            <summary>
            beam data
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer2Pdu.setSecondaryOperationalData(DIS1998net.BeamData)">
            <summary>
            Secondary operational data, 5.2.57
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer2Pdu.getSecondaryOperationalData">
            <summary>
            Secondary operational data, 5.2.57
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer2Pdu.setFundamentalIffParameters(System.Collections.Generic.List{DIS1998net.FundamentalParameterDataIff})">
            <summary>
            variable length list of fundamental parameters. ^^^This is wrong
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer2Pdu.getFundamentalIffParameters">
            <summary>
            variable length list of fundamental parameters. ^^^This is wrong
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer2Pdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer2Pdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer2Pdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.IffAtcNavAidsLayer2Pdu.equals(DIS1998net.IffAtcNavAidsLayer2Pdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.IffAtcNavAidsLayer2Pdu.LayerHeader">
            <summary>
            layer header
            </summary>
        </member>
        <member name="P:DIS1998net.IffAtcNavAidsLayer2Pdu.BeamData">
            <summary>
            beam data
            </summary>
        </member>
        <member name="P:DIS1998net.IffAtcNavAidsLayer2Pdu.SecondaryOperationalData">
            <summary>
            Secondary operational data, 5.2.57
            </summary>
        </member>
        <member name="P:DIS1998net.IffAtcNavAidsLayer2Pdu.FundamentalIffParameters">
            <summary>
            variable length list of fundamental parameters. ^^^This is wrong
            </summary>
        </member>
        <member name="T:DIS1998net.CreateEntityPdu">
             Section 5.3.6.1. Create a new entity. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.CreateEntityPdu._requestID">
            Identifier for the request 
        </member>
        <member name="M:DIS1998net.CreateEntityPdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.6.1. Create a new entity. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.CreateEntityPdu.setRequestID(System.UInt32)">
            <summary>
            Identifier for the request
            </summary>
        </member>
        <member name="M:DIS1998net.CreateEntityPdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.CreateEntityPdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.CreateEntityPdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.CreateEntityPdu.equals(DIS1998net.CreateEntityPdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="M:DISnet.Utilities.PDUProcessor.ConvertByteArrayToPDU1998(System.UInt32,System.Byte[],DISnet.DataStreamUtilities.EndianTypes.Endian)">
            <summary>
            Converts a byte array into a DIS1998 PDU
            </summary>
            <param name="rawPDU">Byte array that hold raw 1998 PDU</param>
            <param name="pdu_type">Type of pdu</param>
            <returns>PDU object</returns>
        </member>
        <member name="M:DISnet.Utilities.PDUProcessor.DecodePDU(System.Object)">
            <summary>
            Provided as a means to return a string representation of the underlining PDU data.  Note format is not yet optimized.
            </summary>
            <param name="pdu">PDU to parse</param>
            <returns>StringBuilder that represents the state of the PDU</returns>
        </member>
        <member name="M:DISnet.Utilities.PDUProcessor.ProcessPDU(System.Byte[],DISnet.DataStreamUtilities.EndianTypes.Endian)">
            <summary>
            Provides a means of processing PDU data 
            </summary>
            <param name="buf">byte array containing the pdu data to process</param>
            <param name="endian">format of value types</param>
            <returns>Collection of PDUs which are represented in base object class</returns>
        </member>
        <member name="M:DISnet.Utilities.PDUProcessor.ProcessPDU(System.IO.Stream,DISnet.DataStreamUtilities.EndianTypes.Endian)">
            <summary>
            
            </summary>
            <param name="buf"></param>
            <param name="endian"></param>
            <param name="length">The standard size of a PDU header.  The size of the pdu will be read from the header. 
            Note: This value could have been a const but wanted to be more flexible</param>
            <returns></returns>
        </member>
        <member name="M:DISnet.Utilities.PDUProcessor.ProcessRawPDU(System.Byte[],DISnet.DataStreamUtilities.EndianTypes.Endian)">
            <summary>
            Provides a means of processing PDU data 
            </summary>
            <param name="buf">byte array containing the pdu data to process</param>
            <param name="endian">format of value types</param>
            <returns>Collection of Raw byte[] PDUs</returns>
        </member>
        <member name="M:DISnet.Utilities.PDUProcessor.XmlDecodePDU(System.Object)">
            <summary>
            Returns an XML version of the reflected PDU
            </summary>
            <param name="pdu">PDU to reflect into XML</param>
            <returns>StringBuilder</returns>
        </member>
        <member name="M:DISnet.Utilities.PDUProcessor.ReturnUnmarshalledPDU(System.Object,DISnet.DataStreamUtilities.DataInputStream)">
            <summary>
            Unmarshal all data into the pdu object.  This method calls the all the base unmarshals.
            </summary>
            <param name="pdu">object where the unmarshalled data will be stored</param>
            <param name="dStream">location of where the unmarshalled data is located</param>
        </member>
        <member name="M:DISnet.Utilities.PDUProcessor.ProcessPDU(System.Byte[])">
            <summary>
            Process a received PDU.  Note that a datastream can contain multiple PDUs.  Therefore a
            List is used to hold one or more after decoding.
            </summary>
            <param name="buf">byte array of PDU(s)</param>
            <returns>Collection of all PDU(s) decoded</returns>
        </member>
        <member name="M:DISnet.Utilities.PDUProcessor.ProcessRawPDU(System.Byte[])">
            <summary>
            Process a received PDU.  Note that a datastream can contain multiple PDUs.  Therefore a
            List is used to hold one or more after decoding.
            </summary>
            <param name="buf">byte array of PDU(s)</param>
            <returns>Collection of all PDU(s) in raw byte format</returns>
        </member>
        <member name="M:DISnet.Utilities.PDUProcessor.SwitchOnType(System.Byte,System.UInt32,System.Byte[])">
            <summary>
            Returns an instance of the PDU based upon the pdu type passed in.  Note PDU will be represented as an Object for simplicity.
            </summary>
            <param name="pdu_version">Version of IEEE standard</param>
            <param name="pdu_type">Type of PDU</param>
            <param name="ds">PDU byte array containing the data</param>
            <returns></returns>         
        </member>
        <member name="P:DISnet.Utilities.PDUProcessor.Endian">
            <summary>
            Type of endian used to process the data
            </summary>
        </member>
        <member name="T:DIS1998net.StopFreezePdu">
             Section 5.2.3.4. Stop or freeze an exercise. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.StopFreezePdu._realWorldTime">
            UTC time at which the simulation shall stop or freeze 
        </member>
        <member name="F:DIS1998net.StopFreezePdu._reason">
            Reason the simulation was stopped or frozen 
        </member>
        <member name="F:DIS1998net.StopFreezePdu._frozenBehavior">
            Internal behavior of the simulation and its appearance while frozento the other participants 
        </member>
        <member name="F:DIS1998net.StopFreezePdu._padding1">
            padding 
        </member>
        <member name="F:DIS1998net.StopFreezePdu._requestID">
            Request ID that is unique 
        </member>
        <member name="M:DIS1998net.StopFreezePdu.#ctor">
            Constructor 
            <summary>
            Section 5.2.3.4. Stop or freeze an exercise. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezePdu.setRealWorldTime(DIS1998net.ClockTime)">
            <summary>
            UTC time at which the simulation shall stop or freeze
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezePdu.getRealWorldTime">
            <summary>
            UTC time at which the simulation shall stop or freeze
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezePdu.setReason(System.Byte)">
            <summary>
            Reason the simulation was stopped or frozen
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezePdu.setFrozenBehavior(System.Byte)">
            <summary>
            Internal behavior of the simulation and its appearance while frozento the other participants
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezePdu.setPadding1(System.Int16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezePdu.setRequestID(System.UInt32)">
            <summary>
            Request ID that is unique
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.StopFreezePdu.equals(DIS1998net.StopFreezePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.StopFreezePdu.RealWorldTime">
            <summary>
            UTC time at which the simulation shall stop or freeze
            </summary>
        </member>
        <member name="T:DIS1998net.PointObjectStatePdu">
             Section 5.3.11.3: Inormation abut the addition or modification of a synthecic enviroment object that is anchored      to the terrain with a single point. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.PointObjectStatePdu._objectID">
            Object in synthetic environment 
        </member>
        <member name="F:DIS1998net.PointObjectStatePdu._referencedObjectID">
            Object with which this point object is associated 
        </member>
        <member name="F:DIS1998net.PointObjectStatePdu._updateNumber">
            unique update number of each state transition of an object 
        </member>
        <member name="F:DIS1998net.PointObjectStatePdu._forceID">
            force ID 
        </member>
        <member name="F:DIS1998net.PointObjectStatePdu._modifications">
            modifications 
        </member>
        <member name="F:DIS1998net.PointObjectStatePdu._objectType">
            Object type 
        </member>
        <member name="F:DIS1998net.PointObjectStatePdu._objectLocation">
            Object location 
        </member>
        <member name="F:DIS1998net.PointObjectStatePdu._objectOrientation">
            Object orientation 
        </member>
        <member name="F:DIS1998net.PointObjectStatePdu._objectAppearance">
            Object apperance 
        </member>
        <member name="F:DIS1998net.PointObjectStatePdu._requesterID">
            requesterID 
        </member>
        <member name="F:DIS1998net.PointObjectStatePdu._receivingID">
            receiver ID 
        </member>
        <member name="F:DIS1998net.PointObjectStatePdu._pad2">
            padding 
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.11.3: Inormation abut the addition or modification of a synthecic enviroment object that is anchored      to the terrain with a single point. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.setObjectID(DIS1998net.EntityID)">
            <summary>
            Object in synthetic environment
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.getObjectID">
            <summary>
            Object in synthetic environment
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.setReferencedObjectID(DIS1998net.EntityID)">
            <summary>
            Object with which this point object is associated
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.getReferencedObjectID">
            <summary>
            Object with which this point object is associated
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.setUpdateNumber(System.UInt16)">
            <summary>
            unique update number of each state transition of an object
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.setForceID(System.Byte)">
            <summary>
            force ID
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.setModifications(System.Byte)">
            <summary>
            modifications
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.setObjectType(DIS1998net.ObjectType)">
            <summary>
            Object type
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.getObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.setObjectLocation(DIS1998net.Vector3Double)">
            <summary>
            Object location
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.getObjectLocation">
            <summary>
            Object location
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.setObjectOrientation(DIS1998net.Orientation)">
            <summary>
            Object orientation
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.getObjectOrientation">
            <summary>
            Object orientation
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.setObjectAppearance(System.Double)">
            <summary>
            Object apperance
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.setRequesterID(DIS1998net.SimulationAddress)">
            <summary>
            requesterID
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.getRequesterID">
            <summary>
            requesterID
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.setReceivingID(DIS1998net.SimulationAddress)">
            <summary>
            receiver ID
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.getReceivingID">
            <summary>
            receiver ID
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.setPad2(System.UInt32)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.PointObjectStatePdu.equals(DIS1998net.PointObjectStatePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.PointObjectStatePdu.ObjectID">
            <summary>
            Object in synthetic environment
            </summary>
        </member>
        <member name="P:DIS1998net.PointObjectStatePdu.ReferencedObjectID">
            <summary>
            Object with which this point object is associated
            </summary>
        </member>
        <member name="P:DIS1998net.PointObjectStatePdu.ObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="P:DIS1998net.PointObjectStatePdu.ObjectLocation">
            <summary>
            Object location
            </summary>
        </member>
        <member name="P:DIS1998net.PointObjectStatePdu.ObjectOrientation">
            <summary>
            Object orientation
            </summary>
        </member>
        <member name="P:DIS1998net.PointObjectStatePdu.RequesterID">
            <summary>
            requesterID
            </summary>
        </member>
        <member name="P:DIS1998net.PointObjectStatePdu.ReceivingID">
            <summary>
            receiver ID
            </summary>
        </member>
        <member name="T:DIS1998net.EventID">
             Section 5.2.18. Identifies a unique event in a simulation via the combination of three values
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.EventID._site">
            The site ID 
        </member>
        <member name="F:DIS1998net.EventID._application">
            The application ID 
        </member>
        <member name="F:DIS1998net.EventID._eventNumber">
            the number of the event 
        </member>
        <member name="M:DIS1998net.EventID.#ctor">
            Constructor 
            <summary>
            Section 5.2.18. Identifies a unique event in a simulation via the combination of three values
            </summary>
        </member>
        <member name="M:DIS1998net.EventID.setSite(System.UInt16)">
            <summary>
            The site ID
            </summary>
        </member>
        <member name="M:DIS1998net.EventID.setApplication(System.UInt16)">
            <summary>
            The application ID
            </summary>
        </member>
        <member name="M:DIS1998net.EventID.setEventNumber(System.UInt16)">
            <summary>
            the number of the event
            </summary>
        </member>
        <member name="M:DIS1998net.EventID.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.EventID.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.EventID.equals(DIS1998net.EventID)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.EmitterSystem">
             Section 5.2.11. This field shall specify information about a particular emitter system
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.EmitterSystem._emitterName">
            Name of the emitter, 16 bit enumeration 
        </member>
        <member name="F:DIS1998net.EmitterSystem._function">
            function of the emitter, 8 bit enumeration 
        </member>
        <member name="F:DIS1998net.EmitterSystem._emitterIdNumber">
            emitter ID, 8 bit enumeration 
        </member>
        <member name="M:DIS1998net.EmitterSystem.#ctor">
            Constructor 
            <summary>
            Section 5.2.11. This field shall specify information about a particular emitter system
            </summary>
        </member>
        <member name="M:DIS1998net.EmitterSystem.setEmitterName(System.UInt16)">
            <summary>
            Name of the emitter, 16 bit enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.EmitterSystem.setFunction(System.Byte)">
            <summary>
            function of the emitter, 8 bit enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.EmitterSystem.setEmitterIdNumber(System.Byte)">
            <summary>
            emitter ID, 8 bit enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.EmitterSystem.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.EmitterSystem.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.EmitterSystem.equals(DIS1998net.EmitterSystem)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.BeamData">
             Section 5.2.39. Specification of the data necessary to  describe the scan volume of an emitter.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.BeamData._beamAzimuthCenter">
            Specifies the beam azimuth an elevation centers and corresponding half-angles     to describe the scan volume 
        </member>
        <member name="F:DIS1998net.BeamData._beamAzimuthSweep">
            Specifies the beam azimuth sweep to determine scan volume 
        </member>
        <member name="F:DIS1998net.BeamData._beamElevationCenter">
            Specifies the beam elevation center to determine scan volume 
        </member>
        <member name="F:DIS1998net.BeamData._beamElevationSweep">
            Specifies the beam elevation sweep to determine scan volume 
        </member>
        <member name="F:DIS1998net.BeamData._beamSweepSync">
            allows receiver to synchronize its regenerated scan pattern to     that of the emmitter. Specifies the percentage of time a scan is through its pattern from its origion. 
        </member>
        <member name="M:DIS1998net.BeamData.#ctor">
            Constructor 
            <summary>
            Section 5.2.39. Specification of the data necessary to  describe the scan volume of an emitter.
            </summary>
        </member>
        <member name="M:DIS1998net.BeamData.setBeamAzimuthCenter(System.Single)">
            <summary>
            Specifies the beam azimuth an elevation centers and corresponding half-angles     to describe the scan volume
            </summary>
        </member>
        <member name="M:DIS1998net.BeamData.setBeamAzimuthSweep(System.Single)">
            <summary>
            Specifies the beam azimuth sweep to determine scan volume
            </summary>
        </member>
        <member name="M:DIS1998net.BeamData.setBeamElevationCenter(System.Single)">
            <summary>
            Specifies the beam elevation center to determine scan volume
            </summary>
        </member>
        <member name="M:DIS1998net.BeamData.setBeamElevationSweep(System.Single)">
            <summary>
            Specifies the beam elevation sweep to determine scan volume
            </summary>
        </member>
        <member name="M:DIS1998net.BeamData.setBeamSweepSync(System.Single)">
            <summary>
            allows receiver to synchronize its regenerated scan pattern to     that of the emmitter. Specifies the percentage of time a scan is through its pattern from its origion.
            </summary>
        </member>
        <member name="M:DIS1998net.BeamData.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.BeamData.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.BeamData.equals(DIS1998net.BeamData)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.AggregateType">
             Section 5.2.38. Identifies the type of aggregate including kind of entity, domain (surface, subsurface, air, etc) country, category, etc.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.AggregateType._aggregateKind">
            Kind of entity 
        </member>
        <member name="F:DIS1998net.AggregateType._domain">
            Domain of entity (air, surface, subsurface, space, etc) 
        </member>
        <member name="F:DIS1998net.AggregateType._country">
            country to which the design of the entity is attributed 
        </member>
        <member name="F:DIS1998net.AggregateType._category">
            category of entity 
        </member>
        <member name="F:DIS1998net.AggregateType._subcategory">
            subcategory of entity 
        </member>
        <member name="F:DIS1998net.AggregateType._specific">
            specific info based on subcategory field 
        </member>
        <member name="M:DIS1998net.AggregateType.#ctor">
            Constructor 
            <summary>
            Section 5.2.38. Identifies the type of aggregate including kind of entity, domain (surface, subsurface, air, etc) country, category, etc.
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateType.setAggregateKind(System.Byte)">
            <summary>
            Kind of entity
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateType.setDomain(System.Byte)">
            <summary>
            Domain of entity (air, surface, subsurface, space, etc)
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateType.setCountry(System.UInt16)">
            <summary>
            country to which the design of the entity is attributed
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateType.setCategory(System.Byte)">
            <summary>
            category of entity
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateType.setSubcategory(System.Byte)">
            <summary>
            subcategory of entity
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateType.setSpecific(System.Byte)">
            <summary>
            specific info based on subcategory field
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateType.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateType.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.AggregateType.equals(DIS1998net.AggregateType)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.AcousticEmitter">
             Section 5.2.35. information about a specific UA emmtter
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.AcousticEmitter._acousticName">
            the system for a particular UA emitter, and an enumeration 
        </member>
        <member name="F:DIS1998net.AcousticEmitter._function">
            The function of the acoustic system 
        </member>
        <member name="F:DIS1998net.AcousticEmitter._acousticIdNumber">
            The UA emitter identification number relative to a specific system 
        </member>
        <member name="M:DIS1998net.AcousticEmitter.#ctor">
            Constructor 
            <summary>
            Section 5.2.35. information about a specific UA emmtter
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitter.setAcousticName(System.UInt16)">
            <summary>
            the system for a particular UA emitter, and an enumeration
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitter.setFunction(System.Byte)">
            <summary>
            The function of the acoustic system
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitter.setAcousticIdNumber(System.Byte)">
            <summary>
            The UA emitter identification number relative to a specific system
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitter.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitter.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitter.equals(DIS1998net.AcousticEmitter)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.AcknowledgePdu">
             Section 5.3.6.5. Acknowledge the receiptof a start/resume, stop/freeze, or RemoveEntityPDU. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.AcknowledgePdu._acknowledgeFlag">
            type of message being acknowledged 
        </member>
        <member name="F:DIS1998net.AcknowledgePdu._responseFlag">
            Whether or not the receiving entity was able to comply with the request 
        </member>
        <member name="F:DIS1998net.AcknowledgePdu._requestID">
            Request ID that is unique 
        </member>
        <member name="M:DIS1998net.AcknowledgePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.6.5. Acknowledge the receiptof a start/resume, stop/freeze, or RemoveEntityPDU. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.AcknowledgePdu.setAcknowledgeFlag(System.UInt16)">
            <summary>
            type of message being acknowledged
            </summary>
        </member>
        <member name="M:DIS1998net.AcknowledgePdu.setResponseFlag(System.UInt16)">
            <summary>
            Whether or not the receiving entity was able to comply with the request
            </summary>
        </member>
        <member name="M:DIS1998net.AcknowledgePdu.setRequestID(System.UInt32)">
            <summary>
            Request ID that is unique
            </summary>
        </member>
        <member name="M:DIS1998net.AcknowledgePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.AcknowledgePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.AcknowledgePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.AcknowledgePdu.equals(DIS1998net.AcknowledgePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.VectoringNozzleSystemData">
             Data about a vectoring nozzle system
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.VectoringNozzleSystemData._horizontalDeflectionAngle">
            horizontal deflection angle 
        </member>
        <member name="F:DIS1998net.VectoringNozzleSystemData._verticalDeflectionAngle">
            vertical deflection angle 
        </member>
        <member name="M:DIS1998net.VectoringNozzleSystemData.#ctor">
            Constructor 
            <summary>
            Data about a vectoring nozzle system
            </summary>
        </member>
        <member name="M:DIS1998net.VectoringNozzleSystemData.setHorizontalDeflectionAngle(System.Single)">
            <summary>
            horizontal deflection angle
            </summary>
        </member>
        <member name="M:DIS1998net.VectoringNozzleSystemData.setVerticalDeflectionAngle(System.Single)">
            <summary>
            vertical deflection angle
            </summary>
        </member>
        <member name="M:DIS1998net.VectoringNozzleSystemData.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.VectoringNozzleSystemData.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.VectoringNozzleSystemData.equals(DIS1998net.VectoringNozzleSystemData)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.RecordQueryReliablePdu">
             Section 5.3.12.13: A request for one or more records of data from an entity. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.RecordQueryReliablePdu._requestID">
            request ID 
        </member>
        <member name="F:DIS1998net.RecordQueryReliablePdu._requiredReliabilityService">
            level of reliability service used for this transaction 
        </member>
        <member name="F:DIS1998net.RecordQueryReliablePdu._pad1">
            padding. The spec is unclear and contradictory here. 
        </member>
        <member name="F:DIS1998net.RecordQueryReliablePdu._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.RecordQueryReliablePdu._eventType">
            event type 
        </member>
        <member name="F:DIS1998net.RecordQueryReliablePdu._time">
            time 
        </member>
        <member name="F:DIS1998net.RecordQueryReliablePdu._numberOfRecords">
            numberOfRecords 
        </member>
        <member name="F:DIS1998net.RecordQueryReliablePdu._recordIDs">
            record IDs 
        </member>
        <member name="M:DIS1998net.RecordQueryReliablePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12.13: A request for one or more records of data from an entity. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.RecordQueryReliablePdu.setRequestID(System.UInt32)">
            <summary>
            request ID
            </summary>
        </member>
        <member name="M:DIS1998net.RecordQueryReliablePdu.setRequiredReliabilityService(System.Byte)">
            <summary>
            level of reliability service used for this transaction
            </summary>
        </member>
        <member name="M:DIS1998net.RecordQueryReliablePdu.setPad1(System.UInt16)">
            <summary>
            padding. The spec is unclear and contradictory here.
            </summary>
        </member>
        <member name="M:DIS1998net.RecordQueryReliablePdu.setPad2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.RecordQueryReliablePdu.setEventType(System.UInt16)">
            <summary>
            event type
            </summary>
        </member>
        <member name="M:DIS1998net.RecordQueryReliablePdu.setTime(System.UInt32)">
            <summary>
            time
            </summary>
        </member>
        <member name="M:DIS1998net.RecordQueryReliablePdu.setNumberOfRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.RecordQueryReliablePdu.setRecordIDs(System.Collections.Generic.List{DIS1998net.FourByteChunk})">
            <summary>
            record IDs
            </summary>
        </member>
        <member name="M:DIS1998net.RecordQueryReliablePdu.getRecordIDs">
            <summary>
            record IDs
            </summary>
        </member>
        <member name="M:DIS1998net.RecordQueryReliablePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.RecordQueryReliablePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.RecordQueryReliablePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.RecordQueryReliablePdu.equals(DIS1998net.RecordQueryReliablePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.RecordQueryReliablePdu.NumberOfRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.RecordQueryReliablePdu.RecordIDs">
            <summary>
            record IDs
            </summary>
        </member>
        <member name="T:DIS1998net.PropulsionSystemData">
             Data about a propulsion system
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.PropulsionSystemData._powerSetting">
            powerSetting 
        </member>
        <member name="F:DIS1998net.PropulsionSystemData._engineRpm">
            engine RPMs 
        </member>
        <member name="M:DIS1998net.PropulsionSystemData.#ctor">
            Constructor 
            <summary>
            Data about a propulsion system
            </summary>
        </member>
        <member name="M:DIS1998net.PropulsionSystemData.setPowerSetting(System.Single)">
            <summary>
            powerSetting
            </summary>
        </member>
        <member name="M:DIS1998net.PropulsionSystemData.setEngineRpm(System.Single)">
            <summary>
            engine RPMs
            </summary>
        </member>
        <member name="M:DIS1998net.PropulsionSystemData.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.PropulsionSystemData.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.PropulsionSystemData.equals(DIS1998net.PropulsionSystemData)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.Orientation">
             Section 5.2.17. Three floating point values representing an orientation, psi, theta, and phi, aka the euler angles, in radians
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="M:DIS1998net.Orientation.#ctor">
            Constructor 
            <summary>
            Section 5.2.17. Three floating point values representing an orientation, psi, theta, and phi, aka the euler angles, in radians
            </summary>
        </member>
        <member name="M:DIS1998net.Orientation.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.Orientation.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.Orientation.equals(DIS1998net.Orientation)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.ObjectType">
             Identifies type of object. This is a shorter version of EntityType that omits the specific and extra fields.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ObjectType._entityKind">
            Kind of entity 
        </member>
        <member name="F:DIS1998net.ObjectType._domain">
            Domain of entity (air, surface, subsurface, space, etc) 
        </member>
        <member name="F:DIS1998net.ObjectType._country">
            country to which the design of the entity is attributed 
        </member>
        <member name="F:DIS1998net.ObjectType._category">
            category of entity 
        </member>
        <member name="F:DIS1998net.ObjectType._subcategory">
            subcategory of entity 
        </member>
        <member name="M:DIS1998net.ObjectType.#ctor">
            Constructor 
            <summary>
            Identifies type of object. This is a shorter version of EntityType that omits the specific and extra fields.
            </summary>
        </member>
        <member name="M:DIS1998net.ObjectType.setEntityKind(System.Byte)">
            <summary>
            Kind of entity
            </summary>
        </member>
        <member name="M:DIS1998net.ObjectType.setDomain(System.Byte)">
            <summary>
            Domain of entity (air, surface, subsurface, space, etc)
            </summary>
        </member>
        <member name="M:DIS1998net.ObjectType.setCountry(System.UInt16)">
            <summary>
            country to which the design of the entity is attributed
            </summary>
        </member>
        <member name="M:DIS1998net.ObjectType.setCategory(System.Byte)">
            <summary>
            category of entity
            </summary>
        </member>
        <member name="M:DIS1998net.ObjectType.setSubcategory(System.Byte)">
            <summary>
            subcategory of entity
            </summary>
        </member>
        <member name="M:DIS1998net.ObjectType.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ObjectType.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ObjectType.equals(DIS1998net.ObjectType)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.ModulationType">
             Radio modulation
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ModulationType._spreadSpectrum">
            spread spectrum, 16 bit boolean array 
        </member>
        <member name="F:DIS1998net.ModulationType._major">
            major 
        </member>
        <member name="F:DIS1998net.ModulationType._detail">
            detail 
        </member>
        <member name="F:DIS1998net.ModulationType._system">
            system 
        </member>
        <member name="M:DIS1998net.ModulationType.#ctor">
            Constructor 
            <summary>
            Radio modulation
            </summary>
        </member>
        <member name="M:DIS1998net.ModulationType.setSpreadSpectrum(System.UInt16)">
            <summary>
            spread spectrum, 16 bit boolean array
            </summary>
        </member>
        <member name="M:DIS1998net.ModulationType.setMajor(System.UInt16)">
            <summary>
            major
            </summary>
        </member>
        <member name="M:DIS1998net.ModulationType.setDetail(System.UInt16)">
            <summary>
            detail
            </summary>
        </member>
        <member name="M:DIS1998net.ModulationType.setSystem(System.UInt16)">
            <summary>
            system
            </summary>
        </member>
        <member name="M:DIS1998net.ModulationType.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ModulationType.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ModulationType.equals(DIS1998net.ModulationType)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.Environment">
             Section 5.2.40. Information about a geometry, a state associated with a geometry, a bounding volume, or an associated entity ID. NOTE: this class requires hand coding.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.Environment._environmentType">
            Record type 
        </member>
        <member name="F:DIS1998net.Environment._length">
            length, in bits 
        </member>
        <member name="F:DIS1998net.Environment._index">
            Identify the sequentially numbered record index 
        </member>
        <member name="F:DIS1998net.Environment._padding1">
            padding 
        </member>
        <member name="F:DIS1998net.Environment._geometry">
            Geometry or state record 
        </member>
        <member name="F:DIS1998net.Environment._padding2">
            padding to bring the total size up to a 64 bit boundry 
        </member>
        <member name="M:DIS1998net.Environment.#ctor">
            Constructor 
            <summary>
            Section 5.2.40. Information about a geometry, a state associated with a geometry, a bounding volume, or an associated entity ID. NOTE: this class requires hand coding.
            </summary>
        </member>
        <member name="M:DIS1998net.Environment.setEnvironmentType(System.UInt32)">
            <summary>
            Record type
            </summary>
        </member>
        <member name="M:DIS1998net.Environment.setLength(System.Byte)">
            <summary>
            length, in bits
            </summary>
        </member>
        <member name="M:DIS1998net.Environment.setIndex(System.Byte)">
            <summary>
            Identify the sequentially numbered record index
            </summary>
        </member>
        <member name="M:DIS1998net.Environment.setPadding1(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.Environment.setGeometry(System.Byte)">
            <summary>
            Geometry or state record
            </summary>
        </member>
        <member name="M:DIS1998net.Environment.setPadding2(System.Byte)">
            <summary>
            padding to bring the total size up to a 64 bit boundry
            </summary>
        </member>
        <member name="M:DIS1998net.Environment.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.Environment.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.Environment.equals(DIS1998net.Environment)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.EntityStatePdu">
             Section 5.3.3.1. Represents the postion and state of one entity in the world. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.EntityStatePdu._entityID">
            Unique ID for an entity that is tied to this state information 
        </member>
        <member name="F:DIS1998net.EntityStatePdu._forceId">
            What force this entity is affiliated with, eg red, blue, neutral, etc 
        </member>
        <member name="F:DIS1998net.EntityStatePdu._numberOfArticulationParameters">
            How many articulation parameters are in the variable length list 
        </member>
        <member name="F:DIS1998net.EntityStatePdu._entityType">
            Describes the type of entity in the world 
        </member>
        <member name="F:DIS1998net.EntityStatePdu._entityLinearVelocity">
            Describes the speed of the entity in the world 
        </member>
        <member name="F:DIS1998net.EntityStatePdu._entityLocation">
            describes the location of the entity in the world 
        </member>
        <member name="F:DIS1998net.EntityStatePdu._entityOrientation">
            describes the orientation of the entity, in euler angles 
        </member>
        <member name="F:DIS1998net.EntityStatePdu._entityAppearance">
            a series of bit flags that are used to help draw the entity, such as smoking, on fire, etc. 
        </member>
        <member name="F:DIS1998net.EntityStatePdu._deadReckoningParameters">
            parameters used for dead reckoning 
        </member>
        <member name="F:DIS1998net.EntityStatePdu._marking">
            characters that can be used for debugging, or to draw unique strings on the side of entities in the world 
        </member>
        <member name="F:DIS1998net.EntityStatePdu._capabilities">
            a series of bit flags 
        </member>
        <member name="F:DIS1998net.EntityStatePdu._articulationParameters">
            variable length list of articulation parameters 
        </member>
        <member name="M:DIS1998net.EntityStatePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.3.1. Represents the postion and state of one entity in the world. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.setEntityID(DIS1998net.EntityID)">
            <summary>
            Unique ID for an entity that is tied to this state information
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.getEntityID">
            <summary>
            Unique ID for an entity that is tied to this state information
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.setForceId(System.Byte)">
            <summary>
            What force this entity is affiliated with, eg red, blue, neutral, etc
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.setNumberOfArticulationParameters(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfArticulationParameters method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.setEntityType(DIS1998net.EntityType)">
            <summary>
            Describes the type of entity in the world
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.getEntityType">
            <summary>
            Describes the type of entity in the world
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.setEntityLinearVelocity(DIS1998net.Vector3Float)">
            <summary>
            Describes the speed of the entity in the world
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.getEntityLinearVelocity">
            <summary>
            Describes the speed of the entity in the world
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.setEntityLocation(DIS1998net.Vector3Double)">
            <summary>
            describes the location of the entity in the world
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.getEntityLocation">
            <summary>
            describes the location of the entity in the world
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.setEntityOrientation(DIS1998net.Orientation)">
            <summary>
            describes the orientation of the entity, in euler angles
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.getEntityOrientation">
            <summary>
            describes the orientation of the entity, in euler angles
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.setEntityAppearance(System.UInt32)">
            <summary>
            a series of bit flags that are used to help draw the entity, such as smoking, on fire, etc.
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.setDeadReckoningParameters(DIS1998net.DeadReckoningParameter)">
            <summary>
            parameters used for dead reckoning
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.getDeadReckoningParameters">
            <summary>
            parameters used for dead reckoning
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.setMarking(DIS1998net.Marking)">
            <summary>
            characters that can be used for debugging, or to draw unique strings on the side of entities in the world
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.getMarking">
            <summary>
            characters that can be used for debugging, or to draw unique strings on the side of entities in the world
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.setCapabilities(System.UInt32)">
            <summary>
            a series of bit flags
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.setArticulationParameters(System.Collections.Generic.List{DIS1998net.ArticulationParameter})">
            <summary>
            variable length list of articulation parameters
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.getArticulationParameters">
            <summary>
            variable length list of articulation parameters
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.EntityStatePdu.equals(DIS1998net.EntityStatePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.EntityStatePdu.EntityID">
            <summary>
            Unique ID for an entity that is tied to this state information
            </summary>
        </member>
        <member name="P:DIS1998net.EntityStatePdu.NumberOfArticulationParameters">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfArticulationParameters method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.EntityStatePdu.EntityType">
            <summary>
            Describes the type of entity in the world
            </summary>
        </member>
        <member name="P:DIS1998net.EntityStatePdu.EntityLinearVelocity">
            <summary>
            Describes the speed of the entity in the world
            </summary>
        </member>
        <member name="P:DIS1998net.EntityStatePdu.EntityLocation">
            <summary>
            describes the location of the entity in the world
            </summary>
        </member>
        <member name="P:DIS1998net.EntityStatePdu.EntityOrientation">
            <summary>
            describes the orientation of the entity, in euler angles
            </summary>
        </member>
        <member name="P:DIS1998net.EntityStatePdu.DeadReckoningParameters">
            <summary>
            parameters used for dead reckoning
            </summary>
        </member>
        <member name="P:DIS1998net.EntityStatePdu.Marking">
            <summary>
            characters that can be used for debugging, or to draw unique strings on the side of entities in the world
            </summary>
        </member>
        <member name="P:DIS1998net.EntityStatePdu.ArticulationParameters">
            <summary>
            variable length list of articulation parameters
            </summary>
        </member>
        <member name="T:DIS1998net.ActionRequestReliablePdu">
             Section 5.3.12.6: request from a simulation manager to a managed entity to perform a specified action. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.ActionRequestReliablePdu._requiredReliabilityService">
            level of reliability service used for this transaction 
        </member>
        <member name="F:DIS1998net.ActionRequestReliablePdu._pad1">
            padding 
        </member>
        <member name="F:DIS1998net.ActionRequestReliablePdu._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.ActionRequestReliablePdu._requestID">
            request ID 
        </member>
        <member name="F:DIS1998net.ActionRequestReliablePdu._actionID">
            request ID 
        </member>
        <member name="F:DIS1998net.ActionRequestReliablePdu._numberOfFixedDatumRecords">
            Fixed datum record count 
        </member>
        <member name="F:DIS1998net.ActionRequestReliablePdu._numberOfVariableDatumRecords">
            variable datum record count 
        </member>
        <member name="F:DIS1998net.ActionRequestReliablePdu._fixedDatumRecords">
            Fixed datum records 
        </member>
        <member name="F:DIS1998net.ActionRequestReliablePdu._variableDatumRecords">
            Variable datum records 
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12.6: request from a simulation manager to a managed entity to perform a specified action. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.setRequiredReliabilityService(System.Byte)">
            <summary>
            level of reliability service used for this transaction
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.setPad1(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.setPad2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.setRequestID(System.UInt32)">
            <summary>
            request ID
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.setActionID(System.UInt32)">
            <summary>
            request ID
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.setNumberOfFixedDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.setNumberOfVariableDatumRecords(System.UInt32)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.setFixedDatumRecords(System.Collections.Generic.List{DIS1998net.FixedDatum})">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.getFixedDatumRecords">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.setVariableDatumRecords(System.Collections.Generic.List{DIS1998net.VariableDatum})">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.getVariableDatumRecords">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.ActionRequestReliablePdu.equals(DIS1998net.ActionRequestReliablePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.ActionRequestReliablePdu.NumberOfFixedDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfFixedDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.ActionRequestReliablePdu.NumberOfVariableDatumRecords">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfVariableDatumRecords method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.ActionRequestReliablePdu.FixedDatumRecords">
            <summary>
            Fixed datum records
            </summary>
        </member>
        <member name="P:DIS1998net.ActionRequestReliablePdu.VariableDatumRecords">
            <summary>
            Variable datum records
            </summary>
        </member>
        <member name="T:DIS1998net.AcousticEmitterSystemData">
             Used in the UA pdu; ties together an emmitter and a location. This requires manual cleanup; the beam data should not be attached to each emitter system.
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.AcousticEmitterSystemData._emitterSystemDataLength">
            Length of emitter system data 
        </member>
        <member name="F:DIS1998net.AcousticEmitterSystemData._numberOfBeams">
            Number of beams 
        </member>
        <member name="F:DIS1998net.AcousticEmitterSystemData._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.AcousticEmitterSystemData._acousticEmitterSystem">
            This field shall specify the system for a particular UA emitter. 
        </member>
        <member name="F:DIS1998net.AcousticEmitterSystemData._emitterLocation">
            Represents the location wrt the entity 
        </member>
        <member name="F:DIS1998net.AcousticEmitterSystemData._beamRecords">
            For each beam in numberOfBeams, an emitter system. This is not right--the beam records need to be at the end of the PDU, rather than attached to each system. 
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystemData.#ctor">
            Constructor 
            <summary>
            Used in the UA pdu; ties together an emmitter and a location. This requires manual cleanup; the beam data should not be attached to each emitter system.
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystemData.setEmitterSystemDataLength(System.Byte)">
            <summary>
            Length of emitter system data
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystemData.setNumberOfBeams(System.Byte)">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfBeams method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystemData.setPad2(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystemData.setAcousticEmitterSystem(DIS1998net.AcousticEmitterSystem)">
            <summary>
            This field shall specify the system for a particular UA emitter.
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystemData.getAcousticEmitterSystem">
            <summary>
            This field shall specify the system for a particular UA emitter.
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystemData.setEmitterLocation(DIS1998net.Vector3Float)">
            <summary>
            Represents the location wrt the entity
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystemData.getEmitterLocation">
            <summary>
            Represents the location wrt the entity
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystemData.setBeamRecords(System.Collections.Generic.List{DIS1998net.AcousticBeamData})">
            <summary>
            For each beam in numberOfBeams, an emitter system. This is not right--the beam records need to be at the end of the PDU, rather than attached to each system.
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystemData.getBeamRecords">
            <summary>
            For each beam in numberOfBeams, an emitter system. This is not right--the beam records need to be at the end of the PDU, rather than attached to each system.
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystemData.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystemData.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.AcousticEmitterSystemData.equals(DIS1998net.AcousticEmitterSystemData)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.AcousticEmitterSystemData.NumberOfBeams">
            <summary>
            Note that setting this value will not change the marshalled value. The list whose length this describes is used for that purpose.
            The getnumberOfBeams method will also be based on the actual list length rather than this value. 
            The method is simply here for completeness and should not be used for any computations.
            </summary>
        </member>
        <member name="P:DIS1998net.AcousticEmitterSystemData.AcousticEmitterSystem">
            <summary>
            This field shall specify the system for a particular UA emitter.
            </summary>
        </member>
        <member name="P:DIS1998net.AcousticEmitterSystemData.EmitterLocation">
            <summary>
            Represents the location wrt the entity
            </summary>
        </member>
        <member name="P:DIS1998net.AcousticEmitterSystemData.BeamRecords">
            <summary>
            For each beam in numberOfBeams, an emitter system. This is not right--the beam records need to be at the end of the PDU, rather than attached to each system.
            </summary>
        </member>
        <member name="T:DIS1998net.Vector3Double">
             Section 5.3.34. Three double precision floating point values, x, y, and z
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.Vector3Double._x">
            X value 
        </member>
        <member name="F:DIS1998net.Vector3Double._y">
            Y value 
        </member>
        <member name="F:DIS1998net.Vector3Double._z">
            Z value 
        </member>
        <member name="M:DIS1998net.Vector3Double.#ctor">
            Constructor 
            <summary>
            Section 5.3.34. Three double precision floating point values, x, y, and z
            </summary>
        </member>
        <member name="M:DIS1998net.Vector3Double.setX(System.Double)">
            <summary>
            X value
            </summary>
        </member>
        <member name="M:DIS1998net.Vector3Double.setY(System.Double)">
            <summary>
            Y value
            </summary>
        </member>
        <member name="M:DIS1998net.Vector3Double.setZ(System.Double)">
            <summary>
            Z value
            </summary>
        </member>
        <member name="M:DIS1998net.Vector3Double.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.Vector3Double.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.Vector3Double.equals(DIS1998net.Vector3Double)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.RemoveEntityReliablePdu">
             Section 5.3.12.2: Removal of an entity , reliable. COMPLETE
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.RemoveEntityReliablePdu._requiredReliabilityService">
            level of reliability service used for this transaction 
        </member>
        <member name="F:DIS1998net.RemoveEntityReliablePdu._pad1">
            padding 
        </member>
        <member name="F:DIS1998net.RemoveEntityReliablePdu._pad2">
            padding 
        </member>
        <member name="F:DIS1998net.RemoveEntityReliablePdu._requestID">
            Request ID 
        </member>
        <member name="M:DIS1998net.RemoveEntityReliablePdu.#ctor">
            Constructor 
            <summary>
            Section 5.3.12.2: Removal of an entity , reliable. COMPLETE
            </summary>
        </member>
        <member name="M:DIS1998net.RemoveEntityReliablePdu.setRequiredReliabilityService(System.Byte)">
            <summary>
            level of reliability service used for this transaction
            </summary>
        </member>
        <member name="M:DIS1998net.RemoveEntityReliablePdu.setPad1(System.UInt16)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.RemoveEntityReliablePdu.setPad2(System.Byte)">
            <summary>
            padding
            </summary>
        </member>
        <member name="M:DIS1998net.RemoveEntityReliablePdu.setRequestID(System.UInt32)">
            <summary>
            Request ID
            </summary>
        </member>
        <member name="M:DIS1998net.RemoveEntityReliablePdu.marshalAutoLengthSet(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Automatically sets the length of the marshalled data, then calls the marshal method.
            </summary>
        </member>
        <member name="M:DIS1998net.RemoveEntityReliablePdu.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.RemoveEntityReliablePdu.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.RemoveEntityReliablePdu.equals(DIS1998net.RemoveEntityReliablePdu)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="T:DIS1998net.EightByteChunk">
             64 bit piece of data
            
             Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
             This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
            
             @author DMcG
             Modified for use with C#:
             Peter Smith (Naval Air Warfare Center - Training Systems Division)
        </member>
        <member name="F:DIS1998net.EightByteChunk._otherParameters">
            Eight bytes of arbitrary data 
        </member>
        <member name="M:DIS1998net.EightByteChunk.#ctor">
            Constructor 
            <summary>
            64 bit piece of data
            </summary>
        </member>
        <member name="M:DIS1998net.EightByteChunk.setOtherParameters(System.Byte[])">
            <summary>
            Eight bytes of arbitrary data
            </summary>
        </member>
        <member name="M:DIS1998net.EightByteChunk.getOtherParameters">
            <summary>
            Eight bytes of arbitrary data
            </summary>
        </member>
        <member name="M:DIS1998net.EightByteChunk.marshal(DISnet.DataStreamUtilities.DataOutputStream)">
            <summary>
            Marshal the data to the DataOutputStream.  Note: Length needs to be set before calling this method
            </summary>
        </member>
        <member name="M:DIS1998net.EightByteChunk.reflection(System.Text.StringBuilder)">
            <summary>
            This allows for a quick display of PDU data.  The current format is unacceptable and only used for debugging.
            This will be modified in the future to provide a better display.  Usage: 
            pdu.GetType().InvokeMember("reflection", System.Reflection.BindingFlags.InvokeMethod, null, pdu, new object[] { sb });
            where pdu is an object representing a single pdu and sb is a StringBuilder.
            Note: The supplied Utilities folder contains a method called 'DecodePDU' in the PDUProcessor Class that provides this functionality
            </summary>
        </member>
        <member name="M:DIS1998net.EightByteChunk.equals(DIS1998net.EightByteChunk)">
            The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
        </member>
        <member name="P:DIS1998net.EightByteChunk.OtherParameters">
            <summary>
            Eight bytes of arbitrary data
            </summary>
        </member>
    </members>
</doc>
