<?xml version="1.0"  encoding="UTF-8"?>

<!-- 
      Build file for csharp.
-->

<project name="open-dis csharp" default="generateCsharpDisSourceCode1998" basedir=".">
    <property name="lib" location="lib"/>
    <property name="version" value="1.5"/>

  <path id="lib.jars">
    <fileset dir="${lib}">
        <include name="**/*.jar"/>
    </fileset>
   </path>

    
    <target name="init" description="create initial directories">
        <mkdir dir="csharp/obj"/>
    </target>

     <target name="generateCsharpDisSourceCode1998" depends="init" description = "run program to generate csharp">
        <property name="xmlSourceFile" value="DIS1998.xml"/>
        <property name="csharpdir" value="CSharp/DIS"/>
        <property name="product" value="csharp"/>
        <property name="using" value="System, System.Collections.Generic, System.Text, System.Diagnostics, System.Xml.Serialization, DISnet.DataStreamUtilities"/>

          <!-- apply the patches, manual changes to the code captured in the patch files -->
        <antcall target="generateDisSourceCode"/>
        <!-- fix eol for generated source depending on host platform -->
        <fixcrlf srcdir="${csharpdir}" includes="**/*.cs"/>
    </target>

  <target name="generateCsharpDis7SourceCode" depends="init" description = "run program to generate csharp for DIS7">
        <property name="xmlSourceFile" value="DIS2012.xml"/>
        <property name="csharpdir" value="CSharpDis7"/>
        <property name="product" value="csharpDis7"/>
        <property name="using" value="System, System.Collections.Generic, System.Text, System.Diagnostics, System.Xml.Serialization, 
DISnet.DataStreamUtilities"/>

          <!-- apply the patches, manual changes to the code captured in the patch files -->
        <antcall target="generateDisSourceCode"/>
        <!-- fix eol for generated source depending on host platform -->
        <fixcrlf srcdir="${csharpdir}" includes="**/*.cs"/>
    </target>


    <target name="check-prerequisites-generate">
        <condition property="properties-set">
            <and>
                <isset property="xmlSourceFile"/>
                <isset property="csharpdir"/>
            </and>
        </condition>
        <fail message="Not all prerequisite properties are defined properly!" unless="properties-set"/>
    </target>

    <target name="generateDisSourceCode" depends="init, check-prerequisites-generate" description = "run program to generate DIS source code">
        <echo message="Generating DIS source code csharp"/>
        <java classname="edu.nps.moves.xmlpg.Xmlpg">
            <classpath refid="lib.jars"/>
            <arg value="${xmlSourceFile}"/>
            <arg value="csharp"/>
            <sysproperty key="xmlpg.generatedSourceDir" value="${csharpdir}"/>
            <sysproperty key="xmlpg.using" value="${using}"/>
            <!--sysproperty key="xmlpg.namespace" value="dis1998"/-->
                            
        </java>
        <!-- apply the patches, manual changes to the code captured in the patch files -->
        <!-- Note: in the csharp generator, patches/fixups are done internally, rather than afterwards in patches. -->
        <!--antcall target="patch"/-->

    </target>


    <!-- Run patch scripts on the generated code to fix various problems. This is run by the generateDisSourceCode task -->
    <target name="patch" description="patch generated source code">
        <!--exec executable="patches/applyPatches.bash"-->
         <!-- use this property for most cygwin-based windows releases -->
        <!---property name="bash" value="/cygwin/bin/bash"/-->

        <!-- Use this property for most Unix platforms -->
        <property name="bash" value="/bin/bash"/>
        <exec executable="${bash}" osfamily="unix">
            <!-- Add an extra dash in front of the login for cygwin. The other extra arguments seem to help -->
            <!--arg value="-login"/-->
            <!--arg value="-i"/-->
            <!--arg value="-c"/-->

            <!-- The bash script to run. this applies the patches to the source code -->
            <arg value="patches/applyPatches.bash"/>
            <arg value="${product}"/>
        </exec>
    </target>

    <!-- Create a distribution. This skips the target of generateDisSourceCode, since that is not typically used
         in the development cycle. You can run that target separately.
    -->
    <target name="dist" depends="clean, init" description="do everything">
   
    </target>

    <target name="clean" description="Remove build and dist directories">

    </target>

  

    
</project>
