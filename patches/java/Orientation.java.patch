Index: Orientation.java
===================================================================
--- Orientation.java	(revision 289)
+++ Orientation.java	(working copy)
@@ -1,6 +1,5 @@
 package edu.nps.moves.dis;
 
-import java.util.*;
 import java.io.*;
 import javax.xml.bind.annotation.*;
 
@@ -12,132 +11,124 @@
  *
  * @author DMcG
  */
-public class Orientation extends Object implements Serializable
-{
-   protected float  psi;
+public class Orientation extends Object implements Serializable {
 
-   protected float  theta;
+    protected float psi;
+    protected float theta;
+    protected float phi;
 
-   protected float  phi;
+    /** Constructor */
+    public Orientation() {
+    }
 
+    public int getMarshalledSize() {
+        int marshalSize = 0;
 
-/** Constructor */
- public Orientation()
- {
- }
+        marshalSize = marshalSize + 4;  // psi
+        marshalSize = marshalSize + 4;  // theta
+        marshalSize = marshalSize + 4;  // phi
 
-public int getMarshalledSize()
-{
-   int marshalSize = 0; 
+        return marshalSize;
+    }
 
-   marshalSize = marshalSize + 4;  // psi
-   marshalSize = marshalSize + 4;  // theta
-   marshalSize = marshalSize + 4;  // phi
+    public void setPsi(float pPsi) {
+        psi = pPsi;
+    }
 
-   return marshalSize;
-}
+    @XmlAttribute
+    public float getPsi() {
+        return psi;
+    }
 
+    public void setTheta(float pTheta) {
+        theta = pTheta;
+    }
 
-public void setPsi(float pPsi)
-{ psi = pPsi;
-}
+    @XmlAttribute
+    public float getTheta() {
+        return theta;
+    }
 
-@XmlAttribute
-public float getPsi()
-{ return psi; 
-}
+    public void setPhi(float pPhi) {
+        phi = pPhi;
+    }
 
-public void setTheta(float pTheta)
-{ theta = pTheta;
-}
+    @XmlAttribute
+    public float getPhi() {
+        return phi;
+    }
 
-@XmlAttribute
-public float getTheta()
-{ return theta; 
-}
-
-public void setPhi(float pPhi)
-{ phi = pPhi;
-}
-
-@XmlAttribute
-public float getPhi()
-{ return phi; 
-}
-
-
-public void marshal(DataOutputStream dos)
-{
-    try 
-    {
-       dos.writeFloat( (float)psi);
-       dos.writeFloat( (float)theta);
-       dos.writeFloat( (float)phi);
-    } // end try 
-    catch(Exception e)
-    { 
-      System.out.println(e);}
+    public void marshal(DataOutputStream dos) {
+        try {
+            dos.writeFloat(psi);
+            dos.writeFloat(theta);
+            dos.writeFloat(phi);
+        } // end try
+        catch (Exception e) {
+            System.out.println(e);
+        }
     } // end of marshal method
 
-public void unmarshal(DataInputStream dis)
-{
-    try 
-    {
-       psi = dis.readFloat();
-       theta = dis.readFloat();
-       phi = dis.readFloat();
-    } // end try 
-   catch(Exception e)
-    { 
-      System.out.println(e); 
-    }
- } // end of unmarshal method 
+    public void unmarshal(DataInputStream dis) {
+        try {
+            psi = dis.readFloat();
+            theta = dis.readFloat();
+            phi = dis.readFloat();
+        } // end try
+        catch (Exception e) {
+            System.out.println(e);
+        }
+    } // end of unmarshal method
 
-
-/**
- * Packs a Pdu into the ByteBuffer.
- * @throws java.nio.BufferOverflowException if buff is too small
- * @throws java.nio.ReadOnlyBufferException if buff is read only
- * @see java.nio.ByteBuffer
- * @param buff The ByteBuffer at the position to begin writing
- * @since ??
- */
-public void marshal(java.nio.ByteBuffer buff)
-{
-       buff.putFloat( (float)psi);
-       buff.putFloat( (float)theta);
-       buff.putFloat( (float)phi);
+    /**
+     * Packs a Pdu into the ByteBuffer.
+     * @throws java.nio.BufferOverflowException if buff is too small
+     * @throws java.nio.ReadOnlyBufferException if buff is read only
+     * @see java.nio.ByteBuffer
+     * @param buff The ByteBuffer at the position to begin writing
+     * @since ??
+     */
+    public void marshal(java.nio.ByteBuffer buff) {
+        buff.putFloat(psi);
+        buff.putFloat(theta);
+        buff.putFloat(phi);
     } // end of marshal method
 
-/**
- * Unpacks a Pdu from the underlying data.
- * @throws java.nio.BufferUnderflowException if buff is too small
- * @see java.nio.ByteBuffer
- * @param buff The ByteBuffer at the position to begin reading
- * @since ??
- */
-public void unmarshal(java.nio.ByteBuffer buff)
-{
-       psi = buff.getFloat();
-       theta = buff.getFloat();
-       phi = buff.getFloat();
- } // end of unmarshal method 
+    /**
+     * Unpacks a Pdu from the underlying data.
+     * @throws java.nio.BufferUnderflowException if buff is too small
+     * @see java.nio.ByteBuffer
+     * @param buff The ByteBuffer at the position to begin reading
+     * @since ??
+     */
+    public void unmarshal(java.nio.ByteBuffer buff) {
+        psi = buff.getFloat();
+        theta = buff.getFloat();
+        phi = buff.getFloat();
+    } // end of unmarshal method
 
+    /**
+     * The equals method doesn't always work--mostly it works only on classes that consist only of primitives. Be careful.
+     * @param rhs
+     * @return
+     */
+    public boolean equals(Orientation rhs) {
+        boolean ivarsEqual = true;
 
- /**
-  * The equals method doesn't always work--mostly it works only on classes that consist only of primitives. Be careful.
-  */
- public boolean equals(Orientation rhs)
- {
-     boolean ivarsEqual = true;
+        if (rhs.getClass() != this.getClass()) {
+            return false;
+        }
 
-    if(rhs.getClass() != this.getClass())
-        return false;
+        if (!(psi == rhs.psi)) {
+            ivarsEqual = false;
+        }
+        if (!(theta == rhs.theta)) {
+            ivarsEqual = false;
+        }
+        if (!(phi == rhs.phi)) {
+            ivarsEqual = false;
+        }
 
-     if( ! (psi == rhs.psi)) ivarsEqual = false;
-     if( ! (theta == rhs.theta)) ivarsEqual = false;
-     if( ! (phi == rhs.phi)) ivarsEqual = false;
-
-    return ivarsEqual;
- }
+        return ivarsEqual;
+    }
 } // end of class
